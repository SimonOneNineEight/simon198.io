[{"type":"Post","slug":"algorithm-introduction","title":"[Algorithm] Day.1 演算法基本介紹 Part.1","description":"最近開始在北科大的隨班附讀！發現上課之後如果不複習一下好像沒辦法，所以就決定把上課筆記整理起來，希望可以藉此更熟悉上課內容 XDD","publishedAt":"2023-03-05T00:00:00.000Z","tags":["algorithm","note"],"body":"const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(o){const r={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",ul:\"ul\",...o.components};return i(n,{children:[e(r.p,{children:\"最近開始在北科大的隨班附讀！發現上課之後如果不複習一下好像沒辦法，所以就決定把上課筆記整理起來，希望可以藉此更熟悉上課內容 XDD\"}),\"\\n\",i(r.h2,{id:\"11-什麼是演算法\",children:[e(r.a,{className:\"anchor\",href:\"#11-什麼是演算法\",children:e(r.span,{className:\"icon icon-link\"})}),\"1.1 什麼是演算法\"]}),\"\\n\",e(r.p,{children:\"演算法就是一個擁有特定目的並且有限步驟的指令集，通常會有以下幾個特性：\"}),\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"有 input 跟 output\"}),\"\\n\",e(r.li,{children:\"Definiteness：每一個指令都清楚且不模稜兩可\"}),\"\\n\",e(r.li,{children:\"Finitness：在有限的步驟內會跑完\"}),\"\\n\",e(r.li,{children:\"Effectiveness and Efficientness：有效且有效率\"}),\"\\n\"]}),\"\\n\",i(r.h2,{id:\"121-pseudocode-conventions\",children:[e(r.a,{className:\"anchor\",href:\"#121-pseudocode-conventions\",children:e(r.span,{className:\"icon icon-link\"})}),\"1.2.1 Pseudocode conventions\"]}),\"\\n\",e(r.p,{children:\"每個程式語言的使用人數都不一定，但每個程式語言都會需要面對演算法這個非常重要的主題，所以在演算法的課程裡面通常都會使用 Pseudocode（虛擬碼）來作為範例讓不論是使用什麼語言的人都可以不受程式語言限制的看懂演算法這堂課所表達的知識，而在讀者自己看懂這些的 Pseudocode 之後就可以很容易地轉換成自己習慣的程式語言並且加以運用。\"}),\"\\n\",i(r.h2,{id:\"122-recursive-algorithm-遞迴演算法\",children:[e(r.a,{className:\"anchor\",href:\"#122-recursive-algorithm-遞迴演算法\",children:e(r.span,{className:\"icon icon-link\"})}),\"1.2.2 Recursive algorithm 遞迴演算法\"]}),\"\\n\",i(r.p,{children:[\"遞迴的概念跟我們解決問題的基本邏輯很像，就是把 \",e(r.code,{children:\"大的問題轉化為數個小問題\"}),\"，之後再逐步解決這些問小問題。而遞迴演算法就是利用在演算法中呼叫自己來解決問題，這種演算法就被我們稱為 \",e(r.code,{children:\"遞迴演算法\"}),\"。\"]}),\"\\n\",i(r.h3,{id:\"河內塔\",children:[e(r.a,{className:\"anchor\",href:\"#河內塔\",children:e(r.span,{className:\"icon icon-link\"})}),\"河內塔\"]}),\"\\n\",e(r.p,{children:\"這是一個非常著名的遞迴演算法的例子，根據維基百科的就是\"}),\"\\n\",i(r.blockquote,{children:[\"\\n\",e(r.p,{children:\"有三根杆子 X，Y，Z。X 杆上有 N 個 (N>1) 穿孔圓盤，盤的尺寸由下到上依次變小。要求按下列規則將所有圓盤移至 Y 杆：\"}),\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"每次只能移動一個圓盤；\"}),\"\\n\",e(r.li,{children:\"大盤不能疊在小盤上面。\"}),\"\\n\"]}),\"\\n\",e(r.p,{children:\"提示：可將圓盤臨時置於 Y 杆，也可將從 X 杆移出的圓盤重新移回 X 杆，但都必須遵循上述兩條規則。\"}),\"\\n\",e(r.p,{children:\"問：如何移？\"}),\"\\n\"]}),\"\\n\",e(r.p,{children:\"這個問題的解法如果利用遞迴演算法就會是\"}),\"\\n\",e(r.pre,{children:e(r.code,{children:'  Algorithm TowerOfHanoi(圓盤數量, 起始杆, 目標杆子, 剩餘第三根杆子) {\\n    if(圓盤數量 >= 1) then {\\n      TowersOfHanoi(圓盤數量 - 1, 起始杆子, 剩餘第三根杆子, 目標杆子);\\n      write (\"把\", 起始杆子, 最上面的圓盤移動到\" , 目標杆子 , \"最上面\");\\n      TowersOfHanoi(圓盤數量 - 1, 剩餘第三根竿子, 目標杆子, 起始杆子);\\n    }\\n}\\n'})}),\"\\n\",e(r.p,{children:\"這個演算法的意思就是利用把 X 杆子的圓盤依序移動到 Z 竿子上，這樣 Z 杆子上就會有從小到大（從上到下）的圓盤，之後再用一樣的方式一個一個移動到 Y 杆子上就會完成題目的要求。\"}),\"\\n\",e(r.p,{children:\"讓我們跟著這個演算法跑一次試試看三個圓盤的河內塔吧\"}),\"\\n\",e(r.pre,{children:e(r.code,{children:\"1. 初始演算法，呼叫第1次 TowerOfHanoi(3, x, y, z)\\n2. 3 >= 1，if 判斷成立，所以呼叫 TowerOfHanoi(2, x, z, y)，我們稱這次為第2次河內塔\\n3. 在第2次河內塔當中，2 >= 1，if 判斷成立，所以呼叫 TowerOfHanoi(1, x, y, z)，我們稱這次為第3次河內塔\\n4. 在第3次河內塔當中，1 >= 1，if 判斷成立，所以呼叫 TowerOfHanoi(0, x, z, y)，我們稱這次為第4次河內塔\\n5. 在第4次河內塔當中，0 >= 1，if 判斷不成立，第4次河內塔結束\\n6. 第3次河內塔印出 `把 x 最上面的圓盤移動到 y 最上面`，此時 y 上面有小圓盤，x 上有中間以及大圓盤\\n7. 第3次河內塔呼叫 TowerOfHanoi(0, z, y, x)，我們稱為第五次河內塔\\n8. 在第5次河內塔當中，0 >= 1，if 判斷不成立，第5次河內塔結束\\n9. 第3次河內塔結束\\n10. 第2次河內塔印出 `把 x 最上面的圓盤移動到 z 最上面`，此時 z 上有中圓盤，y 上有小圓盤，而 x 上有大圓盤\\n11. 第2次河內塔呼叫 TowerOfHanoi(1, y, z, x)，我們稱為第6次河內塔\\n12. 在第6次河內塔當中，1 >= 1，if 判斷成立，所以呼叫 TowerOfHanoi(0, y, x, z)，我們稱這次為第7次河內塔\\n13. 在第7次河內塔當中，0 >= 1，if 判斷不成立，第7次河內塔結束\\n14. 第6次河內塔印出 `把 y 最上面的圓盤移動到 z 最上面`，此時 x 上有大圓盤，y 上沒有圓盤，z 上有小圓盤和中圓盤\\n15. 第6次河內塔呼叫 TowerOfHanoi(0, x, z, y)，我們稱為第八次河內塔\\n16. 在第8次河內塔當中，0 >= 1，if 判斷不成立，第8次河內塔結束\\n17. 第6次河內塔結束\\n18. 第2次河內塔結束\\n19. 第1次河內塔印出 `把 x 最上面的圓盤移動到 y 最上面`，此時 y 上面有大圓盤，z 上有小圓盤和中圓盤\\n20. 第1次河內塔呼叫 TowerOfHanoi(2, z, y, x)，我們稱為第9次河內塔\\n21. 第9次河內塔當中，2 >= 1，if 判斷成立，所以呼叫 TowerOfHanoi(1, z, x, y)，我們稱這次為第10次河內塔\\n22. 在第10次河內塔當中，1 >= 1，if 判斷成立，所以呼叫 TowerOfHanoi(0, z, y, x)，我們稱這次為第11次河內塔\\n23. 在第11次河內塔當中，0 >= 1，if 判斷不成立，第11次河內塔結束\\n24. 第10次河內塔印出 `把 z 最上面的圓盤移動到 x 最上面`，此時 y 上面有大圓盤，x 上有小圓盤，而 z 上有中圓盤\\n25. 第10次河內塔呼叫 TowerOfHanoi(0, y, x, z)，我們稱為第12次河內塔\\n26. 在第12次河內塔當中，0 >= 1，if 判斷不成立，第12次河內塔結束\\n27. 第10次河內塔結束\\n28. 第9次河內塔印出 `把 z 最上面的圓盤移動到 y 最上面`，此時 y 上面有中圓盤和大圓盤，x 上有小圓盤，而 z 上沒有圓盤\\n29. 第9次河內塔呼叫 TowerOfHanoi(1, x, y, z)，我們稱為第13次河內塔\\n30. 在第13次河內塔當中，1 >= 1，if 判斷成立，所以呼叫 TowerOfHanoi(0, x, z, y)，我們稱這次為第14次河內塔\\n31. 在第14次河內塔當中，0 >= 1，if 判斷不成立，第14次河內塔結束\\n32. 第13次河內塔印出 `把 x 最上面的圓盤移動到 y 最上面`，此時 x 和 z 上沒有圓盤，y 上面有小圓盤，中圓盤和大圓盤\\n33. 第13次河內塔呼叫 TowerOfHanoi(0, z, y, x)，我們稱為第15次河內塔\\n34. 在第15次河內塔當中，0 >= 1，if 判斷不成立，第15次河內塔結束\\n35. 第13次河內塔結束\\n36. 第9次河內塔結束\\n37. 第1次河內塔結束，演算法跑完，總共 7 步\\n\"})}),\"\\n\",e(r.pre,{children:e(r.code,{children:\"印出結果：\\n把 x 最上面的圓盤移動到 y 最上面\\n把 x 最上面的圓盤移動到 z 最上面\\n把 y 最上面的圓盤移動到 z 最上面\\n把 x 最上面的圓盤移動到 y 最上面\\n把 z 最上面的圓盤移動到 x 最上面\\n把 z 最上面的圓盤移動到 y 最上面\\n把 x 最上面的圓盤移動到 y 最上面\\n\"})}),\"\\n\",e(r.p,{children:\"在這一個短短的 pseudo code 裡面總共呼叫了 15 次 TowerOfHanoi 這個演算法，說真的像我這種第一次跑遞迴的人過程中跑錯很多次，但是這樣一步一步拆解確實可以把河內塔這個問題利用這個演算法拆成一塊一塊的，最後移動完成並且算出步數。\"}),\"\\n\",e(r.p,{children:\"另外一個很有名的遞迴例子就是費氏數列，大家可以自己去找找看之後跑一遍結果哦！\"}),\"\\n\",e(r.p,{children:\"參考資料:\"}),\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Horowitz and Sahani, Fundamentals of Computer Algorithms, 2ND Edition\"}),\"\\n\",i(r.li,{children:[\"Tower of Hanoi: \",e(r.a,{href:\"https://en.wikipedia.org/wiki/Tower_of_Hanoi\",children:\"https://en.wikipedia.org/wiki/Tower_of_Hanoi\"})]}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/algorithm-introduction"},{"type":"Post","slug":"automation-testing-introduction","title":"[QA]Day1. 前端常見自動化測試種類","description":"在開發的過程中一定會經過不斷的版本迭代，不論是發表新版本或者是修之前版本的 bug 都可能會遇到一個我們非常不想遇到的情況，那就是影響到其他的地方，導致修 A 壞 B 的情況發生。","publishedAt":"2022-07-11T00:00:00.000Z","tags":["QA","note"],"body":"const{Fragment:n,jsx:e,jsxs:t}=arguments[0];function _createMdxContent(i){const s={a:\"a\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",span:\"span\",ul:\"ul\",...i.components};return t(n,{children:[e(s.p,{children:\"在開發的過程中一定會經過不斷的版本迭代，不論是發表新版本或者是修之前版本的 bug 都可能會遇到一個我們非常不想遇到的情況，那就是影響到其他的地方，導致修 A 壞 B 的情況發生。\"}),\"\\n\",e(s.p,{children:\"要想要避免這種情況發生，我們就必須依靠測試來幫我們在版本發佈前提早找到錯誤，但人工測試又非常的耗時耗力，並且如果沒有詳細的測試計畫的話，就可能會不小心漏掉某個小東西，造成雖然測試了卻還是壞掉的窘境發生。這時候我們就可以把測試這項重要的工作交給我們最忠實的夥伴 — 電腦來完成，只要把自動化測試寫好，電腦就會幫你完成所有測試，不會有遺漏或是偷懶的情況發生。\"}),\"\\n\",t(s.h2,{id:\"不同類型的自動化測試\",children:[e(s.a,{className:\"anchor\",href:\"#不同類型的自動化測試\",children:e(s.span,{className:\"icon icon-link\"})}),\"不同類型的自動化測試\"]}),\"\\n\",e(s.p,{children:\"測試可以依據我們的目的以及規模的大小分為許多不同的種類，但是所有測試都是在檢驗我們的程式碼執行結果是否符合我們的預期，因此如果腦袋裡面完全不知道 output 該長什麼樣子的，就會沒辦法進行測試。\"}),\"\\n\",e(s.p,{children:\"說完了最基本的測試之後，我們來從小到大的説説幾種測試內容吧！\"}),\"\\n\",t(s.h3,{id:\"單元測試unit-test\",children:[e(s.a,{className:\"anchor\",href:\"#單元測試unit-test\",children:e(s.span,{className:\"icon icon-link\"})}),\"單元測試（Unit Test）\"]}),\"\\n\",e(s.p,{children:\"單元測試可以算是自動化測試的最小單位，通常是用來測試一小段程式碼（e.g. 一個 function 或是一個 class)，在給定 input 執行之後，他的 output 是不是和我們預期的一樣。因為每一個 unit test 只負責一小部分，所以他會有執行快速，並且互相獨立的特性存在。通常單元測試會在程式開發的時候同時由開發人員進行撰寫。\"}),\"\\n\",e(s.p,{children:\"如果換成白話文說的話，可以把單元測試想像成一間飲料店要確定他的紅茶跟牛奶加在一起會變成奶茶而不是變成檸檬紅茶。\"}),\"\\n\",t(s.h3,{id:\"整合測試integration-test\",children:[e(s.a,{className:\"anchor\",href:\"#整合測試integration-test\",children:e(s.span,{className:\"icon icon-link\"})}),\"整合測試（integration test）\"]}),\"\\n\",e(s.p,{children:\"如果我們說單元測試是在測試單一邏輯，那整合測試就是測試多個單一邏輯串連起來成的邏輯們能不能正確的執行，達到我們所希望的結果。通常會跟在 unit test 之後進行測試，用來確保這些個別執行都正確的程式合在一起也是對的；同時在 integration test 裡面也會利用假資料的方式模擬第三方 library 或是打 api 後是否得到正確的結果。\"}),\"\\n\",e(s.p,{children:\"繼續用飲料店的例子就會是，當我們今天想要一杯珍珠奶茶，店員就會拿一個杯子，裝珍珠，然後用雪克杯加入糖跟冰塊調出珍珠奶茶，倒進杯子再封起來。這裡面每一個步驟會用 unit test 來測驗對不對，之後再用 integration test 來確保他整個串起來對的。\"}),\"\\n\",t(s.h3,{id:\"端對端測試end-to-end-test--e2e-test\",children:[e(s.a,{className:\"anchor\",href:\"#端對端測試end-to-end-test--e2e-test\",children:e(s.span,{className:\"icon icon-link\"})}),\"端對端測試（end-to-end test / e2e test）\"]}),\"\\n\",e(s.p,{children:\"如果說單元測試和整合測試是在對程式邏輯進行測試的話，端對端測試就可以看作是最使用者的行為進行測試，他會直接模擬使用者的使用流程，並且測試在整個使用者體驗當中是否有出現任何不符合預期的行為，因此在前端的端對端測試就會實際打開瀏覽器進行一連串操作並且確認他沒有錯誤，可以算是交給使用者之前的最後一道防線。\"}),\"\\n\",e(s.p,{children:\"如果在我們的飲料店，他就會是測試當今天有一個客人到店裡面點一杯飲料，店員就會去 post 機輸入飲料之後開始做飲料，並且做完之後交給客人，測試這一整個流程上面客人是否得到自己期望中的服務。\"}),\"\\n\",t(s.h2,{id:\"要用哪種測試\",children:[e(s.a,{className:\"anchor\",href:\"#要用哪種測試\",children:e(s.span,{className:\"icon icon-link\"})}),\"要用哪種測試？\"]}),\"\\n\",e(s.p,{children:\"上面這樣說了這麼多種測試，那到底用哪種測試最好呢？很籠統的答案是因為每一種測試的範圍不一樣，所以在人力許可而且時間許可的情況下當然是用越詳細越好。但還是必須要考量到資源有限（專案時程、開發人力）的情況下應該要把測試做到什麼程度。\"}),\"\\n\",e(s.p,{children:\"至於不同的測試他們測得面向完全不一樣，而且都有他所需要付出的不同的時間及人力成本，例如一個撰寫一個完整的 end-to-end test 是非常花時間，而且跑一次也需要花費很多時間。但相對的他會給你非常大的信心你的 code 交給客戶之後不會出問題。至於 unit test 和 integration test 雖然寫起來跟跑起來比較快速，可以讓我們發現更底層的問題，但究竟組合起來是執行會是什麼樣子我們也沒辦法百分之百確認，所以只能說他們各自有各自的好處，就只能看當時專案的需求而選擇適合該專案的測試方式了吧！\"}),\"\\n\",t(s.h2,{id:\"參考資料\",children:[e(s.a,{className:\"anchor\",href:\"#參考資料\",children:e(s.span,{className:\"icon icon-link\"})}),\"參考資料：\"]}),\"\\n\",t(s.ul,{children:[\"\\n\",e(s.li,{children:e(s.a,{href:\"https://pjchender.dev/react/note-front-end-testing-intro/\",children:\"PJCHENder - [note] 前端測試的概念與類型\"})}),\"\\n\",e(s.li,{children:e(s.a,{href:\"https://hsien-w-wei.medium.com/ut-whats-unit-test-%E5%9C%A8%E5%89%8D%E7%AB%AF%E6%98%AF%E8%A6%81%E6%B8%AC%E4%BB%80%E9%BA%BC-a11efc529204\",children:\"[UT] What's unit test ? 在前端要測什麼 ?!\"})}),\"\\n\",e(s.li,{children:e(s.a,{href:\"https://www.softwaretestinghelp.com/what-is-integration-testing/\",children:\"What Is Integration Testing (Tutorial With Integration Testing Example)\"})}),\"\\n\",e(s.li,{children:e(s.a,{href:\"https://wadehuanglearning.blogspot.com/2020/01/blog-post.html\",children:\"探討單元測試和整合測試的涵蓋範圍\"})}),\"\\n\",e(s.li,{children:e(s.a,{href:\"https://katalon.com/resources-center/blog/end-to-end-e2e-testing\",children:\"What is End-to-End (E2E) Testing? All You Need to Know\"})}),\"\\n\",t(s.li,{children:[e(s.a,{href:\"https://smartbear.com/solutions/end-to-end-testing/\",children:\"What Is End-To-End Testing\"}),\"?\"]}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:t}=n.components||{};return t?e(t,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/automation-testing-introduction"},{"type":"Post","slug":"binary-search-tree","title":"[Algorithm] Day.6 Dictionaries Part.1 - Binary Search Tree","description":"Dictionary 是一種抽象的資料結構，他裡面的每一個元素都包含了 key 和 value 兩個值，且必須要可以支援 加入、刪除、搜索 這三個動作","publishedAt":"2023-03-15T00:00:00.000Z","tags":["algorithm","note"],"body":"const{Fragment:e,jsx:n,jsxs:r}=arguments[0];function _createMdxContent(i){const t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...i.components};return r(e,{children:[r(t.p,{children:[\"Dictionary 是一種抽象的資料結構，他裡面的每一個元素都包含了 \",n(t.strong,{children:\"key\"}),\" 和 \",n(t.strong,{children:\"value\"}),\" 兩個值，且必須要可以支援\",n(t.strong,{children:\"加入 (insert)\"}),\"、\",n(t.strong,{children:\"刪除 (delete)\"}),\"、\",n(t.strong,{children:\"搜索 (search)\"}),\" 這三個動作\"]}),\"\\n\",r(t.h2,{id:\"binary-search-tree\",children:[n(t.a,{className:\"anchor\",href:\"#binary-search-tree\",children:n(t.span,{className:\"icon icon-link\"})}),\"Binary Search Tree\"]}),\"\\n\",n(t.p,{children:\"一個 Binary Search Tree 如果不是空的，就一定會符合以下幾個條件：\"}),\"\\n\",r(t.ol,{children:[\"\\n\",n(t.li,{children:\"每一個元素的 key 都是不同的\"}),\"\\n\",n(t.li,{children:\"在 root 左邊的 subtree 裡 key 都比 root 小\"}),\"\\n\",n(t.li,{children:\"在 root 右邊的 subtree 裡 key 都比 root 大\"}),\"\\n\",n(t.li,{children:\"左右邊的 subtree 分開來看都是一個獨立的 binary search tree\"}),\"\\n\"]}),\"\\n\",n(t.p,{children:\"他的優點是不他不只可以用 key-value 來找想要的元素，也可以用 key 的排行來進行搜索想要的元素\"}),\"\\n\",r(t.h3,{id:\"search-a-binary-search-tree\",children:[n(t.a,{className:\"anchor\",href:\"#search-a-binary-search-tree\",children:n(t.span,{className:\"icon icon-link\"})}),\"Search a Binary Search Tree\"]}),\"\\n\",n(t.p,{children:\"因為在 Binary Search Tree 右邊一定比左邊大的特性，所以找東西其實只要比對 root 的 key 跟想要搜尋的 key 之後，我們就可以馬上知道下一部該往哪一個方向前進\"}),\"\\n\",n(t.pre,{children:n(t.code,{children:\"// Search key x with recursive，要在 tree 中找到 key 為 x 的元素\\nAlgorithm Search(tree, x) {\\n  if(tree = 0) return 0 //樹是空的\\n  else if(x = tree -> data) return tree //比對 root 和 x 的 key 值，如果相同代表找到了\\n  else if(x < tree -> data) return Search(tree -> leftChild, x) //如果 x 比 root 小，就拿 x 和左邊的 subtree 比較\\n  else return Search(tree -> rightChild, x) //如果 x 比 root 大，就拿 x 和右邊的 subtree 比較\\n}\\n\"})}),\"\\n\",n(t.pre,{children:n(t.code,{children:\"// Search the kth-smallest element\\nAlgorithm SearchK(k) {\\n  found = false;\\n  t = tree;\\n  leftSize = 0;\\n  while((t != 0) and not found) {\\n    if(k = (t -> leftSize)) found = true;\\n    else if(k < (t -> leftSize)) t = t -> leftChild;\\n    else {\\n      k = k - (t -> leftSize);\\n      t = (t -> rightChild)\\n    }\\n  }\\n}\\n\"})}),\"\\n\",n(t.p,{children:\"如果要找第 k 小的元素我們就必須在演算法當中加入一個 leftsize 來記錄我們搜尋到哪裡了！\"}),\"\\n\",r(t.blockquote,{children:[\"\\n\",n(t.p,{children:\"大家可以根據上面的線索思考一下上面演算法中 else 裡面的 k = k - (t -> leftSize) 這一行的作用是什麼\"}),\"\\n\",r(t.p,{children:[\"答案是：\\n當我們發現要去右邊的 subtree 中搜尋的時候，就代表已經有 leftSize 個節點小於 k 了，所以我們在右邊的 subtree 裡面就只要在多少 \",n(t.code,{children:\"k - (t -> leftSize )\"}),\" 個節點就會找到我們要的點\"]}),\"\\n\"]}),\"\\n\",r(t.h3,{id:\"insert-into-a-binary-search-tree\",children:[n(t.a,{className:\"anchor\",href:\"#insert-into-a-binary-search-tree\",children:n(t.span,{className:\"icon icon-link\"})}),\"Insert into a Binary Search Tree\"]}),\"\\n\",n(t.p,{children:\"要把元素加入一個 Binary Search Tree 裡面有兩個步驟：\"}),\"\\n\",r(t.ol,{children:[\"\\n\",n(t.li,{children:\"確認要加入的元素 key 值和已經存在的元素沒有重複\"}),\"\\n\",n(t.li,{children:\"找到適當的位子放那個元素\"}),\"\\n\"]}),\"\\n\",r(t.p,{children:[\"至於要怎麼找到該放的位子，其實就是 \",n(t.code,{children:\"一層一層找，如果 key > root 就往右，反之就往左，直到找到一個沒有 subtree 的空格就是他該放的位子\"})]}),\"\\n\",n(t.pre,{children:n(t.code,{children:\"Algorithm Insert(x) {\\n  found = false;\\n  p = tree;\\n\\n  //search for x, q is the parent of p\\n  while((p != 0) and not found) { // 從上往下一層一層找，一直到 leaf 為止\\n    q = p //暫存 p\\n    if(x = (p -> data)) found = true;\\n    else if(x < (p -> data)) p = (p -> leftChild);\\n    else p = (p -> rightChild);\\n  }\\n\\n  //insert\\n  if(not found) {\\n    p = new TreeNode;\\n    (p -> leftChild) = 0;\\n    (p -> rightChild) = 0;\\n    (p -> data) = x; // 這四行是建立一個新的且沒有 children 的 node x\\n    if(tree != 0) {\\n      if(x < (q -> data)) {\\n        (q -> leftChild) = p;\\n      } else {\\n        (q -> rightChild) = p;\\n      }\\n    }\\n  }\\n}\\n\"})}),\"\\n\",r(t.h3,{id:\"tree-deletion\",children:[n(t.a,{className:\"anchor\",href:\"#tree-deletion\",children:n(t.span,{className:\"icon icon-link\"})}),\"Tree deletion\"]}),\"\\n\",n(t.p,{children:\"要把 node 從樹裡面刪掉就相對是一件比較簡單的事情了！我們這邊分成兩種情況：\"}),\"\\n\",r(t.ol,{children:[\"\\n\",r(t.li,{children:[\"\\n\",n(t.p,{children:\"要刪的 node 是 leaf\"}),\"\\n\",n(t.p,{children:\"因為是最下層，所以他不會影響到其他的 node，所以我們就直接刪掉就可以了\"}),\"\\n\"]}),\"\\n\",r(t.li,{children:[\"\\n\",n(t.p,{children:\"要刪的 node 不是 leaf\"}),\"\\n\",n(t.p,{children:\"這種情況下我們就需要把要刪掉的 node 所有的 decendant 都連接到原本 node 的 parent 上面，在 Binary search tree 裡面我們則是選擇最大的左側 subtree 或是最小的右側 subtree 作為新的 subtree root\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",n(t.p,{children:\"今天主要介紹了 Binary Search Tree 的各種操作，明天會進入到下一部分，也就是 Priority Queue 的部分。\"})]})}return{default:function(e={}){const{wrapper:r}=e.components||{};return r?n(r,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/binary-search-tree"},{"type":"Post","slug":"complexity-of-algorithm","title":"[Algorithm] Day.2 演算法基本介紹 Part.2","description":"昨天介紹了什麼是演算法、虛擬碼跟遞迴演算法，最後還詳細的跑了一次河內塔。今天就讓我們繼續演算法的基本介紹吧！","publishedAt":"2023-03-10T00:00:00.000Z","tags":["algorithm","note"],"body":"const{Fragment:n,jsx:i,jsxs:e}=arguments[0];function _createMdxContent(c){const r={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...c.components},{Image:o}=r;return o||function(n,i){throw new Error(\"Expected \"+(i?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),e(n,{children:[i(r.p,{children:\"昨天介紹了什麼是演算法、虛擬碼跟遞迴演算法，最後還詳細的跑了一次河內塔。今天就讓我們繼續演算法的基本介紹吧！\"}),\"\\n\",e(r.h2,{id:\"13-performance-analysis-效能分析\",children:[i(r.a,{className:\"anchor\",href:\"#13-performance-analysis-效能分析\",children:i(r.span,{className:\"icon icon-link\"})}),\"1.3 Performance Analysis 效能分析\"]}),\"\\n\",e(r.p,{children:[\"學習演算法的主要目的除了把問題解決以外，還要漂亮的把問題解決，也就是要有好的效能！那要怎麼量測一個演算法的效能呢，我們可以分成 \",i(r.code,{children:\"空間複雜度\"}),\" 以及 \",i(r.code,{children:\"時間複雜度\"}),\" 兩個指標\"]}),\"\\n\",e(r.h3,{id:\"131-space-complexity-空間複雜度\",children:[i(r.a,{className:\"anchor\",href:\"#131-space-complexity-空間複雜度\",children:i(r.span,{className:\"icon icon-link\"})}),\"1.3.1 Space Complexity 空間複雜度\"]}),\"\\n\",i(r.p,{children:\"空間複雜度就是一個演算法所需要的記憶體空間\"}),\"\\n\",e(r.p,{children:[\"我們可以把空間複雜度分為 \",i(r.code,{children:\"Fixed part\"}),\" 和 \",i(r.code,{children:\"Variable part\"}),\" 兩個部分，其中 Fixed part 就包含了程式碼本身、常數和一些範例的變數；而 Variable part 則是會隨著程式的運作而改變的部分，通常會包含變數以及遞迴堆疊的空間。\"]}),\"\\n\",e(r.h3,{id:\"132-time-complexity-時間複雜度\",children:[i(r.a,{className:\"anchor\",href:\"#132-time-complexity-時間複雜度\",children:i(r.span,{className:\"icon icon-link\"})}),\"1.3.2 Time Complexity 時間複雜度\"]}),\"\\n\",i(r.p,{children:\"時間複雜度就是執行一個演算法所需要的時間，通常用 CPU Time 作為單位\"}),\"\\n\",i(r.p,{children:\"然而雖然說是執行演算法所需要的時間，但因為要準確的測量 CPU Time 以及到底一個指令要多少時間跑是非常困難的事情，所以準確的說時間複雜度指的是演算法的當中的 statement 被執行了多少次\"}),\"\\n\",i(r.p,{children:\"用最原始的方式算的話其實也蠻簡單的，只需要在原本的程式中適當的加入一些計算執行次數的程式，我們可以像下面這個例子：\"}),\"\\n\",i(r.pre,{children:i(r.code,{children:\"Algorithm Sum(a,n) {\\n  s = 0.0;\\n  count = count + 1 //count 為一個初始值為 0 的全域變數，用來計算執行次數\\n  for i = 1 to n do {\\n    count = count + 1 //每一圈 for 的判斷都 +1\\n    s = s + a[i];\\n    count = count + 1 //重新賦值 s 所以 +1\\n  }\\n  count = count + 1 //最後一圈 for\\n  count = count + 1 //return 的指令\\n  return s;\\n}\\n\"})}),\"\\n\",e(r.p,{children:[\"雖然說在一個簡單的演算法當中加入計數的程式看起來沒有很難，但想像當演算法變得更複雜之後，這個加入計數的過程勢必會變得更加困難！所以我們就會需要一個更簡單一點的表示方法 — \",i(r.code,{children:\"Big-O\"})]}),\"\\n\",e(r.h3,{id:\"1321-big-o-notation\",children:[i(r.a,{className:\"anchor\",href:\"#1321-big-o-notation\",children:i(r.span,{className:\"icon icon-link\"})}),\"1.3.2.1 Big-O notation\"]}),\"\\n\",e(r.p,{children:[\"Big-O 的在維基百科的定義就是用另一個（通常更簡單的）函式 (g(n)) 來描述一個函式 (f(n)) 數量級的\",i(r.strong,{children:\"漸近上界\"}),\"。\"]}),\"\\n\",e(r.p,{children:[\"意思就是他是用來計算某一個演算法的天花板的，在時間複雜度裡面就是在計算一個演算法最多所需要花的時間。我們常見的 Big-O notation 有 \",i(r.code,{children:\"O(1)\"}),\" 、 \",i(r.code,{children:\"O(log n)\"}),\" 、 \",i(r.code,{children:\"O(n)\"}),\" 、 \",i(r.code,{children:\"O(n log n)\"}),\" 、 \",i(r.code,{children:\"O(n^2)\"}),\" 、 \",i(r.code,{children:\"O(2^n)\"}),\" 等。另外這個描述函式數量級的函式 (g(n)) 必須要越小越好，因為這個上界必須要越嚴謹越好\"]}),\"\\n\",e(r.h3,{id:\"1322-big-ω-notation\",children:[i(r.a,{className:\"anchor\",href:\"#1322-big-ω-notation\",children:i(r.span,{className:\"icon icon-link\"})}),\"1.3.2.2 Big-Ω notation\"]}),\"\\n\",e(r.p,{children:[\"這個和 Big-O notation 很像，但他表示的是 f(n) 的\",i(r.strong,{children:\"漸進下界\"}),\"，換成時間複雜度就是一個演算法所需要執行的最小時間\"]}),\"\\n\",e(r.h3,{id:\"1323-big-θ-notation\",children:[i(r.a,{className:\"anchor\",href:\"#1323-big-θ-notation\",children:i(r.span,{className:\"icon icon-link\"})}),\"1.3.2.3 Big-Θ notation\"]}),\"\\n\",i(r.p,{children:\"這是當 Big-O 和 Big-Ω 相同的時候我們稱它為 Big-Θ，是一個理想的狀態\"}),\"\\n\",e(r.p,{children:[\"這三種 notation 都有一個特性，就是因為在執行次數越大的時候，較小次方的數值對整個演算法的影響會越來越小，因此 他們 \",i(r.code,{children:\"只看 f(n) 的最高次方\"})]}),\"\\n\",i(r.p,{children:\"另外因為工程師需要提升的是一個演算法最慢的執行速度，所以通常我們只在乎 Big-O，另外兩項比較是數學家在乎的領域了 XD\"}),\"\\n\",e(r.h3,{id:\"1324-常見的-big-o\",children:[i(r.a,{className:\"anchor\",href:\"#1324-常見的-big-o\",children:i(r.span,{className:\"icon icon-link\"})}),\"1.3.2.4 常見的 Big-O\"]}),\"\\n\",i(o,{src:\"/blog/big-o-complexity.png\",alt:\"big-o-complexity\"}),\"\\n\",i(r.p,{children:\"說到 Big-O 我想大家都對這張圖不陌生，這些演算法的時間複雜度由小到大分別為\"}),\"\\n\",e(r.blockquote,{children:[\"\\n\",i(r.p,{children:\"O(1) < O(log n) < O(n) < O(n log n) < O(n^2) < O(n^3) < O(2^n)\"}),\"\\n\"]}),\"\\n\",i(r.p,{children:\"那就來讓我們幫常見的演算法這些一個一個舉例吧：\"}),\"\\n\",e(r.ol,{children:[\"\\n\",e(r.li,{children:[\"\\n\",i(r.p,{children:\"O(1)\"}),\"\\n\",i(r.p,{children:\"只要是沒有循環等複雜結構那麼這個程式碼的時間複雜度都是 O(1)，例如\"}),\"\\n\",i(r.pre,{children:i(r.code,{children:\"  Algorithm Oone () {\\n    i = 0;\\n    i ++;\\n    return i;\\n  }\\n\"})}),\"\\n\"]}),\"\\n\",e(r.li,{children:[\"\\n\",i(r.p,{children:\"O(log n)\"}),\"\\n\",i(r.pre,{children:i(r.code,{children:\"Algorithm Ologn () {\\n  i = 1\\n  while i < n do {\\n    i = i * 10\\n  }\\n}\\n\"})}),\"\\n\",i(r.p,{children:\"在這個 while 迴圈裡面每次都將 i * 10，所以 i 會以對數的速度接近 n，我以我們稱之為 O(log n)，著名的 O(log n) 演算法就是 Binary search\"}),\"\\n\"]}),\"\\n\",e(r.li,{children:[\"\\n\",i(r.p,{children:\"O(n)\"}),\"\\n\",i(r.pre,{children:i(r.code,{children:\"Algorithm On () {\\n  for i < n do {\\n    i = i + 1\\n  }\\n}\\n\"})}),\"\\n\",i(r.p,{children:\"在這個 for 迴圈裡面 i 是線性增加的，所以稱之為 O(n)，例子是 Linear search\"}),\"\\n\"]}),\"\\n\",e(r.li,{children:[\"\\n\",i(r.p,{children:\"O(n log n)\"}),\"\\n\",i(r.pre,{children:i(r.code,{children:\"Algorithm Onlogn () {\\n  for i < n do {\\n    i = i + 1\\n    while j < n do {\\n      j = j * 10\\n    }\\n  }\\n}\\n\"})}),\"\\n\",i(r.p,{children:\"這裡的雙層迴圈裡面就是把 O(log n) 重複執行 n 次所以複雜度為 O(n log n)，例子是 Merge search\"}),\"\\n\"]}),\"\\n\",e(r.li,{children:[\"\\n\",i(r.p,{children:\"O(n^2)\"}),\"\\n\",i(r.pre,{children:i(r.code,{children:\"Algorithm Onlogn () {\\n  for i < n do {\\n    i = i + 1\\n    for j < n do {\\n      j = j + 1\\n    }\\n  }\\n}\\n\"})}),\"\\n\",i(r.p,{children:\"這裡的雙層迴圈裡面就是把 O(n) 重複執行 n 次所以複雜度為 O(n*n) 也就是 O(n^2)，例子是 Bubble search\"}),\"\\n\"]}),\"\\n\",e(r.li,{children:[\"\\n\",i(r.p,{children:\"O(2^n)\"}),\"\\n\",i(r.p,{children:\"根據教授上課時說話，這已經不能算是一個演算法，因為執行時間會隨著 n 變大而指數增加，對於演算法來說過度沒有效率\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.p,{children:\"這樣我們基本上就介紹完了要如何測量一個演算法的效能，最後提一點就是因為最近的科技發達，所以記憶體基本上成本很低，所以在設計演算法的時候，通常是以時間複雜度為優先，就算犧牲一點空間複雜度也是非常可以接受的哦！\"}),\"\\n\",i(r.p,{children:\"參考資料：\"}),\"\\n\",e(r.ul,{children:[\"\\n\",i(r.li,{children:\"Horowitz and Sahani, Fundamentals of Computer Algorithms, 2ND Edition\"}),\"\\n\",e(r.li,{children:[\"維基百科：\",i(r.a,{href:\"https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\",children:\"https://zh.wikipedia.org/wiki/大 O 符号\"})]}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:e}=n.components||{};return e?i(e,{...n,children:i(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/complexity-of-algorithm"},{"type":"Post","slug":"computer-network-1","title":"[Note] Cloud Computing Learning No.1 - Computer Network","description":"","publishedAt":"2024-10-22T00:00:00.000Z","tags":["Cloud Computing","note","Computer Network"],"body":"const{Fragment:e,jsx:n,jsxs:i}=arguments[0];function _createMdxContent(r){const l={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",ol:\"ol\",p:\"p\",span:\"span\",strong:\"strong\",ul:\"ul\",...r.components};return i(e,{children:[i(l.h2,{id:\"what-is-a-computer-network\",children:[n(l.a,{className:\"anchor\",href:\"#what-is-a-computer-network\",children:n(l.span,{className:\"icon icon-link\"})}),\"What is a Computer Network?\"]}),\"\\n\",n(l.p,{children:\"A computer network is a collection of interconnected devices that communicate with each other to share resouces, data, and services. The devices in a network are connected through transmission media, which can be wired or wireless.\"}),\"\\n\",i(l.p,{children:[\"In a network, communication between devices is governed by protocols, such as \",n(l.code,{children:\"TCP/IP\"}),\", which ensure that data is transmitted reliably and securely across different devices.\"]}),\"\\n\",i(l.h3,{id:\"components-of-a-computer-network\",children:[n(l.a,{className:\"anchor\",href:\"#components-of-a-computer-network\",children:n(l.span,{className:\"icon icon-link\"})}),\"Components of a Computer Network\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Devices\"}),\": Computers, smartphones, servers, routers, etc.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Networking hardware\"}),\": Routers, switches, hubs, modems.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Transmission media\"}),\": Cables or wireless singals (Wi-Fi, radio waves).\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Protocols\"}),\": Rules that govern the communication between devices (e.g. TCP/IP, HTTP, FTP)\"]}),\"\\n\"]}),\"\\n\",i(l.h3,{id:\"types-of-networks\",children:[n(l.a,{className:\"anchor\",href:\"#types-of-networks\",children:n(l.span,{className:\"icon icon-link\"})}),\"Types of Networks:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"LAN (Local Area Network)\"}),\": A network that covers a small geographic area like home, office, or building.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"WAN (Wide Area Network)\"}),\": A network that covers a large geographic area, often a country or continent, like the internet.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"PAN (Personal Area Network)\"}),\": A short-range networkd for personal devices, such as Bluetooth connection.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"MAN (Metropolitan Area Network)\"}),\": A network that spans a city or large campus.\"]}),\"\\n\"]}),\"\\n\",i(l.h2,{id:\"network-topology\",children:[n(l.a,{className:\"anchor\",href:\"#network-topology\",children:n(l.span,{className:\"icon icon-link\"})}),\"Network Topology\"]}),\"\\n\",i(l.p,{children:[n(l.code,{children:\"Network Topology\"}),\" refers to the physical or logical arrangement of devices( nodes) and the connections (links) between them in a network. It defines how different devices are interconnected and how data flows between them. Network topology plays a critical role int the performance, scalability, and reliability of a network.\"]}),\"\\n\",i(l.h4,{id:\"two-types-of-topologies\",children:[n(l.a,{className:\"anchor\",href:\"#two-types-of-topologies\",children:n(l.span,{className:\"icon icon-link\"})}),\"Two types of topologies:\"]}),\"\\n\",i(l.ol,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Physical Topology\"}),\": Describe how the devices are physically connected.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Logical Topology\"}),\": Describes how data flows within the network, regardless of the physical design.\"]}),\"\\n\"]}),\"\\n\",i(l.h2,{id:\"common-types-of-network-topologies\",children:[n(l.a,{className:\"anchor\",href:\"#common-types-of-network-topologies\",children:n(l.span,{className:\"icon icon-link\"})}),\"Common Types of Network Topologies:\"]}),\"\\n\",i(l.h4,{id:\"1-bus-topology\",children:[n(l.a,{className:\"anchor\",href:\"#1-bus-topology\",children:n(l.span,{className:\"icon icon-link\"})}),\"1. Bus Topology:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Description\"}),\": All devices are connected to a single central cable (the bus). Data is transmitted from one node and travales along the bus until it reaches the destination node.\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Advantages\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Simple to install and use.\"}),\"\\n\",n(l.li,{children:\"Cost-effective for small network.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Disadvantages\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Limited by the number of devices and distance.\"}),\"\\n\",n(l.li,{children:\"A failure in the central cable can bring down the entire network.\"}),\"\\n\",n(l.li,{children:\"Data collisions can occur if two devices try to send data simultancously.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Use Cases\"}),\": Small, low-cost networks.\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"2-star-topology\",children:[n(l.a,{className:\"anchor\",href:\"#2-star-topology\",children:n(l.span,{className:\"icon icon-link\"})}),\"2. Star Topology:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Description\"}),\": All devices are connected to a single central cable (the bus). Data is transmitted from one node and travales along the bus until it reaches the destination node.\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Advantages\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Easy to install and manage.\"}),\"\\n\",n(l.li,{children:\"Failure of single device does not affect the rest of the network.\"}),\"\\n\",n(l.li,{children:\"Good performance, as the hub directs data efficiently.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Disadvantages\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"If the central hub or switch fails, the entire network goes down.\"}),\"\\n\",n(l.li,{children:\"More cable is required compared to bus topology, increaing costs.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Use Cases\"}),\": Commonly used in home, office, and LANs.\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"3-ring-topology\",children:[n(l.a,{className:\"anchor\",href:\"#3-ring-topology\",children:n(l.span,{className:\"icon icon-link\"})}),\"3. Ring Topology:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Description\"}),\": Each device is connected to two other devices, forming a circular (ring) network. Data travels in one direction (or in both in a dual ring) around the ring until it reaches its destination.\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Advantages\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Data travels in a predictable manner, reducing the chance of collisions.\"}),\"\\n\",n(l.li,{children:\"Eazy to install and troubleshoot.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Disadvantages\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Failure of a single device or connection can disrupt the entire network.\"}),\"\\n\",n(l.li,{children:\"Performance degrades as more devices are added to the network\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Use Cases\"}),\": FDDI (Fiber Distributed Data Interface) networks, some industrial control networks.\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"4-mesh-topology\",children:[n(l.a,{className:\"anchor\",href:\"#4-mesh-topology\",children:n(l.span,{className:\"icon icon-link\"})}),\"4. Mesh Topology:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Description\"}),\": Each device is connected to every other device in the network. This can be a full mesh (where every device is directly connected) or a partial mesh (where only some devices are connected to each other).\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Advantages\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"High fault tolerance -- if one connection fails, data can take another route.\"}),\"\\n\",n(l.li,{children:\"Provide high performance and reliability.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Disadvantages\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Expensive and complex to set up.\"}),\"\\n\",n(l.li,{children:\"Requires a lot of cabling, leading to high costs.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Use Cases\"}),\": High-reliability networks like military communication systems, large WANs, and the internet.\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"5-tree-topology\",children:[n(l.a,{className:\"anchor\",href:\"#5-tree-topology\",children:n(l.span,{className:\"icon icon-link\"})}),\"5. Tree Topology:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Description\"}),\": Tree topology is a combination of star and bus topologies. Devices are grouped into star-shaped clusters, and thoese clusters are connected in a bus-like fashion. There's usually a root node (central hub), and all other devices are connected to it hierarchically.\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Advantages\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Eazy to expand by adding more star-shaped clusters.\"}),\"\\n\",n(l.li,{children:\"Centralized control and management.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Disadvantages\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"If the backbone fails, entire sections of the network can be affected.\"}),\"\\n\",n(l.li,{children:\"Maintenance and configuration can be complex due to the hierarchical structure.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Use Cases\"}),\": Large networks like university or corporate campuses, where sub-networks are connected to a central backbone.\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h2,{id:\"osi-model\",children:[n(l.a,{className:\"anchor\",href:\"#osi-model\",children:n(l.span,{className:\"icon icon-link\"})}),\"OSI Model\"]}),\"\\n\",i(l.p,{children:[\"The \",n(l.strong,{children:\"OSI Model (Open Systems Intrconnection Model)\"}),\" is a conceptual framework used to understand and standardize the functions of a communivation system or network. The OSI model divides a communication system into 7 different layers, with each layer having a specific role and interactiong with the layers directly above and below it. This layered architecture helps network engineers and developers troubleshoot, design and understand how data is transmitted over network.\"]}),\"\\n\",i(l.h3,{id:\"the-7-layers-of-the-osi-model\",children:[n(l.a,{className:\"anchor\",href:\"#the-7-layers-of-the-osi-model\",children:n(l.span,{className:\"icon icon-link\"})}),\"The 7 Layers of the OSI Model:\"]}),\"\\n\",i(l.h4,{id:\"1-physical-layer-layer-1\",children:[n(l.a,{className:\"anchor\",href:\"#1-physical-layer-layer-1\",children:n(l.span,{className:\"icon icon-link\"})}),\"1. Physical Layer (Layer 1):\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Function\"}),\": Responsible for the physical connection between devices, and the transmission and recertion of raw bitstreams (0s and 1s) over a physical medium (e.g. cables, radio waves).\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Examples\"}),\": Ethernet cables, fiber optics, hubs, and network adapters.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Key Tasks\"}),\":\",\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Data encoding and transmission.\"}),\"\\n\",n(l.li,{children:\"Bit synchronization.\"}),\"\\n\",n(l.li,{children:\"Medium type (wired or wireless) and signal processing.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"2-data-link-layer-layer-2\",children:[n(l.a,{className:\"anchor\",href:\"#2-data-link-layer-layer-2\",children:n(l.span,{className:\"icon icon-link\"})}),\"2. Data Link Layer (Layer 2):\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Function\"}),\": Provides reliable data transfer across the physical layer by detecting and possibly correcting errors that occur at the physical layer. It also handles MAC (Media Access Control) addresses for device-to-device communication within the same network.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Examples\"}),\": Switches, MAC addresses, Ethernet, Wi-Fi\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Key Tasks\"}),\":\",\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Frame creation and detection.\"}),\"\\n\",n(l.li,{children:\"Error detection and correction.\"}),\"\\n\",n(l.li,{children:\"Flow control between devices.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"3-network-layer-layer-3\",children:[n(l.a,{className:\"anchor\",href:\"#3-network-layer-layer-3\",children:n(l.span,{className:\"icon icon-link\"})}),\"3. Network Layer (Layer 3):\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Function\"}),\": Manages logical addressing and routing so that data packets can be sent across multiple networks. It determines the best physical path for data to travel from the source to the destination across different devices and networks.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Examples\"}),\": Routers, IP addresses (IPv4, IPv6).\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Key Tasks\"}),\":\",\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Routing of data packets (using routing protocols like OSPF, BGP).\"}),\"\\n\",n(l.li,{children:\"Logical addressing (IP addressing).\"}),\"\\n\",n(l.li,{children:\"Packet forwarding and handling.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"4-transport-layer-layer-4\",children:[n(l.a,{className:\"anchor\",href:\"#4-transport-layer-layer-4\",children:n(l.span,{className:\"icon icon-link\"})}),\"4. Transport Layer (Layer 4):\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Function\"}),\": Ensures complete data transfer by providing reliable or unreliable delivery. It handles error correction, segmentation, flow control, and multiplexing. This layer is crucial for end-to-end communication between devices.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Examples\"}),\": TCP, UDP\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Key Tasks\"}),\":\",\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Reliable communication using error recovery and acknowledgment (TCP).\"}),\"\\n\",n(l.li,{children:\"Unreliable, low-latency communication without acknowledgments (UDP).\"}),\"\\n\",n(l.li,{children:\"Segmentation and reassembly of data packets.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"5-session-layer-layer-5\",children:[n(l.a,{className:\"anchor\",href:\"#5-session-layer-layer-5\",children:n(l.span,{className:\"icon icon-link\"})}),\"5. Session Layer (Layer 5):\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Function\"}),\": Establishes, manages, and terminates sessions between applications on different devices. It handles session checkpoints and recovery, ensuring that the communication remains synchronized.\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Examples\"}),\": NetBIOS, RPC (Remote Procedure Call), PPTP (Point-to-Point Tunneling Protocol).\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",n(l.p,{children:\"Key Tasks:\"}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Session initiation and termination.\"}),\"\\n\",n(l.li,{children:\"Session checkpointing and recovery.\"}),\"\\n\",n(l.li,{children:\"Synchronization between communicating devices.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"6-presentation-layer-layer-6\",children:[n(l.a,{className:\"anchor\",href:\"#6-presentation-layer-layer-6\",children:n(l.span,{className:\"icon icon-link\"})}),\"6. Presentation Layer (Layer 6):\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Function\"}),\": This layer is responsible for data translation, encryption, decryption, and data compression. It ensures that the data sent from the application layer of one system is readable by the application layer of another system.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Examples\"}),\": SSL/TLS (for encryption), JPEG, GIF, ASCII and EBCDIC.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Key Tasks\"}),\":\",\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Data formatting and encoding.\"}),\"\\n\",n(l.li,{children:\"Data encryption and decryption.\"}),\"\\n\",n(l.li,{children:\"Data compression and decompression.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"7-application-layer-layer-7\",children:[n(l.a,{className:\"anchor\",href:\"#7-application-layer-layer-7\",children:n(l.span,{className:\"icon icon-link\"})}),\"7. Application Layer (Layer 7):\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Function\"}),\": This layer interacts irectly with end-user applications and provides network services to applications. It enables services like email, web browsing, etc. The application layer is where the user's software interacts with the network.\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Examples\"}),\": HTTP, FTP, SMTP, DNS, SNMP\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"\\n\",i(l.p,{children:[n(l.strong,{children:\"Key Task\"}),\":\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Provide network services to end-user applications.\"}),\"\\n\",n(l.li,{children:\"Handling high-level protocols for specific applications.\"}),\"\\n\",n(l.li,{children:\"Interacting with software applications to initiate and manage data exchange.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h3,{id:\"why-is-osi-model-important\",children:[n(l.a,{className:\"anchor\",href:\"#why-is-osi-model-important\",children:n(l.span,{className:\"icon icon-link\"})}),\"Why is OSI Model Important:\"]}),\"\\n\",i(l.ol,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Standardization\"}),\": The OSI model provices a standardized framework for different networking technologies to interact and work together.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Troubleshooting\"}),\": By breaking down network communication into layers, it's easier to diagnose and fix network issues. Problems can be isolated to specific layers, allowing for quicker resolution.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Interperability\"}),\": It promotes interoperability between products from different manufacturers, ensuring that devices and systems can communicate over a network, regardless of their internal architecture.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Scalability\"}),\": The model helps in designing scalable networks. Each layer can be modified or upgraded independently without affecting other layers.\"]}),\"\\n\"]}),\"\\n\",i(l.h2,{id:\"tcpip-model\",children:[n(l.a,{className:\"anchor\",href:\"#tcpip-model\",children:n(l.span,{className:\"icon icon-link\"})}),\"TCP/IP Model\"]}),\"\\n\",i(l.p,{children:[\"The \",n(l.code,{children:\"TCP/IP Model\"}),\" is a conceptual framework that standardizes the way data is transmitted and received over the internet. It defines how data should be packetized, addressed, transmitted, routed, and received at the destination. The TCP/IP model is the foundation of modern networking and the internet.\"]}),\"\\n\",i(l.h3,{id:\"layers-of-the-tcpip-model\",children:[n(l.a,{className:\"anchor\",href:\"#layers-of-the-tcpip-model\",children:n(l.span,{className:\"icon icon-link\"})}),\"Layers of the TCP/IP Model:\"]}),\"\\n\",i(l.h4,{id:\"1-network-interface-link-layer\",children:[n(l.a,{className:\"anchor\",href:\"#1-network-interface-link-layer\",children:n(l.span,{className:\"icon icon-link\"})}),\"1. Network Interface (Link) Layer:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Equivalent to OSI Layers\"}),\": Combines the OSI \",n(l.code,{children:\"Physical\"}),\" and \",n(l.code,{children:\"Data Link\"}),\" layers.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Function\"}),\": Handles the physical transmission of data over the network medium. It deals with how data is sent as frames between devices on the same network and how hardware addresses are used to identify devices on the local network.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Protocols\"}),\": Ethernet, Wi-Fi, ARP, etc.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Key Tasks\"}),\":\",\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Frame creation and transmission over local network.\"}),\"\\n\",n(l.li,{children:\"Error detection at the physical level.\"}),\"\\n\",n(l.li,{children:\"Mapping IP addresses to MAC addresses using ARP.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"2-internet-layer\",children:[n(l.a,{className:\"anchor\",href:\"#2-internet-layer\",children:n(l.span,{className:\"icon icon-link\"})}),\"2. Internet Layer:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Equivalent to OSI Layer\"}),\": Network Layer.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Function\"}),\": Responsible for routing data packets across different networks. The internet layer ensures that data is transmitted across network boundaries and handles logical addressing (IP addresses).\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Protocols\"}),\": IP, ICMP (Internet Control Message Protocols), ARP (Address Resolution Protocol), IGMP (Internet Group Managemsnt Protocol).\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Key Tasks\"}),\":\",\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Logical addressing (assigning IP address).\"}),\"\\n\",n(l.li,{children:\"Routing of packets across multiple network using routers.\"}),\"\\n\",n(l.li,{children:\"Fragmentation and reassembly of packets.\"}),\"\\n\",n(l.li,{children:\"Error reporting (e.g. using ICMP).\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"3-transport-layer\",children:[n(l.a,{className:\"anchor\",href:\"#3-transport-layer\",children:n(l.span,{className:\"icon icon-link\"})}),\"3. Transport Layer:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Equivalent to OSI Layer\"}),\": Transport Layer.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Function\"}),\": Proides reliable or unreliable delivery of data between devices. It ensures end-to-end communication and manages data flow, error detection, and correction. There are two primary protocols used:\",\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"TCP (Transmission Control Protocol)\"}),\": Ensures reliable, connection-oriented communication with features like error checking, data acknowledgment, and reteansmission of lost packets.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"UPD (User Datagram Protocol)\"}),\": Provides fast, connectionless communication but does not guarantee reliable delivery or data integrity. It's used for time-sensitive application where speed is more critical than reliability.\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Protocals\"}),\": TCP, UDP.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Key Tasks\"}),\":\",\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Establishing and terminating connections.\"}),\"\\n\",n(l.li,{children:\"Error dectection and correction (in TCP).\"}),\"\\n\",n(l.li,{children:\"Flow control (in TCP).\"}),\"\\n\",n(l.li,{children:\"Multiplexing of data from multiple applications.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h4,{id:\"4-application-layer\",children:[n(l.a,{className:\"anchor\",href:\"#4-application-layer\",children:n(l.span,{className:\"icon icon-link\"})}),\"4. Application Layer:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Equivalent to OSI Layer\"}),\": Combines the OSI \",n(l.code,{children:\"Application\"}),\", \",n(l.code,{children:\"Presentation\"}),\", and \",n(l.code,{children:\"Session\"}),\" layers.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Function\"}),\": Handles high-level protocols and services that allow user applications to communicate over the network. This layer provides the interface between network services and end-user applications. It is reponsible for formatting data, managing sessions, and enabling the proper delivery of services like web browsing, email and file transfer.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Protocols\"}),\": HTTP, FTP, SMTP, DNS, SNMP, SSH, etc.\"]}),\"\\n\",i(l.li,{children:[n(l.strong,{children:\"Key Tasks\"}),\":\",\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Providing user-fasing network services (e.g. email, file transfer, web browsing)\"}),\"\\n\",n(l.li,{children:\"Handling data formatting, encryption, and decryption.\"}),\"\\n\",n(l.li,{children:\"Managing application-layer connection (e.g. managing multiple HTTP connections).\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h3,{id:\"key-difference-between-osi-model-and-tcpip-model\",children:[n(l.a,{className:\"anchor\",href:\"#key-difference-between-osi-model-and-tcpip-model\",children:n(l.span,{className:\"icon icon-link\"})}),\"Key Difference Between OSI Model and TCP/IP Model\"]}),\"\\n\",i(l.ol,{children:[\"\\n\",n(l.li,{children:\"OSI Model has 7 layer, and TCP/IP Model has only 4.\"}),\"\\n\",n(l.li,{children:\"OSI Model is designed as a theoretical framework, and TCP/IP Model is developed based on practical implementation.\"}),\"\\n\",n(l.li,{children:\"OSI Model doesn't specify protocols at each layer, and TCP/IP Model does.\"}),\"\\n\",n(l.li,{children:\"OSI Model uses a top-down approach, which starting with the higher level to ensure user's applications work before worrying about lower-level protocols. TCP/IP Model uses a bottom-up approach, starting with the network and moving up to ensure data can be transferred efficiently before handling user applications.\"}),\"\\n\",n(l.li,{children:\"Layers are more independent in OSI Model compare to TCP/IP Model.\"}),\"\\n\"]})]})}return{default:function(e={}){const{wrapper:i}=e.components||{};return i?n(i,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/computer-network-1"},{"type":"Post","slug":"cs50","title":"[CS50] CS50 導讀 & 推薦 Part.1","description":"CS50 是一堂由美國哈佛大學開設的計算機概論課程。但究竟為什麼他被世人如此的推崇呢？我在親身上完課程之後也深陷他的魅力當中，那就讓我們來一探究竟吧！","tags":["CS50","note"],"body":"const{Fragment:n,jsx:e,jsxs:c}=arguments[0];function _createMdxContent(r){const a={a:\"a\",br:\"br\",h2:\"h2\",h3:\"h3\",p:\"p\",span:\"span\",strong:\"strong\",...r.components};return c(n,{children:[c(a.h2,{id:\"什麼是-cs50\",children:[e(a.a,{className:\"anchor\",href:\"#什麼是-cs50\",children:e(a.span,{className:\"icon icon-link\"})}),\"什麼是 CS50\"]}),\"\\n\",e(a.p,{children:\"CS50 是一堂 David J. Malen 在美國哈佛大學開設的程式基礎課程。主要的目的是利用循序漸進的方式幫助沒有程式概念的人建立程式化思考，以及培養學生用程式解決問題的能力！\"}),\"\\n\",c(a.h2,{id:\"導讀-cs50\",children:[e(a.a,{className:\"anchor\",href:\"#導讀-cs50\",children:e(a.span,{className:\"icon icon-link\"})}),\"導讀 CS50\"]}),\"\\n\",e(a.p,{children:\"CS50 是一個 11 週的課程！每一週都有自己的主題，利用一個一個的主題帶領大家探索程式的領域。\"}),\"\\n\",c(a.h3,{id:\"week-0---scratch\",children:[e(a.a,{className:\"anchor\",href:\"#week-0---scratch\",children:e(a.span,{className:\"icon icon-link\"})}),\"Week 0 - Scratch\"]}),\"\\n\",c(a.p,{children:[\"這一週的課程 David 帶領大家從二進位制開始理解電腦的運作方式，他利用道具以及同學上台示範讓我們可以在電腦螢幕前跟著一起思考，進而快速學會這個電腦世界的重要基本觀念。\",e(a.br,{}),\"\\n\",\"在利用生動的案例解釋二進制之後，來到了 Scratch，David 利用這個它類似拼圖且不需要注意程式語法的特性，帶大家建立像 \",e(a.strong,{children:\"if/else\"}),\"、\",e(a.strong,{children:\"Loop\"}),\"、\",e(a.strong,{children:\"variable\"}),\" 等等在後續寫程式時非常常用到的觀念！\"]}),\"\\n\",c(a.h3,{id:\"week-1---c\",children:[e(a.a,{className:\"anchor\",href:\"#week-1---c\",children:e(a.span,{className:\"icon icon-link\"})}),\"Week 1 - C\"]}),\"\\n\",c(a.p,{children:[\"這一週介紹了本堂課的第一個程式語言 - C。David 會從 \",e(a.strong,{children:'\"Hello, world\"'}),\" 開始教大家如何寫程式！\"]})]})}return{default:function(n={}){const{wrapper:c}=n.components||{};return c?e(c,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/cs50"},{"type":"Post","slug":"end-to-end-introduction","title":"[QA]Day.2 什麼是 End-to-End Test ","description":"在現在所有產品都變得越來越龐大的情況下，很容易會出現更改一個邏輯之後不小心影響到其他邏輯的狀況，此時 e2e test 因為會模仿使用者的使用行為所以可以作為最後一道防線，防止產品上線之後才出現錯誤。","publishedAt":"2022-08-11T00:00:00.000Z","tags":["QA","note","e2e"],"body":"const{Fragment:n,jsx:e,jsxs:t}=arguments[0];function _createMdxContent(i){const c={a:\"a\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",span:\"span\",strong:\"strong\",ul:\"ul\",...i.components};return t(n,{children:[e(c.p,{children:\"End-to-End test 是也可以被寫成 e2e test，相對於 unit test 或是 integration test 者種測試每一個邏輯的測試， e2e test 他是以模擬使用者的使用流程來測試整個產品在流程中的所有表面是否出現任何和我們預想的不一樣的狀況出現，而且如果在流程中有使用到第三方的 library 或是有打 api 都不能使用假資料，而是必須要實際去執行，這樣才能確保整個程式測試出來的結果是正確的！\"}),\"\\n\",e(c.p,{children:\"例如今天我們開了一間飲料自動販賣機，裡面其中一個品項是 30 塊錢的珍珠奶茶。此時 e2e test 就會模擬使用者拿 30 塊錢投入這台自動販賣機並且選擇珍珠奶茶之後就會期望可以得到一杯珍珠奶茶，之後當我們得到這杯飲料的時候如果他是珍珠奶茶代表可以測試「通過」，如果得到其他東西或是根本沒有得到就是測試「不通過」。\"}),\"\\n\",e(c.p,{children:\"在現在所有產品都變得越來越龐大的情況下，很容易會出現更改一個邏輯之後不小心影響到其他邏輯的狀況，此時 e2e test 因為會模仿使用者的使用行為所以可以作為最後一道防線，防止產品上線之後才出現錯誤。\"}),\"\\n\",t(c.h2,{id:\"end-to-end-test-的優缺點\",children:[e(c.a,{className:\"anchor\",href:\"#end-to-end-test-的優缺點\",children:e(c.span,{className:\"icon icon-link\"})}),\"End-to-End Test 的優缺點\"]}),\"\\n\",e(c.p,{children:\"這樣看起來好像 e2e test 真的很好，不只測試範圍大，而且結果又真實，加上還可以幫忙測試 api 有沒有問題，那就只需要 e2e 就好了啊！好像就不需要其他測試了吧！但其實不是這樣的，其實 e2e test 也是有一些沒那麼好的地方的，下面我幫大家整理了一些 e2e test 的優缺點：\"}),\"\\n\",t(c.h3,{id:\"優點\",children:[e(c.a,{className:\"anchor\",href:\"#優點\",children:e(c.span,{className:\"icon icon-link\"})}),\"優點\"]}),\"\\n\",t(c.ul,{children:[\"\\n\",e(c.li,{children:\"每一個測試的涵蓋範圍都相對廣\"}),\"\\n\",e(c.li,{children:\"測試結果和使用者真實使用結果相同\"}),\"\\n\",e(c.li,{children:\"如果是 api 或是 library 出問題也可以測試的出來\"}),\"\\n\"]}),\"\\n\",t(c.h3,{id:\"缺點\",children:[e(c.a,{className:\"anchor\",href:\"#缺點\",children:e(c.span,{className:\"icon icon-link\"})}),\"缺點\"]}),\"\\n\",t(c.ul,{children:[\"\\n\",e(c.li,{children:\"撰寫起來複雜且花時間：因為每個測試都必須要涵蓋到一整個使用流程，所以寫起來一定是比其他種測試還又複雜且要花更多時間，也因為這樣，所以會需要更頻繁地隨著程式碼的更新而更新測試。\"}),\"\\n\",e(c.li,{children:\"每次在跑都需要相對長的時間：因為模仿了使用者流程，所以就必須要從最一開始來做，例如有 500 個測試在跑的時候就會需要打開 500 次瀏覽器並且從頭 login 500 次。\"}),\"\\n\",e(c.li,{children:\"不容易找到出問題的地方：同樣是因為一次就是測試一整個流程，所以只會知道結果是錯的，而不會知道錯誤出現在哪一個步驟。舉上面自動販賣機的例子，你只會知道自己拿到的不是珍珠奶茶，但到底是因為他在點單的時候錯誤了，還是在製作的時候錯誤了，甚至是在輸送的過程中出錯都有可能。\"}),\"\\n\"]}),\"\\n\",t(c.h2,{id:\"end-to-end-test-的覆蓋範圍\",children:[e(c.a,{className:\"anchor\",href:\"#end-to-end-test-的覆蓋範圍\",children:e(c.span,{className:\"icon icon-link\"})}),\"End-to-end Test 的覆蓋範圍\"]}),\"\\n\",t(c.p,{children:[\"我們都希望自己的程式可以達到 100% 的測試覆蓋率，這樣就能確保自己的 code 萬無一失；但現實往往是殘酷的，通常不會有那麼多的時間可以讓我們寫這麼多測試。因此我們可以從眾多的功能中選出「\",e(c.strong,{children:\"重要的功能\"}),\"」以及「\",e(c.strong,{children:\"需要穩定的功能\"}),\"」這兩類來優先撰寫測試。\"]}),\"\\n\",e(c.p,{children:\"繼續沿用我們上面自動販賣機的例子，重要的功能就會是收到正確的錢才會開始做飲料。想想如果我們不小心修改了其中一個邏輯導致不管投多少錢進去，自動販賣機都會做一杯 30 塊錢的珍珠奶茶給你，那這樣老闆不就虧大了。所以這種功能就會需要 e2e test 來進行保護讓她不會發生錯誤。\"}),\"\\n\",e(c.p,{children:\"那比較不需要進行保護的例子就可能是飲料的排序，其實對使用者來說，珍珠奶茶在左邊或是檸檬紅茶在左邊是可能只會稍微影響到他們的使用者體驗，但對於使用者以及廠商的利益而言，那個影響是很小的。所以這種在我們寫測試的時候就可以把優先順序放的比較後面一些。\"}),\"\\n\",t(c.h2,{id:\"結論\",children:[e(c.a,{className:\"anchor\",href:\"#結論\",children:e(c.span,{className:\"icon icon-link\"})}),\"結論\"]}),\"\\n\",e(c.p,{children:\"End-to-End test 可以算是我們 code 在給使用者之前的最後一道防線，也是最容易可以被上司看到的一種測試方式（可以直接讓他們按到瀏覽器在跑的狀況），所以他是一個蠻好開始測試的地方。之後會繼續利用框架的方式來介紹 end-to-end test，就讓我們繼續看下去～\"})]})}return{default:function(n={}){const{wrapper:t}=n.components||{};return t?e(t,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/end-to-end-introduction"},{"type":"Post","slug":"graph","title":"[Algorithm] Day.9 Graph","description":"終於來到了資料結構的最後一個章節 Graph，也就是圖，但因為圖實在有點過於博大精深，所以今天就先介紹一些專有名詞跟他的表示方式","publishedAt":"2023-03-27T00:00:00.000Z","tags":["algorithm","note"],"body":"const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(c){const i={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",ol:\"ol\",p:\"p\",span:\"span\",strong:\"strong\",...c.components},{Image:l}=i;return l||function(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),r(n,{children:[e(i.p,{children:\"終於來到了資料結構的最後一個章節 Graph，也就是圖，但因為圖實在有點過於博大精深，所以今天就先介紹一些專有名詞跟他的表示方式\"}),\"\\n\",r(i.h2,{id:\"定義\",children:[e(i.a,{className:\"anchor\",href:\"#定義\",children:e(i.span,{className:\"icon icon-link\"})}),\"定義\"]}),\"\\n\",r(i.p,{children:[\"一個 graph G 裡面會包含兩個集合 V 和 E，其中 V 是一個有限且不為空白的頂點 vertices (也就是 nodes，我們在圖裡面都稱為 vertices) 的集合；而 E 就是成對的 vertices 的集合，我們把這些對子稱為邊 (Edge)；所以我們就會把這張圖 G 寫成 \",e(i.code,{children:\"G = (V,E)\"})]}),\"\\n\",r(i.p,{children:[\"而圖依據他有沒有指向性又可以分為 \",e(i.strong,{children:\"無向圖 (undirect graph)\"}),\" 和 \",e(i.strong,{children:\"有向圖 (direct graph)\"}),\"，其中在 undirect graph 裡 (u,v) 和 (v,u) 因為沒有方向性所以是相同的，但如果是 direct graph，(u,v) 指的就是從 u 到 v 的邊，而 (v,u) 則相反，因此這兩個是表示不同的邊。\"]}),\"\\n\",r(i.p,{children:[\"在表示圖的時候，一般講到 \",e(i.code,{children:\"graph\"}),\" 都會默認為是 undirect graph，若要表示 direct graph 則會使用 \",e(i.code,{children:\"digraph\"}),\" 這個詞\"]}),\"\\n\",e(i.p,{children:\"在下圖中我們就可以看到 G1 和 G2 是 undirect graph 而 G3 則是 direct graph\"}),\"\\n\",e(l,{src:\"/blog/graph/graph.png\",alt:\"graph\"}),\"\\n\",e(i.p,{children:\"這邊可以發現 G2 其實就是一棵樹，因為樹就是一種圖的特例\"}),\"\\n\",r(i.h3,{id:\"限制\",children:[e(i.a,{className:\"anchor\",href:\"#限制\",children:e(i.span,{className:\"icon icon-link\"})}),\"限制\"]}),\"\\n\",e(i.p,{children:\"對於圖我們會有一些限制：\"}),\"\\n\",r(i.ol,{children:[\"\\n\",e(i.li,{children:\"一個圖不能有邊是連回到自己的（不能 self-loop），如下圖(a)中點 1 中的邊\"}),\"\\n\",e(i.li,{children:\"兩點中間不能有重複的邊，如下圖(b)中點 2,3,4 中間都有重複的邊\"}),\"\\n\"]}),\"\\n\",e(l,{src:\"/blog/graph/restriction.png\",alt:\"restrictions\"}),\"\\n\",r(i.p,{children:[\"而基於以上的限制，我們就可以推算出每張圖邊的最大數量，如果是 undirect graph，因為 (u,v) 等於 (v,u)，所以最多只會有 \",e(i.code,{children:\"n(n-1)/2\"}),\" 個邊，而 direct graph 則因為兩點之間可以存在兩條指向不同的邊，所以最多可以有 \",e(i.code,{children:\"n(n-1)\"}),\" 條邊。如果一個無向圖有最大數量 n(n-1)/2 條邊，我們就稱它為 \",e(i.code,{children:\"complete graph\"})]}),\"\\n\",r(i.h2,{id:\"圖中的專有名詞\",children:[e(i.a,{className:\"anchor\",href:\"#圖中的專有名詞\",children:e(i.span,{className:\"icon icon-link\"})}),\"圖中的專有名詞\"]}),\"\\n\",r(i.ol,{children:[\"\\n\",r(i.li,{children:[e(i.strong,{children:\"Path\"}),\"：連接兩個很遠點中間的路徑\",\"\\n\",r(i.ol,{children:[\"\\n\",r(i.li,{children:[e(i.strong,{children:\"Simple Path\"}),\"：Path 中沒有重複經過同一條邊\"]}),\"\\n\",r(i.li,{children:[e(i.strong,{children:\"Cycle\"}),\"：Path 的頭尾是同一個 vertix\"]}),\"\\n\",r(i.li,{children:[e(i.strong,{children:\"Length\"}),\"：一個 path 總共經過多少 vertices\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",r(i.li,{children:[e(i.strong,{children:\"Degree\"}),\"：一個 vertix 有多少個邊\",\"\\n\",r(i.ol,{children:[\"\\n\",r(i.li,{children:[e(i.strong,{children:\"in-degree\"}),\"：在 direct graph 中，一個頂點以他為結束點的邊數量\"]}),\"\\n\",r(i.li,{children:[e(i.strong,{children:\"out-degree\"}),\"：在 direct graph 中，一個頂點以他為起始點的邊數量\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",r(i.li,{children:[e(i.strong,{children:\"Subgraph\"}),\"：Graph 的某一部分\",\"\\n\",e(l,{src:\"/blog/graph/subgraph.png\",alt:\"subgraph\"}),\"\\n\"]}),\"\\n\",r(i.li,{children:[e(i.strong,{children:\"Connected\"}),\"：如果兩個 vertices 中間有一條 path 就代表這兩點是 connected 的\"]}),\"\\n\",r(i.li,{children:[e(i.strong,{children:\"Connected Component\"}),\"：也可以直接叫 \",e(i.strong,{children:\"Component\"}),\"，指的是當今天一個 Graph 的 subgraph 覆蓋到這個 graph 的最大範圍就稱為 Component\",\"\\n\",e(l,{src:\"/blog/graph/connected-component.png\",alt:\"component\"}),\"\\n\",\"像上圖兩個都是有包含到 G4 的最大範圍，所以就可以稱為 G4 的 \",e(i.strong,{children:\"connected component\"}),\"，但如果今天只有包含\\n\",e(i.code,{children:\"1、2、3\"}),\" 三個點的話就因為沒有包含最多點所以不是 component\"]}),\"\\n\",r(i.li,{children:[e(i.strong,{children:\"Strongly Connected\"}),\"：在 digraph 中，如果兩個點中間有互相連通的邊，就稱為 strongly connected，例如在 \",e(i.code,{children:\"1、2\"}),\" 中間有 (1,2) 和 (2,1) 兩個邊就稱 1、2 為 strongly connected\"]}),\"\\n\"]}),\"\\n\",r(i.h2,{id:\"圖的表示方式\",children:[e(i.a,{className:\"anchor\",href:\"#圖的表示方式\",children:e(i.span,{className:\"icon icon-link\"})}),\"圖的表示方式\"]}),\"\\n\",r(i.h3,{id:\"1-鄰接矩陣-adjacency-matrix\",children:[e(i.a,{className:\"anchor\",href:\"#1-鄰接矩陣-adjacency-matrix\",children:e(i.span,{className:\"icon icon-link\"})}),\"1. 鄰接矩陣 (Adjacency Matrix)\"]}),\"\\n\",e(l,{src:\"/blog/graph/adjacency-matrix.png\",alt:\"Adjacency Matrix\"}),\"\\n\",r(i.p,{children:[\"如果我們有一個由 n 個 vertices 組成的圖，他的鄰接矩陣就會是一個 \",e(i.strong,{children:\"n 列 * n 行\"}),\" 的矩陣，矩陣中只會有 \",e(i.strong,{children:\"0\"}),\" 和 \",e(i.strong,{children:\"1\"}),\" 兩種值。若值為 0 則代表兩點之間沒有邊；1 則代表兩點之間有邊\"]}),\"\\n\",r(i.p,{children:[\"這個矩陣會因為不能存在 self-loop 的原因所以主對角線上的值都會是 \",e(i.strong,{children:\"0\"}),\"。如果是無向圖的話會因為邊沒有方向性，所以矩陣一定會是對稱矩陣\"]}),\"\\n\",e(i.p,{children:\"最後如果要算每一個 vertix 的 degree，就只需要把他那一行/列的數值相加就可以求得\"}),\"\\n\",r(i.h3,{id:\"2-鄰接串列-adjacency-list\",children:[e(i.a,{className:\"anchor\",href:\"#2-鄰接串列-adjacency-list\",children:e(i.span,{className:\"icon icon-link\"})}),\"2. 鄰接串列 (Adjacency List)\"]}),\"\\n\",e(l,{src:\"/blog/graph/adjacency-list.png\",alt:\"Adjacency List\"}),\"\\n\",e(i.p,{children:\"這是利用串列的方式把相鄰的 vertices 連起來，在 head node 的 list 中儲存可以和 head\\nnode 連接的 vertices，他的優點是可以節省儲存空間\"}),\"\\n\",r(i.h4,{id:\"無向圖\",children:[e(i.a,{className:\"anchor\",href:\"#無向圖\",children:e(i.span,{className:\"icon icon-link\"})}),\"無向圖\"]}),\"\\n\",r(i.p,{children:[\"如果今天是一個有著 n 個 vertices 和 e 個 edge 的無向圖，那我們可以把它存在一個長度為 \",e(i.code,{children:\"n+2e+1\"}),\" 的陣列當中\"]}),\"\\n\",e(l,{src:\"/blog/graph/sequential-representation.png\",alt:\"Sequential Representation\"}),\"\\n\",r(i.p,{children:[\"我們稱這個陣列為 a，在 a 中 index 1 到 9 代表他總共有 9 個 vertices，而 a[1] 為 \",e(i.strong,{children:\"10\"}),\"，代表我們要\",e(i.strong,{children:\"從 index 10 開始看 index 1 所連接的 vertices\"}),\"；而 a[2] 為 \",e(i.strong,{children:\"12\"}),\"，所以代表要從 index 12 開始看 index 2 所連接的點。從上面兩個條件可以看出連接 index 1 的 vertices 就會是 \",e(i.strong,{children:\"a[10]\"}),\" 和 \",e(i.strong,{children:\"a[11]\"}),\"，也就是 3 和 2\"]}),\"\\n\",r(i.p,{children:[\"之後讓我們看到 index 9 的地方，\",e(i.code,{children:\"a[9] = 24\"}),\"，但明明只有 a 的長度只有 \",e(i.strong,{children:\"23\"}),\"，當今天 \",e(i.code,{children:\"a[n] > a.size()\"}),\" 的時候，就代表他是圖中最後一個 vertices，從這一格之後開始的值都是指連接的點而不是告訴大家從哪裡開始看\"]}),\"\\n\",e(i.p,{children:\"這個 Sequential Representation 的優點就是他的標示非常的簡單好懂，但缺點就是難以擴充\"}),\"\\n\",r(i.h4,{id:\"有向圖\",children:[e(i.a,{className:\"anchor\",href:\"#有向圖\",children:e(i.span,{className:\"icon icon-link\"})}),\"有向圖\"]}),\"\\n\",e(i.p,{children:\"有向圖就相對比較麻煩，因為有方向性的問題，所以除了 adjacency list 以外會需要多存一個 inverse adjacency list，目的是為了要計算每個點的 in-degree\"}),\"\\n\",e(l,{src:\"/blog/graph/adjacency-list-digraph.png\",alt:\"Adjacency List Digraph\"}),\"\\n\",r(i.p,{children:[\"上圖中的第一個 list 存的就是 G3 的 \",e(i.strong,{children:\"out-degree\"}),\"，而下面的 inverse list 存的就是 G3 的 \",e(i.strong,{children:\"in-degree\"})]}),\"\\n\",r(i.p,{children:[\"除了使用 inverse list 以外，還有另外一個方式是把原本的 adjacency list 進行擴充，變成一個 4 欄的 list，分別為 \",e(i.strong,{children:\"tail\"}),\"、\",e(i.strong,{children:\"head\"}),\"、\",e(i.strong,{children:\"column link for head\"}),\"、\",e(i.strong,{children:\"column list for tail\"})]}),\"\\n\",e(l,{src:\"/blog/graph/orthorgonal-list.png\",alt:\"orthorgonal list\"}),\"\\n\",r(i.h3,{id:\"3-鄰接多串列-adjacency-multilist\",children:[e(i.a,{className:\"anchor\",href:\"#3-鄰接多串列-adjacency-multilist\",children:e(i.span,{className:\"icon icon-link\"})}),\"3. 鄰接多串列 (Adjacency Multilist)\"]}),\"\\n\",e(l,{src:\"/blog/graph/adjacency-multilist.png\",alt:\"Adjacency Multilist\"}),\"\\n\",r(i.p,{children:[\"最後就是 Adjacency Multilist 了！上述兩個表示方式都是針對\",e(i.strong,{children:\"頂點\"}),\"進行處理，這個方式則是針對\",e(i.strong,{children:\"邊\"}),\"進行處理\"]}),\"\\n\",e(i.p,{children:\"如上圖，我們可以看出 G1 總共有 6 個邊，因此有 N1 到 N6 總共 6 個 list，在這 6 個 list 中個會存五個值，如下\"}),\"\\n\",e(l,{src:\"/blog/graph/multilist-items.png\",alt:\"Adjacency Multilist Items\"}),\"\\n\",e(i.p,{children:\"利用這個多串列，我們可以看出從第一個邊是 (1,2)，另一個連接到 1 的邊是 N2，跟另一個連接到 2 的邊是 N4 這三個訊息。所以看到 N2 可以知道還有 (1,3)，之後一樣從後面 N3 的後面兩格看出 1 和 3 還有哪些邊會連接。\"}),\"\\n\",e(i.p,{children:\"之後看到 N3 發現他的第四格 Link to V1 是 0，這就代表已經列完所有和 1 這個 vertix 有關連的邊；以此類推就可以從這個 multilist 中得知整個圖的長相了！\"})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/graph"},{"type":"Post","slug":"leetcode-climbing-stairs","title":"[Leetcode] 70. Climbing Stairs","description":"You are climbing a staircase. It takes n steps to reach the top.","publishedAt":"2023-06-14T00:00:00.000Z","tags":["Leetcode","algorithm","recursion","easy"],"body":"const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(c){const a={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",ul:\"ul\",...c.components};return i(n,{children:[i(a.h2,{id:\"題目敘述\",children:[e(a.a,{className:\"anchor\",href:\"#題目敘述\",children:e(a.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",i(a.p,{children:[\"You are climbing a staircase. It takes \",e(a.code,{children:\"n\"}),\" steps to reach the top.\"]}),\"\\n\",i(a.p,{children:[\"Each time you can either climb \",e(a.code,{children:\"1\"}),\" or \",e(a.code,{children:\"2\"}),\" steps. In how many distinct ways can you climb to the top?\"]}),\"\\n\",i(a.h3,{id:\"example-1\",children:[e(a.a,{className:\"anchor\",href:\"#example-1\",children:e(a.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(a.pre,{children:e(a.code,{children:\"Input: n = 2\\nOutput: 2\\nExplanation: There are two ways to climb to the top.\\n1. 1 step + 1 step\\n2. 2 steps\\n\"})}),\"\\n\",i(a.h3,{id:\"example-2\",children:[e(a.a,{className:\"anchor\",href:\"#example-2\",children:e(a.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(a.pre,{children:e(a.code,{children:\"Input: n = 3\\nOutput: 3\\nExplanation: There are three ways to climb to the top.\\n1. 1 step + 1 step + 1 step\\n2. 1 step + 2 steps\\n3. 2 steps + 1 step\\n\"})}),\"\\n\",i(a.h3,{id:\"限制\",children:[e(a.a,{className:\"anchor\",href:\"#限制\",children:e(a.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",i(a.ul,{children:[\"\\n\",e(a.li,{children:e(a.code,{children:\"1 <= n <= 45\"})}),\"\\n\"]}),\"\\n\",i(a.h2,{id:\"解題思路\",children:[e(a.a,{className:\"anchor\",href:\"#解題思路\",children:e(a.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",e(a.p,{children:\"這題可以把它想像成是一個 binary tree，而他最上面的 root 就是題目給定的數字 n，而每個 node 會有兩個 children 就是 n - 1 和 n - 2。\"}),\"\\n\",e(a.p,{children:\"這樣我們就只要計算這棵樹總共有幾個 leaf 就會是我們的答案了！\"}),\"\\n\",e(a.p,{children:\"把圖畫出來之後會發現其實 leaf 的 parent 只有兩種也就是 1 和 2，而如果 parent 為 1 的話答案是 1，如果是 2 的話答案是 2。\"}),\"\\n\",e(a.p,{children:\"之後我們就可以用遞迴的方式找到我們要的答案\"}),\"\\n\",i(a.h2,{id:\"解題步驟\",children:[e(a.a,{className:\"anchor\",href:\"#解題步驟\",children:e(a.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",i(a.h3,{id:\"1-recursion\",children:[e(a.a,{className:\"anchor\",href:\"#1-recursion\",children:e(a.span,{className:\"icon icon-link\"})}),\"1. Recursion\"]}),\"\\n\",i(a.ol,{children:[\"\\n\",e(a.li,{children:\"宣告 base case 也就是 n = 1 的時候 return 1，n = 2 的時候 return 2\"}),\"\\n\",e(a.li,{children:\"recurrence relation 就像是 tree 一樣，一直往他的 children 去找然後把他兩個 children 的 leaf 數量加起來\"}),\"\\n\"]}),\"\\n\",i(a.h3,{id:\"java-解法\",children:[e(a.a,{className:\"anchor\",href:\"#java-解法\",children:e(a.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-java\",children:\"class Solution {\\n    public int climbStairs(int n) {\\n        if (n <= 2 && n >= 0) return n;\\n\\n        return climbStairs(n - 1) + climbStairs(n - 2);\\n    }\\n}\\n\"})}),\"\\n\",i(a.h3,{id:\"complexity\",children:[e(a.a,{className:\"anchor\",href:\"#complexity\",children:e(a.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",i(a.ul,{children:[\"\\n\",e(a.li,{children:\"Time Complexity: O(2^n);\"}),\"\\n\",e(a.li,{children:\"Space Complexity: O(1);\"}),\"\\n\"]}),\"\\n\",i(a.p,{children:[\"這個 recursion 的解答雖然可以找到答案，但我們會發現他的時間複雜度超級無敵差。在 leedcode 上面也會顯示 \",e(a.code,{children:\"Time Limit Exceed\"}),\"，所以就有下面優化後的解法。\"]}),\"\\n\",i(a.h3,{id:\"2-hashmap--recursion\",children:[e(a.a,{className:\"anchor\",href:\"#2-hashmap--recursion\",children:e(a.span,{className:\"icon icon-link\"})}),\"2. HashMap + Recursion\"]}),\"\\n\",i(a.ol,{children:[\"\\n\",e(a.li,{children:\"宣告一個 hashMap，key 是 step 的數量，而 value 就是那個 step 有種方式可以爬到頂\"}),\"\\n\",e(a.li,{children:\"把 1 和 2 放入 hashMap 當中。\"}),\"\\n\",i(a.li,{children:[\"呼叫 recursion function，\",\"\\n\",i(a.ol,{children:[\"\\n\",e(a.li,{children:\"recursion function 的 base case 就是當今天在 hashMap 裡面有這個 step 的時候我們就直接回傳他的 value\"}),\"\\n\",e(a.li,{children:\"recurrence relation 就是當 hashMap 裡沒有的時候，我們就計算這個 step 有幾種組合並放到 hashMap 當中。\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(a.h3,{id:\"java-解法-1\",children:[e(a.a,{className:\"anchor\",href:\"#java-解法-1\",children:e(a.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-java\",children:\"class Solution {\\n    private Map<Integer, Integer> memo;\\n\\n    public Solution() {\\n        this.memo = new HashMap<>();\\n        this.memo.put(1,1);\\n        this.memo.put(2,2);\\n    }\\n\\n    public int climbStairs(int n) {\\n        if (this.memo.containsKey(n)) {\\n            return this.memo.get(n);\\n        }\\n        this.memo.put(n, climbStairs(n - 1) + climbStairs(n - 2));\\n        return this.memo.get(n);\\n    }\\n}\\n\"})}),\"\\n\",i(a.h3,{id:\"complexity-1\",children:[e(a.a,{className:\"anchor\",href:\"#complexity-1\",children:e(a.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",i(a.ul,{children:[\"\\n\",e(a.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",e(a.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-climbing-stairs"},{"type":"Post","slug":"leetcode-clone-graph","title":"[Leetcode] 133. Clone Graph","description":"Given a reference of a node in a connected undirected graph. Return a deep copy (clone) of the graph.","publishedAt":"2023-05-30T00:00:00.000Z","tags":["Leetcode","algorithm","stack","graph"],"body":"const{Fragment:e,jsx:n,jsxs:a}=arguments[0];function _createMdxContent(o){const i={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...o.components},{Image:d}=i;return d||function(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),a(e,{children:[a(i.h2,{id:\"題目敘述\",children:[n(i.a,{className:\"anchor\",href:\"#題目敘述\",children:n(i.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",a(i.p,{children:[\"Given a reference of a node in a \",n(i.strong,{children:\"connected\"}),\" undirected graph.\"]}),\"\\n\",a(i.p,{children:[\"Return a \",n(i.strong,{children:\"deep copy\"}),\" (clone) of the graph.\"]}),\"\\n\",a(i.p,{children:[\"Each node in the graph contains a \",n(i.code,{children:\"value (int)\"}),\" and a list \",n(i.code,{children:\"(List[Node])\"}),\" of its neighbors.\"]}),\"\\n\",n(i.pre,{children:n(i.code,{className:\"language-java\",children:\"class Node {\\n    public int val;\\n    public List<Node> neighbors;\\n}\\n\"})}),\"\\n\",a(i.h3,{id:\"test-case-format\",children:[n(i.a,{className:\"anchor\",href:\"#test-case-format\",children:n(i.span,{className:\"icon icon-link\"})}),\"Test case format:\"]}),\"\\n\",a(i.p,{children:[\"For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with \",n(i.code,{children:\"val == 1\"}),\", the second node with \",n(i.code,{children:\"val == 2\"}),\", and so on. The graph is represented in the test case using an adjacency list.\"]}),\"\\n\",a(i.p,{children:[\"An \",n(i.strong,{children:\"adjacency list\"}),\" is a collection of unordered \",n(i.strong,{children:\"lists\"}),\" used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\"]}),\"\\n\",a(i.p,{children:[\"The given node will always be the first node with \",n(i.code,{children:\"val = 1\"}),\". You must return the copy of the given node as a reference to the cloned graph.\"]}),\"\\n\",a(i.h3,{id:\"example-1\",children:[n(i.a,{className:\"anchor\",href:\"#example-1\",children:n(i.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",n(d,{src:\"/blog/leetcode/clone-graph/example1.png\",alt:\"example1\"}),\"\\n\",\" \",\"\\n\",n(i.pre,{children:n(i.code,{children:\"Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\\nOutput: [[2,4],[1,3],[2,4],[1,3]]\\nExplanation: There are 4 nodes in the graph.\\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\\n\"})}),\"\\n\",a(i.h3,{id:\"example-2\",children:[n(i.a,{className:\"anchor\",href:\"#example-2\",children:n(i.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",n(i.pre,{children:n(i.code,{children:\"Input: adjList = [[]]\\nOutput: [[]]\\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\\n\"})}),\"\\n\",a(i.h3,{id:\"example-3\",children:[n(i.a,{className:\"anchor\",href:\"#example-3\",children:n(i.span,{className:\"icon icon-link\"})}),\"Example 3.\"]}),\"\\n\",n(i.pre,{children:n(i.code,{children:\"Input: adjList = []\\nOutput: []\\nExplanation: This an empty graph, it does not have any nodes.\\n\"})}),\"\\n\",a(i.h3,{id:\"限制\",children:[n(i.a,{className:\"anchor\",href:\"#限制\",children:n(i.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",a(i.ul,{children:[\"\\n\",n(i.li,{children:n(i.code,{children:\"The number of nodes in the graph is in the range [0, 100].\"})}),\"\\n\",n(i.li,{children:n(i.code,{children:\"1 <= Node.val <= 100\"})}),\"\\n\",n(i.li,{children:n(i.code,{children:\"Node.val is unique for each node.\"})}),\"\\n\",n(i.li,{children:n(i.code,{children:\"There are no repeated edges and no self-loops in the graph.\"})}),\"\\n\",n(i.li,{children:n(i.code,{children:\"The Graph is connected and all nodes can be visited starting from the given node.\"})}),\"\\n\"]}),\"\\n\",a(i.h2,{id:\"解題思路\",children:[n(i.a,{className:\"anchor\",href:\"#解題思路\",children:n(i.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",n(i.p,{children:\"因為他的目的是深拷貝一個 graph，所以需要做到的每一個 node 都是新的。另外因為需要知道新的 node 所對照的 node 所以要用一個 hash map 把它存起來。\"}),\"\\n\",a(i.p,{children:[\"另外在複製的時候，我們選擇使用 \",n(i.strong,{children:\"Depth Firth Search\"}),\" 的方式（也就是先一路走到最底的 node，之後在處理同一層的 node）。從第一個點開始進行複製，在複製第一個點的時候，我們就會需要處理他的 neighbor node，此時因為他的 neighbor node 也還沒建立，所以就會利用遞迴的方式依序建立起所以有的 node，並且把他指派為 neighbor，這樣依序建立起 HashMap 裡面缺乏的 node 到最後全部建立完成也就完成 graph 的深拷貝。\"]}),\"\\n\",n(i.p,{children:\"例如： node1 會建立 node2 和 node4（因為 HashMap 裡面沒有）並存到 HashMap 裏面，同時第二 node 會需要 node1 和 node3，而這時因為 HashMap 裡面已經有 node1 所以只需要建立 node3，依此類推直到每個點都建立完畢就會完成整個 graph 的深拷貝。\"}),\"\\n\",a(i.h2,{id:\"解題步驟\",children:[n(i.a,{className:\"anchor\",href:\"#解題步驟\",children:n(i.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",a(i.ol,{children:[\"\\n\",n(i.li,{children:\"宣告 HashMap\"}),\"\\n\",n(i.li,{children:\"複製 head node\"}),\"\\n\",n(i.li,{children:\"因為 head node 不存在 HashMap 當中，所以複製 head node 並存在 HashMap 當中\"}),\"\\n\",n(i.li,{children:\"在創造 head node 的 neighbors 的同時，利用遞迴的方式建立其他的 node。\"}),\"\\n\"]}),\"\\n\",a(i.h2,{id:\"java-解法\",children:[n(i.a,{className:\"anchor\",href:\"#java-解法\",children:n(i.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",n(i.pre,{children:n(i.code,{className:\"language-java\",children:\"class Solution {\\n    private HashMap<Integer, Node> oldToNewMap;\\n\\n    public Node cloneGraph(Node node) {\\n        if (node == null) return node;\\n\\n        // Declare a hashmap that stores the connection between old and new node.\\n        this.oldToNewMap = new HashMap<Integer, Node>();\\n\\n        return this.cloneWithDfs(node);\\n    }\\n\\n    public Node cloneWithDfs(Node node) {\\n        // if the new node is already stored in the hashmap, return the new node\\n        if (this.oldToNewMap.containsKey(node.val)) {\\n            return this.oldToNewMap.get(node.val);\\n        }\\n\\n        // if not created, create a copy of the original node\\n        Node copy = new Node(node.val);\\n        oldToNewMap.put(node.val, copy);\\n\\n        // build the neighbors of the new node\\n        for (Node neighbor: node.neighbors) {\\n            copy.neighbors.add(this.cloneWithDfs(neighbor));\\n        }\\n\\n        return copy;\\n    }\\n}\\n\"})}),\"\\n\",a(i.h3,{id:\"complexity\",children:[n(i.a,{className:\"anchor\",href:\"#complexity\",children:n(i.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",a(i.ul,{children:[\"\\n\",n(i.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",n(i.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]})]})}return{default:function(e={}){const{wrapper:a}=e.components||{};return a?n(a,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/leetcode-clone-graph"},{"type":"Post","slug":"leetcode-find-duplicate-subtrees","title":"[Leetcode] 652. Find Duplicate Subtrees","description":"Given the root of a binary tree, return all duplicate subtrees.","publishedAt":"2023-07-21T00:00:00.000Z","tags":["Leetcode","algorithm","hash table","medium"],"body":"const{Fragment:e,jsx:n,jsxs:r}=arguments[0];function _createMdxContent(i){const t={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...i.components},{Image:l}=t;return l||function(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),r(e,{children:[r(t.h2,{id:\"題目敘述\",children:[n(t.a,{className:\"anchor\",href:\"#題目敘述\",children:n(t.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",r(t.p,{children:[\"Given the \",n(t.code,{children:\"root\"}),\" of a binary tree, return \",n(t.strong,{children:\"all duplicate subtrees\"}),\".\"]}),\"\\n\",r(t.p,{children:[\"For each kind of duplicate subtrees, you only need to return the root node of \",n(t.strong,{children:\"any one\"}),\" of them.\"]}),\"\\n\",r(t.p,{children:[\"Two trees are duplicate if they have the \",n(t.strong,{children:\"same structure\"}),\" with the \",n(t.strong,{children:\"same node values\"}),\".\"]}),\"\\n\",r(t.h3,{id:\"example-1\",children:[n(t.a,{className:\"anchor\",href:\"#example-1\",children:n(t.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",n(l,{src:\"/blog/leetcode/find-duplicate-subtrees/example1.jpeg\",alt:\"example1\",width:240,height:240}),\"\\n\",n(t.pre,{children:n(t.code,{children:\"Input: root = [1,2,3,4,null,2,4,null,null,4]\\nOutput: [[2,4],[4]]\\n\"})}),\"\\n\",r(t.h3,{id:\"example-2\",children:[n(t.a,{className:\"anchor\",href:\"#example-2\",children:n(t.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",n(l,{src:\"/blog/leetcode/find-duplicate-subtrees/example2.jpeg\",alt:\"example2\",width:240,height:240}),\"\\n\",n(t.pre,{children:n(t.code,{children:\"Input: root = [2,1,1]\\nOutput: [[1]]\\n\"})}),\"\\n\",r(t.h3,{id:\"example-3\",children:[n(t.a,{className:\"anchor\",href:\"#example-3\",children:n(t.span,{className:\"icon icon-link\"})}),\"Example 3.\"]}),\"\\n\",n(l,{src:\"/blog/leetcode/find-duplicate-subtrees/example3.jpeg\",alt:\"example3\",width:240,height:240}),\"\\n\",n(t.pre,{children:n(t.code,{children:\"Input: root = [2,2,2,3,null,3,null]\\nOutput: [[2,3],[3]]\\n\"})}),\"\\n\",r(t.h3,{id:\"限制\",children:[n(t.a,{className:\"anchor\",href:\"#限制\",children:n(t.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",r(t.ul,{children:[\"\\n\",n(t.li,{children:n(t.code,{children:\"The number of the nodes in the tree will be in the range [1, 5000]\"})}),\"\\n\",n(t.li,{children:n(t.code,{children:\"-200 <= Node.val <= 200\"})}),\"\\n\"]}),\"\\n\",r(t.h2,{id:\"解題思路\",children:[n(t.a,{className:\"anchor\",href:\"#解題思路\",children:n(t.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",r(t.p,{children:[\"所有這種 find duplicate 的問題其實最重要的都是要思考\",n(t.strong,{children:\"如何紀錄已經出現過的元素\"}),\"。\"]}),\"\\n\",r(t.p,{children:[\"在這題因為要找的是的相同的 \",n(t.strong,{children:\"Subtree\"}),\"，而在一般來說 Tree 只會給一個 root，並沒有辦法快速看出整個 Tree 的全貌，所以我們就要思考如何整個 Tree 都存起來。\"]}),\"\\n\",n(t.p,{children:\"當然我們可以選擇直接把整個 Tree 變成一個 string 來存，以下面這張圖為例：\"}),\"\\n\",n(l,{src:\"/blog/leetcode/find-duplicate-subtrees/example1.jpeg\",alt:\"example1\",width:240,height:240}),\"\\n\",r(t.p,{children:[\"在這邊以 1 為 root，我們把每個 root 的 children 都用括號的形式放在左右兩邊就可以把他存成 \",n(t.code,{children:\"((4)2())1((((4)2())2())3(4))\"}),\" 的形式，但這樣的形式在我們裡用 post order traverse 整顆 tree 的時候每個 subtree 都會最差都可能有 n 個 node，因此會需要花費額外的時間（O(n)）來成這個 String。\"]}),\"\\n\",r(t.p,{children:[\"所以在這邊更好的方式其實是給每一個 subtree 一個屬於他的 id，之後在做 \",n(t.strong,{children:\"post order traverse\"}),\" 的時候，我們把 string 變成 \",n(t.code,{children:\"leftSubTreeId + ',' + node.value + ',' + rightSubTreeId\"}),\"，這樣就只會需要 3 個數字相加所以就可以節省很多的時間。\"]}),\"\\n\",n(t.p,{children:\"另外設立一個 count 的 Hash Map 來存每個 subtree 出現的次數，在出現第 2 次的時候就把他加入到 result，最後回傳 result 就好啦！\"}),\"\\n\",r(t.h2,{id:\"解題步驟\",children:[n(t.a,{className:\"anchor\",href:\"#解題步驟\",children:n(t.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",r(t.ol,{children:[\"\\n\",r(t.li,{children:[\"宣告 tripletIdMap, counts 兩個 Hash Map 和一個 List \",n(t.code,{children:\"result\"})]}),\"\\n\",r(t.li,{children:[\"在 \",n(t.strong,{children:\"traverse\"}),\" 裡面：\",\"\\n\",r(t.ol,{children:[\"\\n\",n(t.li,{children:\"對 node.left 做 traverse 來獲得左 subtree 的 id\"}),\"\\n\",n(t.li,{children:\"對 node.right 做 traverse 來獲得右 subtree 的 id\"}),\"\\n\",r(t.li,{children:[\"把上面兩個 id 和 node.value 組成 string \",n(t.code,{children:\"triplet\"})]}),\"\\n\",r(t.li,{children:[\"如果 triplet 不在 tripletIdMap 裡面的話，就把它存進去並且 id 為 \",n(t.code,{children:\"tiprletIdMap.size() + 1\"})]}),\"\\n\",n(t.li,{children:\"反之則是從 tripletIdMap 裡面拿到 id 之後去 counts 裡面把那個 id 的 count + 1\"}),\"\\n\",r(t.li,{children:[\"如果該 triplet 的 \",n(t.code,{children:\"count == 2\"}),\" 的話就把 node 加到 result 裡面。\"]}),\"\\n\",n(t.li,{children:\"return id 讓遞迴的上層可以拿到 id 並且組成他的 triplet。\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",n(t.li,{children:\"在整個 traverse 結束之後，我們就會得到結果了！\"}),\"\\n\"]}),\"\\n\",r(t.h2,{id:\"java-解法\",children:[n(t.a,{className:\"anchor\",href:\"#java-解法\",children:n(t.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",n(t.pre,{children:n(t.code,{className:\"language-java\",children:'class Solution {\\n    private List<TreeNode> result;\\n    private HashMap<String, Integer> tripletIdMap;\\n    private HashMap<Integer, Integer> counts;\\n\\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\\n        this.result = new ArrayList<>();\\n        this.tripletIdMap = new HashMap<>();\\n        this.counts = new HashMap<>();\\n\\n        traverse(root);\\n\\n        return this.result;\\n    }\\n\\n    private int traverse(TreeNode node) {\\n        if (node == null) return 0;\\n\\n        String triplet = traverse(node.left) + \",\" + node.val + \",\" +  traverse(node.right);\\n\\n        int id = 0;\\n\\n        if (!this.tripletIdMap.containsKey(triplet)) {\\n            id = this.tripletIdMap.size() + 1;\\n            this.tripletIdMap.put(triplet, id);\\n            this.counts.put(id, 1);\\n        } else {\\n            id = this.tripletIdMap.get(triplet);\\n            this.counts.put(id, this.counts.get(id) + 1);\\n        }\\n\\n        if (this.counts.get(id) == 2) this.result.add(node);\\n\\n        return id;\\n    }\\n}\\n'})}),\"\\n\",r(t.h3,{id:\"complexity\",children:[n(t.a,{className:\"anchor\",href:\"#complexity\",children:n(t.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",r(t.ul,{children:[\"\\n\",n(t.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",n(t.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]})]})}return{default:function(e={}){const{wrapper:r}=e.components||{};return r?n(r,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/leetcode-find-duplicate-subtrees"},{"type":"Post","slug":"leetcode-find-first-and-last-position-of-element-in-sorted-array","title":"[Leetcode] 34. Find First and Last Position of Element in Sorted Array","description":"Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.","publishedAt":"2023-10-09T00:00:00.000Z","tags":["Leetcode","algorithm","array","binary search","medium","English"],"body":"const{Fragment:n,jsx:e,jsxs:a}=arguments[0];function _createMdxContent(T){const t={a:\"a\",br:\"br\",code:\"code\",defs:\"defs\",g:\"g\",h2:\"h2\",h3:\"h3\",li:\"li\",\"mjx-container\":\"mjx-container\",p:\"p\",path:\"path\",pre:\"pre\",span:\"span\",style:\"style\",svg:\"svg\",ul:\"ul\",use:\"use\",...T.components},Q=t[\"mjx-container\"];return a(n,{children:[a(t.h2,{id:\"description\",children:[e(t.a,{className:\"anchor\",href:\"#description\",children:e(t.span,{className:\"icon icon-link\"})}),\"Description\"]}),\"\\n\",a(t.p,{children:[\"Given an array of integers \",e(t.code,{children:\"nums\"}),\" sorted in non-decreasing order, find the starting and ending position of a given \",e(t.code,{children:\"target\"}),\" value.\"]}),\"\\n\",a(t.p,{children:[\"If \",e(t.code,{children:\"target\"}),\" is not found in the array, return \",e(t.code,{children:\"[-1, -1]\"}),\".\"]}),\"\\n\",a(t.p,{children:[\"You must write an algorithm with \",e(t.code,{children:\"O(log n)\"}),\" runtime complexity.\"]}),\"\\n\",a(t.h3,{id:\"example-1\",children:[e(t.a,{className:\"anchor\",href:\"#example-1\",children:e(t.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(t.pre,{children:e(t.code,{children:\"Input: nums = [5,7,7,8,8,10], target = 8\\nOutput: [3,4]\\n\"})}),\"\\n\",a(t.h3,{id:\"example-2\",children:[e(t.a,{className:\"anchor\",href:\"#example-2\",children:e(t.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(t.pre,{children:e(t.code,{children:\"Input: nums = [5,7,7,8,8,10], target = 6\\nOutput: [-1,-1]\\n\\n\"})}),\"\\n\",a(t.h3,{id:\"example-3\",children:[e(t.a,{className:\"anchor\",href:\"#example-3\",children:e(t.span,{className:\"icon icon-link\"})}),\"Example 3.\"]}),\"\\n\",e(t.pre,{children:e(t.code,{children:\"Input: nums = [], target = 0\\nOutput: [-1,-1]\\n\\n\"})}),\"\\n\",a(t.h3,{id:\"constraints\",children:[e(t.a,{className:\"anchor\",href:\"#constraints\",children:e(t.span,{className:\"icon icon-link\"})}),\"Constraints:\"]}),\"\\n\",a(t.ul,{children:[\"\\n\",e(t.li,{children:e(t.code,{className:\"language-math math-inline\",children:e(Q,{className:\"MathJax\",jax:\"SVG\",children:a(t.svg,{style:{verticalAlign:\"-0.464ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"26.926ex\",height:\"2.419ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -864 11901.3 1069\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(t.defs,{children:[e(t.path,{id:\"MJX-1-TEX-N-30\",d:\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"}),e(t.path,{id:\"MJX-1-TEX-N-3C\",d:\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"}),e(t.path,{id:\"MJX-1-TEX-N-3D\",d:\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"}),e(t.path,{id:\"MJX-1-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(t.path,{id:\"MJX-1-TEX-I-1D462\",d:\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"}),e(t.path,{id:\"MJX-1-TEX-I-1D45A\",d:\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"}),e(t.path,{id:\"MJX-1-TEX-I-1D460\",d:\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"}),e(t.path,{id:\"MJX-1-TEX-N-2E\",d:\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"}),e(t.path,{id:\"MJX-1-TEX-I-1D459\",d:\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"}),e(t.path,{id:\"MJX-1-TEX-I-1D452\",d:\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"}),e(t.path,{id:\"MJX-1-TEX-I-1D454\",d:\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"}),e(t.path,{id:\"MJX-1-TEX-I-1D461\",d:\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"}),e(t.path,{id:\"MJX-1-TEX-I-210E\",d:\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"}),e(t.path,{id:\"MJX-1-TEX-N-31\",d:\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"}),e(t.path,{id:\"MJX-1-TEX-N-35\",d:\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"})]}),e(t.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(t.g,{\"data-mml-node\":\"math\",children:[e(t.g,{\"data-mml-node\":\"mn\",children:e(t.use,{\"data-c\":\"30\",xlinkHref:\"#MJX-1-TEX-N-30\"})}),a(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(777.8,0)\",children:[e(t.g,{\"data-mml-node\":\"text\",children:e(t.use,{\"data-c\":\"3C\",xlinkHref:\"#MJX-1-TEX-N-3C\"})}),e(t.g,{\"data-mml-node\":\"text\",transform:\"translate(778,0)\",children:e(t.use,{\"data-c\":\"3D\",xlinkHref:\"#MJX-1-TEX-N-3D\"})})]}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(2611.6,0)\",children:e(t.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-1-TEX-I-1D45B\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(3211.6,0)\",children:e(t.use,{\"data-c\":\"1D462\",xlinkHref:\"#MJX-1-TEX-I-1D462\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(3783.6,0)\",children:e(t.use,{\"data-c\":\"1D45A\",xlinkHref:\"#MJX-1-TEX-I-1D45A\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(4661.6,0)\",children:e(t.use,{\"data-c\":\"1D460\",xlinkHref:\"#MJX-1-TEX-I-1D460\"})}),e(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(5130.6,0)\",children:e(t.use,{\"data-c\":\"2E\",xlinkHref:\"#MJX-1-TEX-N-2E\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(5575.2,0)\",children:e(t.use,{\"data-c\":\"1D459\",xlinkHref:\"#MJX-1-TEX-I-1D459\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(5873.2,0)\",children:e(t.use,{\"data-c\":\"1D452\",xlinkHref:\"#MJX-1-TEX-I-1D452\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(6339.2,0)\",children:e(t.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-1-TEX-I-1D45B\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(6939.2,0)\",children:e(t.use,{\"data-c\":\"1D454\",xlinkHref:\"#MJX-1-TEX-I-1D454\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(7416.2,0)\",children:e(t.use,{\"data-c\":\"1D461\",xlinkHref:\"#MJX-1-TEX-I-1D461\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(7777.2,0)\",children:e(t.use,{\"data-c\":\"210E\",xlinkHref:\"#MJX-1-TEX-I-210E\"})}),a(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(8631,0)\",children:[e(t.g,{\"data-mml-node\":\"text\",children:e(t.use,{\"data-c\":\"3C\",xlinkHref:\"#MJX-1-TEX-N-3C\"})}),e(t.g,{\"data-mml-node\":\"text\",transform:\"translate(778,0)\",children:e(t.use,{\"data-c\":\"3D\",xlinkHref:\"#MJX-1-TEX-N-3D\"})})]}),a(t.g,{\"data-mml-node\":\"msup\",transform:\"translate(10464.8,0)\",children:[a(t.g,{\"data-mml-node\":\"mn\",children:[e(t.use,{\"data-c\":\"31\",xlinkHref:\"#MJX-1-TEX-N-31\"}),e(t.use,{\"data-c\":\"30\",xlinkHref:\"#MJX-1-TEX-N-30\",transform:\"translate(500,0)\"})]}),e(t.g,{\"data-mml-node\":\"mn\",transform:\"translate(1033,393.1) scale(0.707)\",children:e(t.use,{\"data-c\":\"35\",xlinkHref:\"#MJX-1-TEX-N-35\"})})]})]})})]})})})}),\"\\n\",e(t.li,{children:e(t.code,{className:\"language-math math-inline\",children:e(Q,{className:\"MathJax\",jax:\"SVG\",children:a(t.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"25.553ex\",height:\"2.52ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -864 11294.2 1114\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(t.defs,{children:[e(t.path,{id:\"MJX-2-TEX-N-2212\",d:\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"}),e(t.path,{id:\"MJX-2-TEX-N-31\",d:\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"}),e(t.path,{id:\"MJX-2-TEX-N-30\",d:\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"}),e(t.path,{id:\"MJX-2-TEX-N-39\",d:\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"}),e(t.path,{id:\"MJX-2-TEX-N-3C\",d:\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"}),e(t.path,{id:\"MJX-2-TEX-N-3D\",d:\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"}),e(t.path,{id:\"MJX-2-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(t.path,{id:\"MJX-2-TEX-I-1D462\",d:\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"}),e(t.path,{id:\"MJX-2-TEX-I-1D45A\",d:\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"}),e(t.path,{id:\"MJX-2-TEX-I-1D460\",d:\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"}),e(t.path,{id:\"MJX-2-TEX-N-5B\",d:\"M118 -250V750H255V710H158V-210H255V-250H118Z\"}),e(t.path,{id:\"MJX-2-TEX-I-1D456\",d:\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"}),e(t.path,{id:\"MJX-2-TEX-N-5D\",d:\"M22 710V750H159V-250H22V-210H119V710H22Z\"})]}),e(t.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(t.g,{\"data-mml-node\":\"math\",children:[e(t.g,{\"data-mml-node\":\"mo\",children:e(t.use,{\"data-c\":\"2212\",xlinkHref:\"#MJX-2-TEX-N-2212\"})}),a(t.g,{\"data-mml-node\":\"msup\",transform:\"translate(778,0)\",children:[a(t.g,{\"data-mml-node\":\"mn\",children:[e(t.use,{\"data-c\":\"31\",xlinkHref:\"#MJX-2-TEX-N-31\"}),e(t.use,{\"data-c\":\"30\",xlinkHref:\"#MJX-2-TEX-N-30\",transform:\"translate(500,0)\"})]}),e(t.g,{\"data-mml-node\":\"mn\",transform:\"translate(1033,393.1) scale(0.707)\",children:e(t.use,{\"data-c\":\"39\",xlinkHref:\"#MJX-2-TEX-N-39\"})})]}),a(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(2492.3,0)\",children:[e(t.g,{\"data-mml-node\":\"text\",children:e(t.use,{\"data-c\":\"3C\",xlinkHref:\"#MJX-2-TEX-N-3C\"})}),e(t.g,{\"data-mml-node\":\"text\",transform:\"translate(778,0)\",children:e(t.use,{\"data-c\":\"3D\",xlinkHref:\"#MJX-2-TEX-N-3D\"})})]}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(4326.1,0)\",children:e(t.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-2-TEX-I-1D45B\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(4926.1,0)\",children:e(t.use,{\"data-c\":\"1D462\",xlinkHref:\"#MJX-2-TEX-I-1D462\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(5498.1,0)\",children:e(t.use,{\"data-c\":\"1D45A\",xlinkHref:\"#MJX-2-TEX-I-1D45A\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(6376.1,0)\",children:e(t.use,{\"data-c\":\"1D460\",xlinkHref:\"#MJX-2-TEX-I-1D460\"})}),e(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(6845.1,0)\",children:e(t.use,{\"data-c\":\"5B\",xlinkHref:\"#MJX-2-TEX-N-5B\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(7123.1,0)\",children:e(t.use,{\"data-c\":\"1D456\",xlinkHref:\"#MJX-2-TEX-I-1D456\"})}),e(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(7468.1,0)\",children:e(t.use,{\"data-c\":\"5D\",xlinkHref:\"#MJX-2-TEX-N-5D\"})}),a(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(8023.9,0)\",children:[e(t.g,{\"data-mml-node\":\"text\",children:e(t.use,{\"data-c\":\"3C\",xlinkHref:\"#MJX-2-TEX-N-3C\"})}),e(t.g,{\"data-mml-node\":\"text\",transform:\"translate(778,0)\",children:e(t.use,{\"data-c\":\"3D\",xlinkHref:\"#MJX-2-TEX-N-3D\"})})]}),a(t.g,{\"data-mml-node\":\"msup\",transform:\"translate(9857.7,0)\",children:[a(t.g,{\"data-mml-node\":\"mn\",children:[e(t.use,{\"data-c\":\"31\",xlinkHref:\"#MJX-2-TEX-N-31\"}),e(t.use,{\"data-c\":\"30\",xlinkHref:\"#MJX-2-TEX-N-30\",transform:\"translate(500,0)\"})]}),e(t.g,{\"data-mml-node\":\"mn\",transform:\"translate(1033,393.1) scale(0.707)\",children:e(t.use,{\"data-c\":\"39\",xlinkHref:\"#MJX-2-TEX-N-39\"})})]})]})})]})})})}),\"\\n\",a(t.li,{children:[e(t.code,{children:\"nums\"}),\" is a non-decreasing array\"]}),\"\\n\",e(t.li,{children:e(t.code,{className:\"language-math math-inline\",children:e(Q,{className:\"MathJax\",jax:\"SVG\",children:a(t.svg,{style:{verticalAlign:\"-0.464ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"23.799ex\",height:\"2.419ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -864 10519.2 1069\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(t.defs,{children:[e(t.path,{id:\"MJX-3-TEX-N-2212\",d:\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"}),e(t.path,{id:\"MJX-3-TEX-N-31\",d:\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"}),e(t.path,{id:\"MJX-3-TEX-N-30\",d:\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"}),e(t.path,{id:\"MJX-3-TEX-N-39\",d:\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"}),e(t.path,{id:\"MJX-3-TEX-N-3C\",d:\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"}),e(t.path,{id:\"MJX-3-TEX-N-3D\",d:\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"}),e(t.path,{id:\"MJX-3-TEX-I-1D461\",d:\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"}),e(t.path,{id:\"MJX-3-TEX-I-1D44E\",d:\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"}),e(t.path,{id:\"MJX-3-TEX-I-1D45F\",d:\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"}),e(t.path,{id:\"MJX-3-TEX-I-1D454\",d:\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"}),e(t.path,{id:\"MJX-3-TEX-I-1D452\",d:\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"})]}),e(t.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(t.g,{\"data-mml-node\":\"math\",children:[e(t.g,{\"data-mml-node\":\"mo\",children:e(t.use,{\"data-c\":\"2212\",xlinkHref:\"#MJX-3-TEX-N-2212\"})}),a(t.g,{\"data-mml-node\":\"msup\",transform:\"translate(778,0)\",children:[a(t.g,{\"data-mml-node\":\"mn\",children:[e(t.use,{\"data-c\":\"31\",xlinkHref:\"#MJX-3-TEX-N-31\"}),e(t.use,{\"data-c\":\"30\",xlinkHref:\"#MJX-3-TEX-N-30\",transform:\"translate(500,0)\"})]}),e(t.g,{\"data-mml-node\":\"mn\",transform:\"translate(1033,393.1) scale(0.707)\",children:e(t.use,{\"data-c\":\"39\",xlinkHref:\"#MJX-3-TEX-N-39\"})})]}),a(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(2492.3,0)\",children:[e(t.g,{\"data-mml-node\":\"text\",children:e(t.use,{\"data-c\":\"3C\",xlinkHref:\"#MJX-3-TEX-N-3C\"})}),e(t.g,{\"data-mml-node\":\"text\",transform:\"translate(778,0)\",children:e(t.use,{\"data-c\":\"3D\",xlinkHref:\"#MJX-3-TEX-N-3D\"})})]}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(4326.1,0)\",children:e(t.use,{\"data-c\":\"1D461\",xlinkHref:\"#MJX-3-TEX-I-1D461\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(4687.1,0)\",children:e(t.use,{\"data-c\":\"1D44E\",xlinkHref:\"#MJX-3-TEX-I-1D44E\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(5216.1,0)\",children:e(t.use,{\"data-c\":\"1D45F\",xlinkHref:\"#MJX-3-TEX-I-1D45F\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(5667.1,0)\",children:e(t.use,{\"data-c\":\"1D454\",xlinkHref:\"#MJX-3-TEX-I-1D454\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(6144.1,0)\",children:e(t.use,{\"data-c\":\"1D452\",xlinkHref:\"#MJX-3-TEX-I-1D452\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(6610.1,0)\",children:e(t.use,{\"data-c\":\"1D461\",xlinkHref:\"#MJX-3-TEX-I-1D461\"})}),a(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(7248.9,0)\",children:[e(t.g,{\"data-mml-node\":\"text\",children:e(t.use,{\"data-c\":\"3C\",xlinkHref:\"#MJX-3-TEX-N-3C\"})}),e(t.g,{\"data-mml-node\":\"text\",transform:\"translate(778,0)\",children:e(t.use,{\"data-c\":\"3D\",xlinkHref:\"#MJX-3-TEX-N-3D\"})})]}),a(t.g,{\"data-mml-node\":\"msup\",transform:\"translate(9082.7,0)\",children:[a(t.g,{\"data-mml-node\":\"mn\",children:[e(t.use,{\"data-c\":\"31\",xlinkHref:\"#MJX-3-TEX-N-31\"}),e(t.use,{\"data-c\":\"30\",xlinkHref:\"#MJX-3-TEX-N-30\",transform:\"translate(500,0)\"})]}),e(t.g,{\"data-mml-node\":\"mn\",transform:\"translate(1033,393.1) scale(0.707)\",children:e(t.use,{\"data-c\":\"39\",xlinkHref:\"#MJX-3-TEX-N-39\"})})]})]})})]})})})}),\"\\n\"]}),\"\\n\",a(t.h2,{id:\"approach\",children:[e(t.a,{className:\"anchor\",href:\"#approach\",children:e(t.span,{className:\"icon icon-link\"})}),\"Approach：\"]}),\"\\n\",e(t.p,{children:\"When we come across a search problemin a sorted array and it comes with the constraint that we need to solve it efficiently in O(log n) time, the first thing that should pop into our heads is binary search.\"}),\"\\n\",e(t.p,{children:\"Now, this particular problem is like a twist on binary search. It asks us to keep searching within the array until we find the start and the end position of the target number we're looking for.\"}),\"\\n\",e(t.p,{children:\"To make that happen, we apply a binary search, but instead of immediately giving back the index where we spot the number, we store the number temporarily and keep on searching for the next number until the sequence ends.\"}),\"\\n\",a(t.h3,{id:\"codes\",children:[e(t.a,{className:\"anchor\",href:\"#codes\",children:e(t.span,{className:\"icon icon-link\"})}),\"Codes\"]}),\"\\n\",e(t.pre,{children:e(t.code,{className:\"language-python\",children:\"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        result = [-1, -1]\\n\\n        def binary_search(is_start):\\n            index = -1\\n            left = 0\\n            right = len(nums) - 1\\n\\n            while (left <= right):\\n                mid = left + (right - left) // 2\\n                num = nums[mid]\\n                if num == target:\\n                    # store the temporary index in index then keep searching\\n                    index = mid\\n                    if is_start:\\n                        # search the left half if searching for the starting of the sequesce\\n                        right = mid - 1\\n                    else:\\n                        # search the right half if searching the end of the sequence\\n                        left = mid + 1\\n                elif num > target:\\n                    right = mid - 1\\n                else:\\n                    left = mid + 1\\n\\n            return index\\n\\n        result = [searchTarget(True), searchTarget(False)]\\n\\n        return result\\n\"})}),\"\\n\",a(t.h3,{id:\"complexity\",children:[e(t.a,{className:\"anchor\",href:\"#complexity\",children:e(t.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",a(t.ul,{children:[\"\\n\",a(t.li,{children:[\"Time Complexity: \",e(t.code,{className:\"language-math math-inline\",children:e(Q,{className:\"MathJax\",jax:\"SVG\",children:a(t.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"7.695ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 3401 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(t.defs,{children:[e(t.path,{id:\"MJX-4-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),e(t.path,{id:\"MJX-4-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),e(t.path,{id:\"MJX-4-TEX-I-1D459\",d:\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"}),e(t.path,{id:\"MJX-4-TEX-I-1D45C\",d:\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"}),e(t.path,{id:\"MJX-4-TEX-I-1D454\",d:\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"}),e(t.path,{id:\"MJX-4-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(t.path,{id:\"MJX-4-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),e(t.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(t.g,{\"data-mml-node\":\"math\",children:[e(t.g,{\"data-mml-node\":\"mi\",children:e(t.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-4-TEX-I-1D442\"})}),e(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:e(t.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-4-TEX-N-28\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(1152,0)\",children:e(t.use,{\"data-c\":\"1D459\",xlinkHref:\"#MJX-4-TEX-I-1D459\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(1450,0)\",children:e(t.use,{\"data-c\":\"1D45C\",xlinkHref:\"#MJX-4-TEX-I-1D45C\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(1935,0)\",children:e(t.use,{\"data-c\":\"1D454\",xlinkHref:\"#MJX-4-TEX-I-1D454\"})}),e(t.g,{\"data-mml-node\":\"mi\",transform:\"translate(2412,0)\",children:e(t.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-4-TEX-I-1D45B\"})}),e(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(3012,0)\",children:e(t.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-4-TEX-N-29\"})})]})})]})})}),\";\",e(t.br,{}),\"\\n\",\"It is a \",e(t.code,{children:\"binary search\"}),\", so we cut have the size after each search, so the time complexity will be \",e(t.code,{children:\"O(log n)\"})]}),\"\\n\",a(t.li,{children:[\"Space Complexity: \",e(t.code,{className:\"language-math math-inline\",children:e(Q,{className:\"MathJax\",jax:\"SVG\",children:a(t.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"4.618ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 2041 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(t.defs,{children:[e(t.path,{id:\"MJX-5-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),e(t.path,{id:\"MJX-5-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),e(t.path,{id:\"MJX-5-TEX-N-31\",d:\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"}),e(t.path,{id:\"MJX-5-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),e(t.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(t.g,{\"data-mml-node\":\"math\",children:[e(t.g,{\"data-mml-node\":\"mi\",children:e(t.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-5-TEX-I-1D442\"})}),e(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:e(t.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-5-TEX-N-28\"})}),e(t.g,{\"data-mml-node\":\"mn\",transform:\"translate(1152,0)\",children:e(t.use,{\"data-c\":\"31\",xlinkHref:\"#MJX-5-TEX-N-31\"})}),e(t.g,{\"data-mml-node\":\"mo\",transform:\"translate(1652,0)\",children:e(t.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-5-TEX-N-29\"})})]})})]})})})]}),\"\\n\"]}),e(t.style,{children:'\\nmjx-container[jax=\"SVG\"] {\\n  direction: ltr;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg {\\n  overflow: visible;\\n  min-height: 1px;\\n  min-width: 1px;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg a {\\n  fill: blue;\\n  stroke: blue;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"] {\\n  display: block;\\n  text-align: center;\\n  margin: 1em 0;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\\n  display: flex;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\\n  text-align: left;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\\n  text-align: right;\\n}\\n\\ng[data-mml-node=\"merror\"] > g {\\n  fill: red;\\n  stroke: red;\\n}\\n\\ng[data-mml-node=\"merror\"] > rect[data-background] {\\n  fill: yellow;\\n  stroke: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\\n  stroke-dasharray: 140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\\n  stroke-linecap: round;\\n  stroke-dasharray: 0,140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > g > svg {\\n  overflow: visible;\\n}\\n\\n[jax=\"SVG\"] mjx-tool {\\n  display: inline-block;\\n  position: relative;\\n  width: 0;\\n  height: 0;\\n}\\n\\n[jax=\"SVG\"] mjx-tool > mjx-tip {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n}\\n\\nmjx-tool > mjx-tip {\\n  display: inline-block;\\n  padding: .2em;\\n  border: 1px solid #888;\\n  font-size: 70%;\\n  background-color: #F8F8F8;\\n  color: black;\\n  box-shadow: 2px 2px 5px #AAAAAA;\\n}\\n\\ng[data-mml-node=\"maction\"][data-toggle] {\\n  cursor: pointer;\\n}\\n\\nmjx-status {\\n  display: block;\\n  position: fixed;\\n  left: 1em;\\n  bottom: 1em;\\n  min-width: 25%;\\n  padding: .2em .4em;\\n  border: 1px solid #888;\\n  font-size: 90%;\\n  background-color: #F8F8F8;\\n  color: black;\\n}\\n\\nforeignObject[data-mjx-xml] {\\n  font-family: initial;\\n  line-height: normal;\\n  overflow: visible;\\n}\\n\\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\\n  stroke-width: 3;\\n}\\n'})]})}return{default:function(n={}){const{wrapper:a}=n.components||{};return a?e(a,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-find-first-and-last-position-of-element-in-sorted-array"},{"type":"Post","slug":"leetcode-group-anagrams","title":"[Leetcode] 49. Group Anagrams","description":"Given an array of strings strs, group the anagrams together. You can return the answer in any order.","publishedAt":"2023-06-04T00:00:00.000Z","tags":["Leetcode","algorithm","hashmap","medium"],"body":"const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(a){const i={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...a.components};return r(n,{children:[r(i.h2,{id:\"題目敘述\",children:[e(i.a,{className:\"anchor\",href:\"#題目敘述\",children:e(i.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",r(i.p,{children:[\"Given an array of strings \",e(i.code,{children:\"strs\"}),\", group the \",e(i.strong,{children:\"anagrams\"}),\" together. You can return the answer \",e(i.strong,{children:\"in any order\"}),\".\"]}),\"\\n\",r(i.p,{children:[\"An \",e(i.strong,{children:\"Anagram\"}),\" is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\"]}),\"\\n\",r(i.h3,{id:\"example-1\",children:[e(i.a,{className:\"anchor\",href:\"#example-1\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:'Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\\n'})}),\"\\n\",r(i.h3,{id:\"example-2\",children:[e(i.a,{className:\"anchor\",href:\"#example-2\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:'Input: strs = [\"\"]\\nOutput: [[\"\"]]\\n'})}),\"\\n\",r(i.h3,{id:\"example-3\",children:[e(i.a,{className:\"anchor\",href:\"#example-3\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 3.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:'Input: strs = [\"a\"]\\nOutput: [[\"a\"]]\\n'})}),\"\\n\",r(i.h3,{id:\"限制\",children:[e(i.a,{className:\"anchor\",href:\"#限制\",children:e(i.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",r(i.ul,{children:[\"\\n\",e(i.li,{children:e(i.code,{children:\"1 <= strs.length <= 104\"})}),\"\\n\",e(i.li,{children:e(i.code,{children:\"0 <= strs[i].length <= 100\"})}),\"\\n\",e(i.li,{children:e(i.code,{children:\"strs[i] consists of lowercase English letters.\"})}),\"\\n\"]}),\"\\n\",r(i.h2,{id:\"解題思路\",children:[e(i.a,{className:\"anchor\",href:\"#解題思路\",children:e(i.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",e(i.p,{children:\"這個要把字母組成相同的字串放在同一個 list 當中，之後再把這些組成一個大的 List 之後回傳！\"}),\"\\n\",e(i.p,{children:\"所以主要的難點就會是我們怎麼判斷不同字串是不是有相同的字母組成，以及我們怎麼知道把這些字串暫時存在哪一個位子。\"}),\"\\n\",r(i.h2,{id:\"解題步驟\",children:[e(i.a,{className:\"anchor\",href:\"#解題步驟\",children:e(i.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",r(i.h3,{id:\"我的想法\",children:[e(i.a,{className:\"anchor\",href:\"#我的想法\",children:e(i.span,{className:\"icon icon-link\"})}),\"我的想法\"]}),\"\\n\",e(i.p,{children:\"這邊先附上我自己在寫的想法：\"}),\"\\n\",r(i.ol,{children:[\"\\n\",e(i.li,{children:\"宣告一個 result 的 2-D arrayList，和一個名為 location map 的 HashMap，目的是要存每一個字母組合在 arrayList 中的位置\"}),\"\\n\",r(i.li,{children:[\"利用迴圈對每一個題目給的字串進行以下動作：\",\"\\n\",r(i.ol,{children:[\"\\n\",e(i.li,{children:\"把拆解成 char 之後裡用 hashMap 儲存這個字串有哪些 char 並且各有幾個\"}),\"\\n\",r(i.li,{children:[\"把這個 \",e(i.strong,{children:\"字串 hashMap\"}),\" 的 key-value 變成 string (e.g. \",e(i.code,{children:\"a=1b=2\"}),\")\"]}),\"\\n\",r(i.li,{children:[\"判斷這個 \",e(i.strong,{children:\"字串組成 string\"}),\" 是否已經存在 location map 當中，如果已經存在就把 加到 result 的相應格子裡\"]}),\"\\n\",e(i.li,{children:\"如果不存在則在 result 新增一格並把字串存入。\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",r(i.h2,{id:\"java-解法\",children:[e(i.a,{className:\"anchor\",href:\"#java-解法\",children:e(i.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(i.pre,{children:e(i.code,{className:\"language-java\",children:\"class Solution {\\n    public List<List<String>> groupAnagrams(String[] strs) {\\n        HashMap<String, Integer> locationMap = new HashMap<>();\\n        List<List<String>> result = new ArrayList<>();\\n        int anagramsCount = -1;\\n\\n        for (String str: strs) {\\n            HashMap<Character, Integer> charCounts = this.countChars(str);\\n\\n            StringBuilder keyBuilder = new StringBuilder();\\n\\n            // sort the map by key to make sure anagrams key-value pair will be ordered in the same way\\n            charCounts.entrySet()\\n                .stream()\\n                .sorted(Map.Entry.<Character, Integer>comparingByKey())\\n                .forEach(s -> keyBuilder.append(s));\\n\\n            String key = keyBuilder.toString();\\n\\n            if (locationMap.containsKey(key)) {\\n                result.get(locationMap.get(key)).add(str);\\n            } else {\\n                anagramsCount++;\\n                locationMap.put(key,anagramsCount);\\n                ArrayList<String> temp = new ArrayList<>();\\n                temp.add(str);\\n                result.add(temp);\\n            }\\n        }\\n\\n        return result;\\n\\n    }\\n\\n    public static HashMap<Character, Integer> countChars(String s) {\\n        HashMap<Character, Integer> result = new HashMap<>();\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (result.containsKey(c)) {\\n                result.put(c, result.get(c) + 1);\\n            } else {\\n                result.put(c, 1);\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"})}),\"\\n\",r(i.h3,{id:\"complexity\",children:[e(i.a,{className:\"anchor\",href:\"#complexity\",children:e(i.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",r(i.ul,{children:[\"\\n\",e(i.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",e(i.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]}),\"\\n\",r(i.h2,{id:\"優化解法\",children:[e(i.a,{className:\"anchor\",href:\"#優化解法\",children:e(i.span,{className:\"icon icon-link\"})}),\"優化解法\"]}),\"\\n\",r(i.ol,{children:[\"\\n\",r(i.li,{children:[\"宣告 HashMap，key 為 \",e(i.strong,{children:\"排列過後字串\"}),\"，value 為一個 list 裡面存 \",e(i.strong,{children:\"以這些字母組成的字串\"})]}),\"\\n\",r(i.li,{children:[\"利用迴圈對每一個題目給的字串進行以下動作：\",\"\\n\",r(i.ol,{children:[\"\\n\",r(i.li,{children:[\"把字串拆成 \",e(i.strong,{children:\"字母 array\"})]}),\"\\n\",r(i.li,{children:[\"對 \",e(i.strong,{children:\"字母 array\"}),\" 進行排序\"]}),\"\\n\",e(i.li,{children:\"檢查 map 裡面有沒有這個 key，如果有就在他的 value 加入字串，沒有就新增一個 key\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",e(i.pre,{children:e(i.code,{className:\"language-java\",children:\"class Solution {\\n    public List<List<String>> groupAnagrams(String[] strs) {\\n        HashMap<String, List<String>> map = new HashMap<>();\\n        for (String s1: strs){\\n            char[] arr = s1.toCharArray();\\n\\n            Arrays.sort(arr);\\n            String str = new String(arr);\\n\\n            if (map.containsKey(str)) {\\n                map.get(str).add(s1);\\n            } else {\\n                map.put(str,new ArrayList<>());\\n                map.get(str).add(s1);\\n            }\\n        }\\n        return new ArrayList<>(map.values());\\n    }\\n}\\n\"})}),\"\\n\",r(i.h3,{id:\"complexity-1\",children:[e(i.a,{className:\"anchor\",href:\"#complexity-1\",children:e(i.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",r(i.ul,{children:[\"\\n\",e(i.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",e(i.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-group-anagrams"},{"type":"Post","slug":"leetcode-integer-break","title":"[Leetcode] 343. Integer Break","description":"Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.","publishedAt":"2023-10-06T00:00:00.000Z","tags":["Leetcode","algorithm","dynamic programming","medium","English"],"body":"const{Fragment:n,jsx:e,jsxs:a}=arguments[0];function _createMdxContent(t){const i={a:\"a\",br:\"br\",code:\"code\",defs:\"defs\",g:\"g\",h2:\"h2\",h3:\"h3\",li:\"li\",\"mjx-container\":\"mjx-container\",p:\"p\",path:\"path\",pre:\"pre\",span:\"span\",strong:\"strong\",style:\"style\",svg:\"svg\",ul:\"ul\",use:\"use\",...t.components},r=i[\"mjx-container\"];return a(n,{children:[a(i.h2,{id:\"description\",children:[e(i.a,{className:\"anchor\",href:\"#description\",children:e(i.span,{className:\"icon icon-link\"})}),\"Description\"]}),\"\\n\",a(i.p,{children:[\"Given an integer \",e(i.code,{children:\"n\"}),\", break it into the sum of \",e(i.code,{children:\"k\"}),\" \",e(i.strong,{children:\"positive integers\"}),\", where \",e(i.code,{children:\"k >= 2\"}),\", and maximize the product of those integers.\"]}),\"\\n\",a(i.p,{children:[\"Return the \",e(i.strong,{children:\"maximum product\"}),\" you can get.\"]}),\"\\n\",a(i.h3,{id:\"example-1\",children:[e(i.a,{className:\"anchor\",href:\"#example-1\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:\"Input: n = 2\\nOutput: 1\\nExplanation: 2 = 1 + 1, 1 × 1 = 1.\\n\"})}),\"\\n\",a(i.h3,{id:\"example-2\",children:[e(i.a,{className:\"anchor\",href:\"#example-2\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:\"Input: n = 10\\nOutput: 36\\nExplanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.\\n\"})}),\"\\n\",a(i.h3,{id:\"constraints\",children:[e(i.a,{className:\"anchor\",href:\"#constraints\",children:e(i.span,{className:\"icon icon-link\"})}),\"Constraints:\"]}),\"\\n\",a(i.ul,{children:[\"\\n\",e(i.li,{children:e(i.code,{children:\"2 <= n <= 58\"})}),\"\\n\"]}),\"\\n\",a(i.h2,{id:\"approach\",children:[e(i.a,{className:\"anchor\",href:\"#approach\",children:e(i.span,{className:\"icon icon-link\"})}),\"Approach：\"]}),\"\\n\",a(i.p,{children:[\"We can tell this is a DP problem because we're dealing with numbers from 1 to \",e(i.code,{children:\"n\"}),\", and we keep using the same numbers in different ways.\"]}),\"\\n\",a(i.p,{children:[\"To simplify, we break number n into \",e(i.code,{children:\"i + (n - i)\"}),\". Our objective is to find the largest product of \",e(i.code,{children:\"k\"}),\" numbers, so we decompose it into finding the maximum product of \",e(i.code,{children:\"i\"}),\" and \",e(i.code,{children:\"(n - i)\"}),\" numbers. Essentially, we break it down into \",e(i.code,{children:\"i * max product of (n - i)\"}),\" for each i in the equation. This approach allows us to tackle the problem methodically and ultimately obtain the maximum product we're aiming for\"]}),\"\\n\",e(i.p,{children:\"First, we try different ways to use each number:\"}),\"\\n\",a(i.ul,{children:[\"\\n\",e(i.li,{children:\"Multiply it directly.\"}),\"\\n\",e(i.li,{children:\"Split it into smaller parts and find the max product of those parts.\"}),\"\\n\"]}),\"\\n\",e(i.p,{children:\"But after trying to break numbers into smaller ones a bunch of times, we realize it's not efficient. So instead of breaking numbers down, we flip our approach and start building numbers up from 1.\"}),\"\\n\",a(i.p,{children:[\"While doing this, we notice that for \",e(i.code,{children:\"n <= 3\"}),\", breaking them down doesn't get us a bigger product than the original number. So we handle these small cases as exceptions. In our dynamic programming array, we just put those numbers as they are.\"]}),\"\\n\",a(i.p,{children:[\"After dealing with the exceptions, we start going through the array from \",e(i.strong,{children:\"4\"}),\" onwards to figure out the max product of breaking down numbers.\"]}),\"\\n\",a(i.p,{children:[\"We start with n as the answer, then check from 2 to n. If \",e(i.code,{children:\"i * dp[n - i]\"}),\" is bigger than what we have so far, we update the answer. Eventually, we'll have the max product by working through the array.\"]}),\"\\n\",a(i.p,{children:[\"By building up the dynamic programming array starting from 4, we eventually hit our target number n in the array. At that point, we simply return \",e(i.code,{children:\"dp[n]\"}),\" to get our answer.\"]}),\"\\n\",a(i.h3,{id:\"codes\",children:[e(i.a,{className:\"anchor\",href:\"#codes\",children:e(i.span,{className:\"icon icon-link\"})}),\"Codes\"]}),\"\\n\",e(i.pre,{children:e(i.code,{className:\"language-python\",children:\"class Solution:\\n    def integerBreak(self, n: int) -> int:\\n        # handle edge cases\\n        if n <= 3:\\n            return n - 1\\n\\n        dp = [0] * (n + 1)\\n\\n        # dp base case\\n        for i in [1, 2, 3]:\\n            dp[i] = i\\n\\n        # build the dp array form 4\\n        for num in range(4, n + 1):\\n            ans = num\\n            #  we can treat num as i * best product, so we iterate through 2 to num to find the best product.\\n            for i in range(2, num):\\n                ans = max(ans, i * dp[num - i])\\n\\n            dp[num] = ans\\n\\n\\n        return dp[n]\\n\"})}),\"\\n\",a(i.h3,{id:\"complexity\",children:[e(i.a,{className:\"anchor\",href:\"#complexity\",children:e(i.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",a(i.ul,{children:[\"\\n\",a(i.li,{children:[\"Time Complexity: \",e(i.code,{className:\"language-math math-inline\",children:e(r,{className:\"MathJax\",jax:\"SVG\",children:a(i.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"5.832ex\",height:\"2.452ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -833.9 2577.6 1083.9\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(i.defs,{children:[e(i.path,{id:\"MJX-1-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),e(i.path,{id:\"MJX-1-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),e(i.path,{id:\"MJX-1-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(i.path,{id:\"MJX-1-TEX-N-32\",d:\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"}),e(i.path,{id:\"MJX-1-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),e(i.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(i.g,{\"data-mml-node\":\"math\",children:[e(i.g,{\"data-mml-node\":\"mi\",children:e(i.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-1-TEX-I-1D442\"})}),e(i.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:e(i.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-1-TEX-N-28\"})}),a(i.g,{\"data-mml-node\":\"msup\",transform:\"translate(1152,0)\",children:[e(i.g,{\"data-mml-node\":\"mi\",children:e(i.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-1-TEX-I-1D45B\"})}),e(i.g,{\"data-mml-node\":\"mn\",transform:\"translate(633,363) scale(0.707)\",children:e(i.use,{\"data-c\":\"32\",xlinkHref:\"#MJX-1-TEX-N-32\"})})]}),e(i.g,{\"data-mml-node\":\"mo\",transform:\"translate(2188.6,0)\",children:e(i.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-1-TEX-N-29\"})})]})})]})})}),\";\",e(i.br,{}),\"\\n\",\"We build the dp array, and repeatly access every integer for almost n times\"]}),\"\\n\",a(i.li,{children:[\"Space Complexity: \",e(i.code,{className:\"language-math math-inline\",children:e(r,{className:\"MathJax\",jax:\"SVG\",children:a(i.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"4.844ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 2141 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(i.defs,{children:[e(i.path,{id:\"MJX-2-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),e(i.path,{id:\"MJX-2-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),e(i.path,{id:\"MJX-2-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(i.path,{id:\"MJX-2-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),e(i.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(i.g,{\"data-mml-node\":\"math\",children:[e(i.g,{\"data-mml-node\":\"mi\",children:e(i.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-2-TEX-I-1D442\"})}),e(i.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:e(i.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-2-TEX-N-28\"})}),e(i.g,{\"data-mml-node\":\"mi\",transform:\"translate(1152,0)\",children:e(i.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-2-TEX-I-1D45B\"})}),e(i.g,{\"data-mml-node\":\"mo\",transform:\"translate(1752,0)\",children:e(i.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-2-TEX-N-29\"})})]})})]})})}),\"\\nThe space is for the dp array we built\"]}),\"\\n\"]}),e(i.style,{children:'\\nmjx-container[jax=\"SVG\"] {\\n  direction: ltr;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg {\\n  overflow: visible;\\n  min-height: 1px;\\n  min-width: 1px;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg a {\\n  fill: blue;\\n  stroke: blue;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"] {\\n  display: block;\\n  text-align: center;\\n  margin: 1em 0;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\\n  display: flex;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\\n  text-align: left;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\\n  text-align: right;\\n}\\n\\ng[data-mml-node=\"merror\"] > g {\\n  fill: red;\\n  stroke: red;\\n}\\n\\ng[data-mml-node=\"merror\"] > rect[data-background] {\\n  fill: yellow;\\n  stroke: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\\n  stroke-dasharray: 140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\\n  stroke-linecap: round;\\n  stroke-dasharray: 0,140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > g > svg {\\n  overflow: visible;\\n}\\n\\n[jax=\"SVG\"] mjx-tool {\\n  display: inline-block;\\n  position: relative;\\n  width: 0;\\n  height: 0;\\n}\\n\\n[jax=\"SVG\"] mjx-tool > mjx-tip {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n}\\n\\nmjx-tool > mjx-tip {\\n  display: inline-block;\\n  padding: .2em;\\n  border: 1px solid #888;\\n  font-size: 70%;\\n  background-color: #F8F8F8;\\n  color: black;\\n  box-shadow: 2px 2px 5px #AAAAAA;\\n}\\n\\ng[data-mml-node=\"maction\"][data-toggle] {\\n  cursor: pointer;\\n}\\n\\nmjx-status {\\n  display: block;\\n  position: fixed;\\n  left: 1em;\\n  bottom: 1em;\\n  min-width: 25%;\\n  padding: .2em .4em;\\n  border: 1px solid #888;\\n  font-size: 90%;\\n  background-color: #F8F8F8;\\n  color: black;\\n}\\n\\nforeignObject[data-mjx-xml] {\\n  font-family: initial;\\n  line-height: normal;\\n  overflow: visible;\\n}\\n\\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\\n  stroke-width: 3;\\n}\\n'})]})}return{default:function(n={}){const{wrapper:a}=n.components||{};return a?e(a,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-integer-break"},{"type":"Post","slug":"leetcode-kth-largest-element-in-an-array","title":"[Leetcode] 215. Kth Largest Element in an Array","description":"Given an integer array nums and an integer k, return the kth largest element in the array.","publishedAt":"2023-06-20T00:00:00.000Z","tags":["Leetcode","algorithm","sorting","medium"],"body":"const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(r){const l={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...r.components};return i(n,{children:[i(l.h2,{id:\"題目敘述\",children:[e(l.a,{className:\"anchor\",href:\"#題目敘述\",children:e(l.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",i(l.p,{children:[\"Given an integer array \",e(l.code,{children:\"nums\"}),\" and an integer \",e(l.code,{children:\"k\"}),\", return the \",e(l.code,{children:\"kth\"}),\" largest element in the array.\"]}),\"\\n\",i(l.p,{children:[\"Note that it is the \",e(l.code,{children:\"kth\"}),\" largest element in the sorted order, not the \",e(l.code,{children:\"kth\"}),\" distinct element.\"]}),\"\\n\",i(l.p,{children:[\"You must solve it in \",e(l.code,{children:\"O(n)\"}),\" time complexity.\"]}),\"\\n\",i(l.h3,{id:\"example-1\",children:[e(l.a,{className:\"anchor\",href:\"#example-1\",children:e(l.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(l.pre,{children:e(l.code,{children:\"Input: nums = [3,2,1,5,6,4], k = 2\\nOutput: 5\\n\"})}),\"\\n\",i(l.h3,{id:\"example-2\",children:[e(l.a,{className:\"anchor\",href:\"#example-2\",children:e(l.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(l.pre,{children:e(l.code,{children:\"Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\\nOutput: 4\\n\"})}),\"\\n\",i(l.h3,{id:\"限制\",children:[e(l.a,{className:\"anchor\",href:\"#限制\",children:e(l.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",e(l.li,{children:e(l.code,{children:\"1 <= k <= nums.length <= 105\"})}),\"\\n\",e(l.li,{children:e(l.code,{children:\"-104 <= nums[i] <= 104\"})}),\"\\n\"]}),\"\\n\",i(l.h2,{id:\"解題思路\",children:[e(l.a,{className:\"anchor\",href:\"#解題思路\",children:e(l.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",i(l.p,{children:[\"眾所皆知，一般來說 sorting 會需要花費的時間複雜度是 \",e(l.strong,{children:\"O(nlogn)\"}),\"，但今天題目要求的時間複雜度是 \",e(l.strong,{children:\"O(n)\"}),\"。所以我們就會無法使用平常的 sorting 方法來解這個題目。\"]}),\"\\n\",i(l.p,{children:[\"這邊我會提供兩種做法，一個是平均時間複雜度是 \",e(l.strong,{children:\"O(n)\"}),\" 但是在 worst case 會做不到的 \",e(l.code,{children:\"Quick Selection\"}),\"，另外一個則是可以確實的把時間複雜度壓在 \",e(l.strong,{children:\"O(n)\"}),\" 的 \",e(l.code,{children:\"Counting Sort\"}),\"。\"]}),\"\\n\",i(l.h2,{id:\"1-quick-selection\",children:[e(l.a,{className:\"anchor\",href:\"#1-quick-selection\",children:e(l.span,{className:\"icon icon-link\"})}),\"1. Quick Selection\"]}),\"\\n\",e(l.p,{children:\"Quick Selection 其實和 Quick Sort 一樣都是利用隨機之後分組的方式來找到我們所需要的結果，只是 Quick Sort 做的是排序，而 Quick Selection 則是直接跳過排序去找到我們想要的數字。\"}),\"\\n\",e(l.p,{children:\"他的執行方式就是：\"}),\"\\n\",i(l.ol,{children:[\"\\n\",i(l.li,{children:[\"隨機在整個 array 中選一個 value，我們稱為 \",e(l.strong,{children:\"pivot\"})]}),\"\\n\",i(l.li,{children:[\"把整個 array 中的數值分成三組\",\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[e(l.strong,{children:\"left\"}),\": Array 中 value 小於 pivot 的項\"]}),\"\\n\",i(l.li,{children:[e(l.strong,{children:\"mid\"}),\": Array 中 value 等於 pivot 的項\"]}),\"\\n\",i(l.li,{children:[e(l.strong,{children:\"right\"}),\": Array 中 value 大於 pivot 的項\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.li,{children:[\"因為我們是找第 k 大的數字，所以我們需要比較 right 的數量和 k 誰比較大\",\"\\n\",i(l.ul,{children:[\"\\n\",i(l.li,{children:[\"如果 \",e(l.code,{children:\"k <= right.size()\"}),\"，代表我們要找的答案就在 right 裡面（隨機到的數字小於我們要找的數字），所以就對 \",e(l.strong,{children:\"right\"}),\" 這個部分再次進行 Quick Selection\"]}),\"\\n\",i(l.li,{children:[\"如果 \",e(l.code,{children:\"k > right.size() + mid.size()\"}),\"，這就代表其實答案在 left 裡面（隨機到的數字大於我們要找的數字），所以這時候是對 \",e(l.strong,{children:\"left\"}),\" 進行 Quick Selection，但要注意，因為我們刪掉的是比我們要找的 value 更大的項，所以要調整 \",e(l.code,{children:\"k\"}),\" 變成是 \",e(l.code,{children:\"k - right.size() - mid.size()\"})]}),\"\\n\",i(l.li,{children:[\"如果上述兩個情況都不符，就代表我們要找的數字就是那個 \",e(l.strong,{children:\"pivot\"}),\"，所以就直接 \",e(l.code,{children:\"return pivot\"}),\" 就好了！\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(l.h3,{id:\"java-解法\",children:[e(l.a,{className:\"anchor\",href:\"#java-解法\",children:e(l.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-java\",children:\"class Solution {\\n    public int findKthLargest(int[] nums, int k) {\\n        // use arraylist to simplify the code\\n        List<Integer> list = new ArrayList<>();\\n        for (int num: nums) {\\n            list.add(num);\\n        }\\n\\n        return quickSelect(list, k);\\n    }\\n\\n    public int quickSelect(List<Integer> nums, int k) {\\n        int pivotIndex = new Random().nextInt(nums.size());\\n        int pivot = nums.get(pivotIndex);\\n\\n        List<Integer> left = new ArrayList<>();\\n        List<Integer> mid = new ArrayList<>();\\n        List<Integer> right = new ArrayList<>();\\n\\n        for (int num: nums) {\\n            if (num > pivot) {\\n                right.add(num);\\n            } else if (num < pivot) {\\n                left.add(num);\\n            } else {\\n                mid.add(num);\\n            }\\n        }\\n\\n        if (k <= right.size()) {\\n            return quickSelect(right, k);\\n        }\\n\\n        if (right.size() + mid.size() < k) {\\n            return quickSelect(left, k - right.size() - mid.size());\\n        }\\n\\n        return pivot;\\n    }\\n}\\n\"})}),\"\\n\",i(l.h3,{id:\"complexity\",children:[e(l.a,{className:\"anchor\",href:\"#complexity\",children:e(l.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",e(l.li,{children:\"Time Complexity: O(n^2);\"}),\"\\n\",e(l.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]}),\"\\n\",i(l.h2,{id:\"2-counting-sort\",children:[e(l.a,{className:\"anchor\",href:\"#2-counting-sort\",children:e(l.span,{className:\"icon icon-link\"})}),\"2. Counting Sort\"]}),\"\\n\",i(l.p,{children:[\"這個 Sorting 方式和一般利用比較大小進行排序的方法不太一樣。他的做法是先跑過一次整個 array 並 \",e(l.code,{children:\"記錄每一個數字出現了多少次\"}),\"，之後才建立一個新的 array 把這個紀錄裡面的數字 \",e(l.code,{children:\"從小開始印那個數字出現的次數\"}),\"之後我們就得到一個排序好的 array。\"]}),\"\\n\",i(l.p,{children:[\"但其實我們要找的是第 k 大的數字，所以只要有那一個紀錄之後其實不需要排序好的 array，所以我們只需要把 k 從大的開始扣，一直到 \",e(l.code,{children:\"remain <= 0\"}),\" 的時候看當時是哪個數字就得到答案了！\"]}),\"\\n\",i(l.h3,{id:\"java-解法-1\",children:[e(l.a,{className:\"anchor\",href:\"#java-解法-1\",children:e(l.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(l.pre,{children:e(l.code,{className:\"language-java\",children:\"class Solution {\\n    public int findKthLargest(int[] nums, int k) {\\n        int minValue = Integer.MAX_VALUE;\\n        int maxValue = Integer.MIN_VALUE;\\n\\n        for (int num: nums) {\\n            minValue = Math.min(minValue, num);\\n            maxValue = Math.max(maxValue, num);\\n        }\\n\\n        int[] counts = new int[maxValue - minValue + 1];\\n        for (int num: nums) {\\n            counts[num - minValue] ++;\\n        }\\n\\n\\n        int remain = k;\\n        int result = maxValue - minValue;\\n        while (remain > 0) {\\n            remain -= counts[result];\\n            if (remain <= 0) return result + minValue;\\n            result --;\\n        }\\n\\n        return -1;\\n    }\\n}\\n\"})}),\"\\n\",i(l.h3,{id:\"complexity-1\",children:[e(l.a,{className:\"anchor\",href:\"#complexity-1\",children:e(l.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",e(l.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",e(l.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-kth-largest-element-in-an-array"},{"type":"Post","slug":"leetcode-kth-symbol-in-grammar","title":"[Leetcode] 50. K-th Symbol in Grammar","description":"We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.","publishedAt":"2023-07-30T00:00:00.000Z","tags":["Leetcode","algorithm","recursion","medium"],"body":"const{Fragment:n,jsx:e,jsxs:a}=arguments[0];function _createMdxContent(l){const i={a:\"a\",code:\"code\",defs:\"defs\",g:\"g\",h2:\"h2\",h3:\"h3\",li:\"li\",\"mjx-container\":\"mjx-container\",ol:\"ol\",p:\"p\",path:\"path\",pre:\"pre\",span:\"span\",strong:\"strong\",style:\"style\",svg:\"svg\",ul:\"ul\",use:\"use\",...l.components},r=i[\"mjx-container\"];return a(n,{children:[a(i.h2,{id:\"題目敘述\",children:[e(i.a,{className:\"anchor\",href:\"#題目敘述\",children:e(i.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",a(i.p,{children:[\"We build a table of \",e(i.code,{children:\"n\"}),\" rows \",e(i.strong,{children:\"(1-indexed)\"}),\". We start by writing \",e(i.code,{children:\"0\"}),\" in the \",e(i.code,{children:\"1st\"}),\" row. Now in every subsequent row, we look at the previous row and replace each occurrence of \",e(i.code,{children:\"0\"}),\" with \",e(i.code,{children:\"01\"}),\", and each occurrence of \",e(i.code,{children:\"1\"}),\" with \",e(i.code,{children:\"10\"}),\".\"]}),\"\\n\",a(i.p,{children:[\"For example, for \",e(i.code,{children:\"n = 3\"}),\", the \",e(i.code,{children:\"1st\"}),\" row is \",e(i.code,{children:\"0\"}),\", the \",e(i.code,{children:\"2nd\"}),\" row is \",e(i.code,{children:\"01\"}),\", and the \",e(i.code,{children:\"3rd\"}),\" row is \",e(i.code,{children:\"0110\"}),\".\"]}),\"\\n\",a(i.p,{children:[\"Given two integer \",e(i.code,{children:\"n\"}),\" and \",e(i.code,{children:\"k\"}),\", return the \",e(i.code,{children:\"kth\"}),\" \",e(i.strong,{children:\"(1-indexed)\"}),\" symbol in the \",e(i.code,{children:\"nth\"}),\" row of a table of \",e(i.code,{children:\"n\"}),\" rows.\"]}),\"\\n\",a(i.h3,{id:\"example-1\",children:[e(i.a,{className:\"anchor\",href:\"#example-1\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:\"Input: n = 1, k = 1\\nOutput: 0\\nExplanation: row 1: 0\\n\"})}),\"\\n\",a(i.h3,{id:\"example-2\",children:[e(i.a,{className:\"anchor\",href:\"#example-2\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:\"Input: n = 2, k = 1\\nOutput: 0\\nExplanation:\\nrow 1: 0\\nrow 2: 01\\n\"})}),\"\\n\",a(i.h3,{id:\"example-3\",children:[e(i.a,{className:\"anchor\",href:\"#example-3\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 3.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:\"Input: n = 2, k = 2\\nOutput: 1\\nExplanation:\\nrow 1: 0\\nrow 2: 01\\n\"})}),\"\\n\",a(i.h3,{id:\"限制\",children:[e(i.a,{className:\"anchor\",href:\"#限制\",children:e(i.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",a(i.ul,{children:[\"\\n\",a(i.li,{children:[\"1 \",e(i.code,{children:\"<= n <=\"}),\" 30\"]}),\"\\n\",a(i.li,{children:[\"1 \",e(i.code,{children:\"<= k <=\"}),\" \",e(i.code,{className:\"language-math math-inline\",children:e(r,{className:\"MathJax\",jax:\"SVG\",children:a(i.svg,{style:{verticalAlign:\"-0.186ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"6.176ex\",height:\"1.714ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -675.5 2729.7 757.5\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(i.defs,{children:[e(i.path,{id:\"MJX-1-TEX-N-32\",d:\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"}),e(i.path,{id:\"MJX-1-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(i.path,{id:\"MJX-1-TEX-N-2212\",d:\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"}),e(i.path,{id:\"MJX-1-TEX-N-31\",d:\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"})]}),e(i.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(i.g,{\"data-mml-node\":\"math\",children:[a(i.g,{\"data-mml-node\":\"msup\",children:[e(i.g,{\"data-mml-node\":\"mn\",children:e(i.use,{\"data-c\":\"32\",xlinkHref:\"#MJX-1-TEX-N-32\"})}),e(i.g,{\"data-mml-node\":\"mi\",transform:\"translate(533,363) scale(0.707)\",children:e(i.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-1-TEX-I-1D45B\"})})]}),e(i.g,{\"data-mml-node\":\"mo\",transform:\"translate(1229.5,0)\",children:e(i.use,{\"data-c\":\"2212\",xlinkHref:\"#MJX-1-TEX-N-2212\"})}),e(i.g,{\"data-mml-node\":\"mn\",transform:\"translate(2229.7,0)\",children:e(i.use,{\"data-c\":\"31\",xlinkHref:\"#MJX-1-TEX-N-31\"})})]})})]})})})]}),\"\\n\"]}),\"\\n\",a(i.h2,{id:\"解題思路\",children:[e(i.a,{className:\"anchor\",href:\"#解題思路\",children:e(i.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",a(i.p,{children:[\"相信大家看到這題的第一個想法都會是想要把 \",e(i.code,{children:\"第 n 行\"}),\" 整個找出來之後再去找那一行的 \",e(i.code,{children:\"第 k 個元素\"}),\" 就好了！\"]}),\"\\n\",e(i.p,{children:\"但這個方法如果用到迴圈的話會佔據大量的記憶體（每一層迴圈都會需要一個 string 的記憶體），所以我們就會需要找一個空間複雜度更好的解法。\"}),\"\\n\",e(i.p,{children:\"認真觀察每一層的字串我們可以發現每一層的字串都可以分成前後兩部分，前半長個跟上一層一樣，而後半則是上一層的相反\"}),\"\\n\",a(i.p,{children:[\"例如：\",e(i.code,{children:\"n = 3\"}),\"時，第一層為 \",e(i.code,{children:\"0\"}),\"，第二層是 \",e(i.code,{children:\"01\"}),\"，也就可以看成前半和第一層相同的 \",e(i.code,{children:\"0\"}),\" 和後半是第一層相反的 \",e(i.code,{children:\"1\"}),\"。同理第三層的 \",e(i.code,{children:\"0110\"}),\" 可以看成前半和第二層相同的 \",e(i.code,{children:\"01\"}),\" 還有第二層相反的 \",e(i.code,{children:\"02\"}),\"。\"]}),\"\\n\",a(i.p,{children:[\"有了這個脈絡之後其實我們就可以利用迴圈的方式，一圈一圈的往下找，如果 k 是在字串的後半部的話，再找下一圈的時候就找 \",e(i.code,{children:\"k - mid\"}),\"（也就是 k 在前半的對照）之後再把那個值顛倒過來就可以了！\"]}),\"\\n\",a(i.h2,{id:\"解題步驟\",children:[e(i.a,{className:\"anchor\",href:\"#解題步驟\",children:e(i.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",a(i.ol,{children:[\"\\n\",a(i.li,{children:[\"先設定迴圈的跳出條件也就是如果 \",e(i.code,{children:\"n = 1\"}),\" 且 \",e(i.code,{children:\"k = 1\"}),\" 的時候回傳 \",e(i.code,{children:\"0\"})]}),\"\\n\",e(i.li,{children:\"找到每一行的中間值\"}),\"\\n\",e(i.li,{children:\"如果 k < 中間值在下一行就找第 k 個，如果 k > 中間值的話就找他映射在前半的值之後在反過來。\"}),\"\\n\"]}),\"\\n\",a(i.h2,{id:\"java-解法\",children:[e(i.a,{className:\"anchor\",href:\"#java-解法\",children:e(i.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(i.pre,{children:e(i.code,{className:\"language-java\",children:\"class Solution {\\n    public int kthGrammar(int n, int k) {\\n        if (n == 1 && k == 1) {\\n            return 0;\\n        }\\n\\n        int mid = (int) (Math.pow(2, n-1) / 2);\\n\\n        if (k <= mid) return kthGrammar(n - 1, k);\\n        else return kthGrammar(n - 1, k - mid) == 1 ? 0 : 1;\\n    }\\n}\\n\"})}),\"\\n\",a(i.h3,{id:\"complexity\",children:[e(i.a,{className:\"anchor\",href:\"#complexity\",children:e(i.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",a(i.ul,{children:[\"\\n\",e(i.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",e(i.li,{children:\"Space Complexity: O(1);\"}),\"\\n\"]}),e(i.style,{children:'\\nmjx-container[jax=\"SVG\"] {\\n  direction: ltr;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg {\\n  overflow: visible;\\n  min-height: 1px;\\n  min-width: 1px;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg a {\\n  fill: blue;\\n  stroke: blue;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"] {\\n  display: block;\\n  text-align: center;\\n  margin: 1em 0;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\\n  display: flex;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\\n  text-align: left;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\\n  text-align: right;\\n}\\n\\ng[data-mml-node=\"merror\"] > g {\\n  fill: red;\\n  stroke: red;\\n}\\n\\ng[data-mml-node=\"merror\"] > rect[data-background] {\\n  fill: yellow;\\n  stroke: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\\n  stroke-dasharray: 140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\\n  stroke-linecap: round;\\n  stroke-dasharray: 0,140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > g > svg {\\n  overflow: visible;\\n}\\n\\n[jax=\"SVG\"] mjx-tool {\\n  display: inline-block;\\n  position: relative;\\n  width: 0;\\n  height: 0;\\n}\\n\\n[jax=\"SVG\"] mjx-tool > mjx-tip {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n}\\n\\nmjx-tool > mjx-tip {\\n  display: inline-block;\\n  padding: .2em;\\n  border: 1px solid #888;\\n  font-size: 70%;\\n  background-color: #F8F8F8;\\n  color: black;\\n  box-shadow: 2px 2px 5px #AAAAAA;\\n}\\n\\ng[data-mml-node=\"maction\"][data-toggle] {\\n  cursor: pointer;\\n}\\n\\nmjx-status {\\n  display: block;\\n  position: fixed;\\n  left: 1em;\\n  bottom: 1em;\\n  min-width: 25%;\\n  padding: .2em .4em;\\n  border: 1px solid #888;\\n  font-size: 90%;\\n  background-color: #F8F8F8;\\n  color: black;\\n}\\n\\nforeignObject[data-mjx-xml] {\\n  font-family: initial;\\n  line-height: normal;\\n  overflow: visible;\\n}\\n\\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\\n  stroke-width: 3;\\n}\\n'})]})}return{default:function(n={}){const{wrapper:a}=n.components||{};return a?e(a,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-kth-symbol-in-grammar"},{"type":"Post","slug":"leetcode-number-of-islands","title":"[Leetcode] 200. Number of Islands","description":"Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.","publishedAt":"2023-05-26T00:00:00.000Z","tags":["Leetcode","algorithm","queue"],"body":"const{Fragment:n,jsx:i,jsxs:e}=arguments[0];function _createMdxContent(r){const l={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...r.components};return e(n,{children:[e(l.h2,{id:\"題目敘述\",children:[i(l.a,{className:\"anchor\",href:\"#題目敘述\",children:i(l.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",e(l.p,{children:[\"Given an \",i(l.code,{children:\"m x n\"}),\" 2D binary grid \",i(l.code,{children:\"grid\"}),\" which represents a map of '1's (land) and '0's (water), return the number of islands.\"]}),\"\\n\",e(l.p,{children:[\"An \",i(l.strong,{children:\"island\"}),\" is surrounded by water and is formed by connecting adjacent lands \",i(l.strong,{children:\"horizontally\"}),\" or \",i(l.strong,{children:\"vertically\"}),\". You may assume all four edges of the grid are all surrounded by water.\"]}),\"\\n\",e(l.h3,{id:\"example-1\",children:[i(l.a,{className:\"anchor\",href:\"#example-1\",children:i(l.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",i(l.pre,{children:i(l.code,{children:'Input: grid = [\\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\\n]\\nOutput: 1\\n'})}),\"\\n\",e(l.h3,{id:\"example-2\",children:[i(l.a,{className:\"anchor\",href:\"#example-2\",children:i(l.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",i(l.pre,{children:i(l.code,{children:'Input: grid = [\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\\n]\\nOutput: 3\\n'})}),\"\\n\",e(l.h3,{id:\"限制\",children:[i(l.a,{className:\"anchor\",href:\"#限制\",children:i(l.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",e(l.ul,{children:[\"\\n\",i(l.li,{children:i(l.code,{children:\"m == grid.length\"})}),\"\\n\",i(l.li,{children:i(l.code,{children:\"n == grid[i].length\"})}),\"\\n\",i(l.li,{children:i(l.code,{children:\"1 <= m, n <= 300\"})}),\"\\n\",i(l.li,{children:i(l.code,{children:\"grid[i][j] is '0' or '1'.\"})}),\"\\n\"]}),\"\\n\",e(l.h2,{id:\"解題思路\",children:[i(l.a,{className:\"anchor\",href:\"#解題思路\",children:i(l.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",i(l.p,{children:'從 grid 的最左上角開始往右往下找，如果遇到陸地（val == \"1\"）就先檢查他是不是走過，如果沒走過就把他記錄起來，並且把島嶼數量 +1。至於紀錄整個島的方式可以用 Breadth first search 的方式搜索附近的陸地，之後就分為兩種方式，一種是記錄在一個新的 grid 當中，另一種就是直接把探索過的陸地變成水。'}),\"\\n\",i(l.p,{children:\"利用新的 grid 紀錄的好處是可以不用動到原本的 grid，但就是需要另外宣告一個 grid 來存是不是已經走過了！而如果是用把島弄沉的方式的話就不需要額外的記憶體空間，但壞處就是會破壞原本的 grid。\"}),\"\\n\",e(l.h2,{id:\"解題步驟\",children:[i(l.a,{className:\"anchor\",href:\"#解題步驟\",children:i(l.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",e(l.ol,{children:[\"\\n\",i(l.li,{children:\"宣告變數 count\"}),\"\\n\",i(l.li,{children:\"從 (0,0) 的地方開始往右往下尋找陸地\"}),\"\\n\"]}),\"\\n\",i(l.p,{children:\"從第三步驟開始就可以分成兩種方式\"}),\"\\n\",e(l.h3,{id:\"1-把島弄沉\",children:[i(l.a,{className:\"anchor\",href:\"#1-把島弄沉\",children:i(l.span,{className:\"icon icon-link\"})}),\"1. 把島弄沉\"]}),\"\\n\",e(l.ol,{start:\"3\",children:[\"\\n\",i(l.li,{children:'找到陸地後，把島嶼數量 + 1，並且把那一格的 \"1\" 變成 \"0\"（把陸地變成水），之後對他的上下左右四個方位的格子進行把島弄沉的 function 直到不再是陸地，或者是超出 grid 為止。'}),\"\\n\"]}),\"\\n\",e(l.h3,{id:\"2-利用-visited-紀錄\",children:[i(l.a,{className:\"anchor\",href:\"#2-利用-visited-紀錄\",children:i(l.span,{className:\"icon icon-link\"})}),\"2. 利用 visited 紀錄\"]}),\"\\n\",e(l.ol,{start:\"3\",children:[\"\\n\",i(l.li,{children:\"找到陸地後，把島嶼數量 + 1，並且把 visited 當中的那一格記錄成 true，再對他的上下左右四個方位的格子進行搜索並記錄的 function 直到不再是陸地，或者是超出 grid 為止。\"}),\"\\n\",i(l.li,{children:\"return count\"}),\"\\n\"]}),\"\\n\",e(l.h2,{id:\"java-解法\",children:[i(l.a,{className:\"anchor\",href:\"#java-解法\",children:i(l.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(l.h3,{id:\"1-把島弄沉-1\",children:[i(l.a,{className:\"anchor\",href:\"#1-把島弄沉-1\",children:i(l.span,{className:\"icon icon-link\"})}),\"1. 把島弄沉\"]}),\"\\n\",i(l.pre,{children:i(l.code,{className:\"language-java\",children:\"class Solution {\\n    private int rows;\\n    private int columns;\\n\\n    public int numIslands(char[][] grid) {\\n        int count = 0;\\n        this.rows = grid.length;\\n        if (this.rows == 0) return 0;\\n        this.columns = grid[0].length;\\n\\n        for (int i = 0; i < rows; i ++) {\\n            for (int j = 0; j < columns; j++) {\\n                if (grid[i][j] == '1') {\\n                    sinkTheIsland(grid, i, j);\\n                    count ++;\\n                }\\n            }\\n        }\\n\\n        return count;\\n    }\\n\\n    public void sinkTheIsland(char[][] grid, int row, int column) {\\n        if (row < 0 || column < 0\\n          || row >= this.rows || column >= this.columns\\n          || grid[row][column] != '1') return;\\n\\n        grid[row][column] = '0';\\n\\n        this.sinkTheIsland(grid, row + 1, column);\\n        this.sinkTheIsland(grid, row - 1, column);\\n        this.sinkTheIsland(grid, row, column + 1);\\n        this.sinkTheIsland(grid, row, column - 1);\\n    }\\n}\\n\"})}),\"\\n\",e(l.h3,{id:\"complexity\",children:[i(l.a,{className:\"anchor\",href:\"#complexity\",children:i(l.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",e(l.ul,{children:[\"\\n\",i(l.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",i(l.li,{children:\"Space Complexity: O(1);\"}),\"\\n\"]}),\"\\n\",e(l.h3,{id:\"2-利用-queue-和新的-grid\",children:[i(l.a,{className:\"anchor\",href:\"#2-利用-queue-和新的-grid\",children:i(l.span,{className:\"icon icon-link\"})}),\"2. 利用 queue 和新的 grid\"]}),\"\\n\",i(l.pre,{children:i(l.code,{className:\"language-java\",children:\"class Solution {\\n    private int rows;\\n    private int columns;\\n    private int[][] visited;\\n\\n    private class Pair{\\n        int first;\\n        int second;\\n        Pair(int fst,int scnd){\\n            this.first=fst;\\n            this.second=scnd;\\n        }\\n    }\\n\\n    // Function to find the number of islands.\\n    public int numIslands(char[][] grid) {\\n        this.rows = grid.length;\\n        this.columns = grid[0].length;\\n        this.visited = new int[this.rows][this.columns];\\n\\n        if (this.rows == 0) return 0;\\n\\n        int count = 0;\\n        for(int row = 0; row < rows ; row++) {\\n            for(int col = 0; col < columns ;col++) {\\n                // 如果 visited 是 0 且是陸地的話就是一個新的島嶼\\n                if(visited[row][col] == 0 && grid[row][col] == '1') {\\n                    count++;\\n                    bfs(row, col, grid);\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n\\n    private void bfs(int initRow, int initCol, char[][] grid) {\\n        visited[initRow][initCol] = 1;\\n        Queue<Pair> queue = new LinkedList<Pair>();\\n        queue.add(new Pair(initRow, initCol));\\n\\n        int delRow[] = {-1, 1, 0, 0};\\n        int delCol[] = {0, 0, 1, -1};\\n\\n        while(!queue.isEmpty()) {\\n            int row = queue.peek().first;\\n            int col = queue.peek().second;\\n            queue.remove();\\n\\n            // 向四個方位尋找陸地\\n            for(int i = 0; i < 4; i++){\\n                int newRow = row + delRow[i];\\n                int newCol = col + delCol[i];\\n\\n                // 如果是陸地且還 visited 是 0 的話就放入 queue 準備幫他找鄰近陸地\\n                if(newRow >= 0 && newRow < this.rows\\n                  && newCol >= 0 && newCol < this.columns\\n                  && grid[newRow][newCol] == '1'\\n                  && this.visited[newRow][newCol] == 0) {\\n                    this.visited[newRow][newCol] = 1;\\n                    queue.add(new Pair(newRow, newCol));\\n                }\\n\\n            }\\n        }\\n    }\\n}\\n\"})}),\"\\n\",e(l.h3,{id:\"complexity-1\",children:[i(l.a,{className:\"anchor\",href:\"#complexity-1\",children:i(l.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",e(l.ul,{children:[\"\\n\",i(l.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",i(l.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:e}=n.components||{};return e?i(e,{...n,children:i(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-number-of-islands"},{"type":"Post","slug":"leetcode-odd-even-linked-list","title":"[Leetcode] 328. Odd Even Linked List","description":"Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.","publishedAt":"2023-05-22T00:00:00.000Z","tags":["Leetcode","algorithm","linked list"],"body":"const{Fragment:e,jsx:n,jsxs:i}=arguments[0];function _createMdxContent(d){const l={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...d.components},{Image:o}=l;return o||function(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),i(e,{children:[i(l.h2,{id:\"題目敘述\",children:[n(l.a,{className:\"anchor\",href:\"#題目敘述\",children:n(l.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",i(l.p,{children:[\"Given the \",n(l.code,{children:\"head\"}),\" of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\"]}),\"\\n\",i(l.p,{children:[\"The \",n(l.strong,{children:\"first node\"}),\" is considered \",n(l.strong,{children:\"odd\"}),\", and the \",n(l.strong,{children:\"second node\"}),\" is \",n(l.strong,{children:\"even\"}),\", and so on.\"]}),\"\\n\",n(l.p,{children:\"Note that the relative order inside both the even and odd groups should remain as it was in the input.\"}),\"\\n\",i(l.p,{children:[\"You must solve the problem in \",n(l.code,{children:\"O(1)\"}),\" extra space complexity and \",n(l.code,{children:\"O(n)\"}),\" time complexity.\"]}),\"\\n\",i(l.h3,{id:\"example-1\",children:[n(l.a,{className:\"anchor\",href:\"#example-1\",children:n(l.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",n(o,{src:\"/blog/leetcode/oddeven-linked-list/example1.jpg\",alt:\"example1\"}),\"\\n\",n(l.pre,{children:n(l.code,{children:\"Input: head = [1,2,3,4,5]\\nOutput: [1,3,5,2,4]\\n\"})}),\"\\n\",i(l.h3,{id:\"限制\",children:[n(l.a,{className:\"anchor\",href:\"#限制\",children:n(l.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",n(l.p,{children:\"The number of nodes in the list is sz.\"}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:n(l.code,{children:\"The number of nodes in the linked list is in the range [0, 104].\"})}),\"\\n\",n(l.li,{children:n(l.code,{children:\"-106 <= Node.val <= 106\"})}),\"\\n\"]}),\"\\n\",i(l.h2,{id:\"解題思路\",children:[n(l.a,{className:\"anchor\",href:\"#解題思路\",children:n(l.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",n(l.p,{children:\"把原本的 linked list 拆成 odd linked list 和 even linked list 兩個 linked list，之後再把 even linked list 接在 odd linked list 後面就可以了！\"}),\"\\n\",i(l.h2,{id:\"解題步驟\",children:[n(l.a,{className:\"anchor\",href:\"#解題步驟\",children:n(l.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",i(l.ol,{children:[\"\\n\",n(l.li,{children:\"宣告變數 odd 指向第一個 odd node 也就是 head，even 指向第一個 even node 也就是 head.next，以及 even head 來紀錄 even 的起始點以便最後串接\"}),\"\\n\",n(l.li,{children:\"把第二個 odd node 接在第一個 odd node 後面\"}),\"\\n\",n(l.li,{children:\"把第二個 even node 接在第一個 even node 後面\"}),\"\\n\",n(l.li,{children:\"持續前兩個步驟直到最後一個 node，這樣我們就會得到一個只有 odd node 的 linked list 和只有 even node 的 linked list\"}),\"\\n\",n(l.li,{children:\"把 even linked list 接在 odd linked list 後面（odd.next = evenHead）\"}),\"\\n\"]}),\"\\n\",i(l.h3,{id:\"tricky-point\",children:[n(l.a,{className:\"anchor\",href:\"#tricky-point\",children:n(l.span,{className:\"icon icon-link\"})}),\"tricky point\"]}),\"\\n\",i(l.p,{children:[\"我在思考這個解法的時候一開始覺得在 while 迴圈的第一行 \",n(l.strong,{children:\"odd.next = odd.next.next\"}),\" 這邊就會切斷整個 linked list 導致下面那行無法執行。但其實他只是讓 \",n(l.strong,{children:\"odd.next 和 even 同時指向 odd.next.next\"}),\" 而已，並不會造成 linked list 斷掉的問題！\"]}),\"\\n\",i(l.h2,{id:\"java-解法\",children:[n(l.a,{className:\"anchor\",href:\"#java-解法\",children:n(l.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-java\",children:\"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode oddEvenList(ListNode head) {\\n        if (head == null) {\\n            return head;\\n        }\\n\\n        ListNode odd = head;\\n        ListNode even = head.next;\\n        ListNode evenHead = head.next;\\n\\n        // 這邊在檢查的時候只需要檢查 even，因為 even 一定會接在 odd 後面\\n        while(even != null && even.next != null) {\\n            odd.next = odd.next.next;\\n            even.next = even.next.next;\\n            odd = odd.next;\\n            even = even.next;\\n        }\\n\\n        odd.next = evenHead;\\n\\n        return head;\\n    }\\n}\\n\"})}),\"\\n\",i(l.h3,{id:\"complexity\",children:[n(l.a,{className:\"anchor\",href:\"#complexity\",children:n(l.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",i(l.ul,{children:[\"\\n\",n(l.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",n(l.li,{children:\"Space Complexity: O(1);\"}),\"\\n\"]})]})}return{default:function(e={}){const{wrapper:i}=e.components||{};return i?n(i,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/leetcode-odd-even-linked-list"},{"type":"Post","slug":"leetcode-palindrome-linked-list","title":"[Leetcode] 234. Palindrome Linked List","description":"Given the head of a singly linked list, return true if it is a palindrome or false otherwise.","publishedAt":"2023-06-27T00:00:00.000Z","tags":["Leetcode","algorithm","linked list","easy"],"body":"const{Fragment:n,jsx:e,jsxs:l}=arguments[0];function _createMdxContent(i){const r={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...i.components},{Image:d}=r;return d||function(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),l(n,{children:[l(r.h2,{id:\"題目敘述\",children:[e(r.a,{className:\"anchor\",href:\"#題目敘述\",children:e(r.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",l(r.p,{children:[\"Given the head of a singly linked list, return \",e(r.code,{children:\"true\"}),\" if it is a \",e(r.strong,{children:\"palindrome\"}),\" or \",e(r.code,{children:\"false\"}),\" otherwise.\"]}),\"\\n\",l(r.p,{children:[\"A \",e(r.strong,{children:\"palindrome\"}),\" is a sequence that reads the same forward and backward.\"]}),\"\\n\",l(r.h3,{id:\"example-1\",children:[e(r.a,{className:\"anchor\",href:\"#example-1\",children:e(r.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(d,{src:\"/blog/leetcode/palindrome-linked-list/example1.jpeg\",alt:\"example1\"}),\"\\n\",e(r.pre,{children:e(r.code,{children:\"Input: head = [1,2,2,1]\\nOutput: true\\n\"})}),\"\\n\",l(r.h3,{id:\"example-2\",children:[e(r.a,{className:\"anchor\",href:\"#example-2\",children:e(r.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(d,{src:\"/blog/leetcode/palindrome-linked-list/example2.jpeg\",alt:\"example2\",width:240}),\"\\n\",e(r.pre,{children:e(r.code,{children:\"Input: head = [1,2]\\nOutput: false\\n\"})}),\"\\n\",l(r.h3,{id:\"限制\",children:[e(r.a,{className:\"anchor\",href:\"#限制\",children:e(r.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",l(r.ul,{children:[\"\\n\",e(r.li,{children:e(r.code,{children:\"The number of nodes in the list is in the range [1, 105].\"})}),\"\\n\",e(r.li,{children:e(r.code,{children:\"0 <= Node.val <= 9\"})}),\"\\n\"]}),\"\\n\",l(r.h3,{id:\"follow-up\",children:[e(r.a,{className:\"anchor\",href:\"#follow-up\",children:e(r.span,{className:\"icon icon-link\"})}),\"Follow up:\"]}),\"\\n\",e(r.p,{children:\"Could you do it in O(n) time and O(1) space?\"}),\"\\n\",l(r.h2,{id:\"解題思路\",children:[e(r.a,{className:\"anchor\",href:\"#解題思路\",children:e(r.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",e(r.p,{children:\"這一題是要判斷這個 linked list 是否是回文形式。所以重點有兩個：\"}),\"\\n\",l(r.ol,{children:[\"\\n\",e(r.li,{children:\"找出中間點，這樣才能找出回文的斷點，以利後續做比較\"}),\"\\n\",e(r.li,{children:\"判斷是否為回文，就是要把前半從前面看跟後半從後面看作比較，如果全部相同就是回文，有任何不同就不是。而這邊因為題目給的是 Single Linked List，所以沒辦法從後面往前看，我們就只能把後半的 Linked List 顛倒過來（前後交換）。\"}),\"\\n\"]}),\"\\n\",l(r.h2,{id:\"解題步驟\",children:[e(r.a,{className:\"anchor\",href:\"#解題步驟\",children:e(r.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",l(r.ol,{children:[\"\\n\",l(r.li,{children:[\"寫兩個 helper function \",e(r.code,{children:\"findFirstHalfEnd\"}),\" 和 \",e(r.code,{children:\"reverseList\"}),\"\\n\",l(r.ol,{children:[\"\\n\",l(r.li,{children:[e(r.strong,{children:\"findFirstHalfEnd\"}),\"：\",\"\\n\",l(r.ol,{children:[\"\\n\",l(r.li,{children:[\"宣告兩個 pointer \",e(r.code,{children:\"slow\"}),\" 和 \",e(r.code,{children:\"fast\"})]}),\"\\n\",l(r.li,{children:[\"在 \",e(r.code,{children:\"fast\"}),\" 還沒有碰到底之前進行迴圈\",\"\\n\",l(r.ol,{children:[\"\\n\",e(r.li,{children:\"fast 往後走兩個 node\"}),\"\\n\",e(r.li,{children:\"slow 往後走一個 node\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",e(r.li,{children:\"當 fast 碰到底時，因為他走了 slow 兩倍的 node，所以這時後 slow 指向的就是整個 linked list 的中心點\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",l(r.li,{children:[e(r.strong,{children:\"reverseList\"}),\"：這個在另外一題有講解過，可以看 \",e(r.a,{href:\"https://www.simon198.com/blog/reverse-linked-list\",children:\"這篇文章\"})]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",l(r.li,{children:[\"利用 \",e(r.strong,{children:\"findFirstHalfEnd\"}),\" 找到中心點之後利用 \",e(r.strong,{children:\"reverseList\"}),\" 把中心點後的 node 顛倒過來（前後交換）\"]}),\"\\n\",l(r.li,{children:[\"比較前半（中心點以前）和顛倒過後的後半 Linked List，如果有如果有任何一個 node 的 value 不同代表他不是回文，所以回傳 \",e(r.strong,{children:\"false\"}),\"，如果全部相同則回傳 \",e(r.strong,{children:\"true\"})]}),\"\\n\"]}),\"\\n\",l(r.h2,{id:\"java-解法\",children:[e(r.a,{className:\"anchor\",href:\"#java-解法\",children:e(r.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-java\",children:\"class Solution {\\n    public boolean isPalindrome(ListNode head) {\\n        if (head == null) return true;\\n\\n        ListNode firstHalfEnd = findFirstHalfEnd(head);\\n        ListNode reversedSecondHalfStart = reverseList(firstHalfEnd.next);\\n\\n\\n        ListNode p1 = head;\\n        ListNode p2 = reversedSecondHalfStart;\\n\\n        while (p2 != null) {\\n            if (p1.val != p2.val) return false;\\n            p1 = p1.next;\\n            p2 = p2.next;\\n        }\\n\\n        return true;\\n\\n    }\\n\\n    public ListNode findFirstHalfEnd(ListNode head) {\\n        ListNode fast = head;\\n        ListNode slow = head;\\n\\n        while (fast.next != null && fast.next.next != null) {\\n            fast = fast.next.next;\\n            slow = slow.next;\\n        }\\n        return slow;\\n    }\\n\\n    public ListNode reverseList(ListNode head) {\\n        ListNode previous = null;\\n        ListNode current = head;\\n\\n        while (current != null) {\\n            ListNode nextTemp = current.next;\\n\\n            current.next = previous;\\n            previous = current;\\n            current = nextTemp;\\n        }\\n\\n        return previous;\\n    }\\n}\\n\"})}),\"\\n\",l(r.h3,{id:\"complexity\",children:[e(r.a,{className:\"anchor\",href:\"#complexity\",children:e(r.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",l(r.ul,{children:[\"\\n\",e(r.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",e(r.li,{children:\"Space Complexity: O(1);\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:l}=n.components||{};return l?e(l,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-palindrome-linked-list"},{"type":"Post","slug":"leetcode-pow","title":"[Leetcode] 50. Pow(x, n)","description":"Implement pow(x, n), which calculates x raised to the power n.","publishedAt":"2023-07-24T00:00:00.000Z","tags":["Leetcode","algorithm","math","medium"],"body":"const{Fragment:n,jsx:e,jsxs:a}=arguments[0];function _createMdxContent(r){const i={a:\"a\",code:\"code\",defs:\"defs\",g:\"g\",h2:\"h2\",h3:\"h3\",li:\"li\",\"mjx-container\":\"mjx-container\",ol:\"ol\",p:\"p\",path:\"path\",pre:\"pre\",span:\"span\",strong:\"strong\",style:\"style\",svg:\"svg\",ul:\"ul\",use:\"use\",...r.components},t=i[\"mjx-container\"];return a(n,{children:[a(i.h2,{id:\"題目敘述\",children:[e(i.a,{className:\"anchor\",href:\"#題目敘述\",children:e(i.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",a(i.p,{children:[\"Implement pow(x, n), which calculates x raised to the power n (i.e., \",e(i.code,{className:\"language-math math-inline\",children:e(t,{className:\"MathJax\",jax:\"SVG\",children:a(i.svg,{style:{verticalAlign:\"-0.025ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"2.652ex\",height:\"1.025ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -442 1172 453\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(i.defs,{children:[e(i.path,{id:\"MJX-1-TEX-I-1D465\",d:\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"}),e(i.path,{id:\"MJX-1-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"})]}),e(i.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(i.g,{\"data-mml-node\":\"math\",children:[e(i.g,{\"data-mml-node\":\"mi\",children:e(i.use,{\"data-c\":\"1D465\",xlinkHref:\"#MJX-1-TEX-I-1D465\"})}),e(i.g,{\"data-mml-node\":\"mi\",transform:\"translate(572,0)\",children:e(i.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-1-TEX-I-1D45B\"})})]})})]})})}),\" ).\"]}),\"\\n\",a(i.h3,{id:\"example-1\",children:[e(i.a,{className:\"anchor\",href:\"#example-1\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:'Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\\n'})}),\"\\n\",a(i.h3,{id:\"example-2\",children:[e(i.a,{className:\"anchor\",href:\"#example-2\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:'Input: strs = [\"\"]\\nOutput: [[\"\"]]\\n'})}),\"\\n\",a(i.h3,{id:\"example-3\",children:[e(i.a,{className:\"anchor\",href:\"#example-3\",children:e(i.span,{className:\"icon icon-link\"})}),\"Example 3.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{children:'Input: strs = [\"a\"]\\nOutput: [[\"a\"]]\\n'})}),\"\\n\",a(i.h3,{id:\"限制\",children:[e(i.a,{className:\"anchor\",href:\"#限制\",children:e(i.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",a(i.ul,{children:[\"\\n\",e(i.li,{children:e(i.code,{children:\"1 <= strs.length <= 104\"})}),\"\\n\",e(i.li,{children:e(i.code,{children:\"0 <= strs[i].length <= 100\"})}),\"\\n\",e(i.li,{children:e(i.code,{children:\"strs[i] consists of lowercase English letters.\"})}),\"\\n\"]}),\"\\n\",a(i.h2,{id:\"解題思路\",children:[e(i.a,{className:\"anchor\",href:\"#解題思路\",children:e(i.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",e(i.p,{children:\"這個要把字母組成相同的字串放在同一個 list 當中，之後再把這些組成一個大的 List 之後回傳！\"}),\"\\n\",e(i.p,{children:\"所以主要的難點就會是我們怎麼判斷不同字串是不是有相同的字母組成，以及我們怎麼知道把這些字串暫時存在哪一個位子。\"}),\"\\n\",a(i.h2,{id:\"解題步驟\",children:[e(i.a,{className:\"anchor\",href:\"#解題步驟\",children:e(i.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",a(i.h3,{id:\"我的想法\",children:[e(i.a,{className:\"anchor\",href:\"#我的想法\",children:e(i.span,{className:\"icon icon-link\"})}),\"我的想法\"]}),\"\\n\",e(i.p,{children:\"這邊先附上我自己在寫的想法：\"}),\"\\n\",a(i.ol,{children:[\"\\n\",e(i.li,{children:\"宣告一個 result 的 2-D arrayList，和一個名為 location map 的 HashMap，目的是要存每一個字母組合在 arrayList 中的位置\"}),\"\\n\",a(i.li,{children:[\"利用迴圈對每一個題目給的字串進行以下動作：\",\"\\n\",a(i.ol,{children:[\"\\n\",e(i.li,{children:\"把拆解成 char 之後裡用 hashMap 儲存這個字串有哪些 char 並且各有幾個\"}),\"\\n\",a(i.li,{children:[\"把這個 \",e(i.strong,{children:\"字串 hashMap\"}),\" 的 key-value 變成 string (e.g. \",e(i.code,{children:\"a=1b=2\"}),\")\"]}),\"\\n\",a(i.li,{children:[\"判斷這個 \",e(i.strong,{children:\"字串組成 string\"}),\" 是否已經存在 location map 當中，如果已經存在就把 加到 result 的相應格子裡\"]}),\"\\n\",e(i.li,{children:\"如果不存在則在 result 新增一格並把字串存入。\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",a(i.h2,{id:\"java-解法\",children:[e(i.a,{className:\"anchor\",href:\"#java-解法\",children:e(i.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(i.pre,{children:e(i.code,{className:\"language-java\",children:\"class Solution {\\n    public List<List<String>> groupAnagrams(String[] strs) {\\n        HashMap<String, Integer> locationMap = new HashMap<>();\\n        List<List<String>> result = new ArrayList<>();\\n        int anagramsCount = -1;\\n\\n        for (String str: strs) {\\n            HashMap<Character, Integer> charCounts = this.countChars(str);\\n\\n            StringBuilder keyBuilder = new StringBuilder();\\n\\n            // sort the map by key to make sure anagrams key-value pair will be ordered in the same way\\n            charCounts.entrySet()\\n                .stream()\\n                .sorted(Map.Entry.<Character, Integer>comparingByKey())\\n                .forEach(s -> keyBuilder.append(s));\\n\\n            String key = keyBuilder.toString();\\n\\n            if (locationMap.containsKey(key)) {\\n                result.get(locationMap.get(key)).add(str);\\n            } else {\\n                anagramsCount++;\\n                locationMap.put(key,anagramsCount);\\n                ArrayList<String> temp = new ArrayList<>();\\n                temp.add(str);\\n                result.add(temp);\\n            }\\n        }\\n\\n        return result;\\n\\n    }\\n\\n    public static HashMap<Character, Integer> countChars(String s) {\\n        HashMap<Character, Integer> result = new HashMap<>();\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (result.containsKey(c)) {\\n                result.put(c, result.get(c) + 1);\\n            } else {\\n                result.put(c, 1);\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"})}),\"\\n\",a(i.h3,{id:\"complexity\",children:[e(i.a,{className:\"anchor\",href:\"#complexity\",children:e(i.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",a(i.ul,{children:[\"\\n\",e(i.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",e(i.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]}),\"\\n\",a(i.h2,{id:\"優化解法\",children:[e(i.a,{className:\"anchor\",href:\"#優化解法\",children:e(i.span,{className:\"icon icon-link\"})}),\"優化解法\"]}),\"\\n\",a(i.ol,{children:[\"\\n\",a(i.li,{children:[\"宣告 HashMap，key 為 \",e(i.strong,{children:\"排列過後字串\"}),\"，value 為一個 list 裡面存 \",e(i.strong,{children:\"以這些字母組成的字串\"})]}),\"\\n\",a(i.li,{children:[\"利用迴圈對每一個題目給的字串進行以下動作：\",\"\\n\",a(i.ol,{children:[\"\\n\",a(i.li,{children:[\"把字串拆成 \",e(i.strong,{children:\"字母 array\"})]}),\"\\n\",a(i.li,{children:[\"對 \",e(i.strong,{children:\"字母 array\"}),\" 進行排序\"]}),\"\\n\",e(i.li,{children:\"檢查 map 裡面有沒有這個 key，如果有就在他的 value 加入字串，沒有就新增一個 key\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",e(i.pre,{children:e(i.code,{className:\"language-java\",children:\"class Solution {\\n    public List<List<String>> groupAnagrams(String[] strs) {\\n        HashMap<String, List<String>> map = new HashMap<>();\\n        for (String s1: strs){\\n            char[] arr = s1.toCharArray();\\n\\n            Arrays.sort(arr);\\n            String str = new String(arr);\\n\\n            if (map.containsKey(str)) {\\n                map.get(str).add(s1);\\n            } else {\\n                map.put(str,new ArrayList<>());\\n                map.get(str).add(s1);\\n            }\\n        }\\n        return new ArrayList<>(map.values());\\n    }\\n}\\n\"})}),\"\\n\",a(i.h3,{id:\"complexity-1\",children:[e(i.a,{className:\"anchor\",href:\"#complexity-1\",children:e(i.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",a(i.ul,{children:[\"\\n\",e(i.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",e(i.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]}),e(i.style,{children:'\\nmjx-container[jax=\"SVG\"] {\\n  direction: ltr;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg {\\n  overflow: visible;\\n  min-height: 1px;\\n  min-width: 1px;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg a {\\n  fill: blue;\\n  stroke: blue;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"] {\\n  display: block;\\n  text-align: center;\\n  margin: 1em 0;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\\n  display: flex;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\\n  text-align: left;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\\n  text-align: right;\\n}\\n\\ng[data-mml-node=\"merror\"] > g {\\n  fill: red;\\n  stroke: red;\\n}\\n\\ng[data-mml-node=\"merror\"] > rect[data-background] {\\n  fill: yellow;\\n  stroke: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\\n  stroke-dasharray: 140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\\n  stroke-linecap: round;\\n  stroke-dasharray: 0,140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > g > svg {\\n  overflow: visible;\\n}\\n\\n[jax=\"SVG\"] mjx-tool {\\n  display: inline-block;\\n  position: relative;\\n  width: 0;\\n  height: 0;\\n}\\n\\n[jax=\"SVG\"] mjx-tool > mjx-tip {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n}\\n\\nmjx-tool > mjx-tip {\\n  display: inline-block;\\n  padding: .2em;\\n  border: 1px solid #888;\\n  font-size: 70%;\\n  background-color: #F8F8F8;\\n  color: black;\\n  box-shadow: 2px 2px 5px #AAAAAA;\\n}\\n\\ng[data-mml-node=\"maction\"][data-toggle] {\\n  cursor: pointer;\\n}\\n\\nmjx-status {\\n  display: block;\\n  position: fixed;\\n  left: 1em;\\n  bottom: 1em;\\n  min-width: 25%;\\n  padding: .2em .4em;\\n  border: 1px solid #888;\\n  font-size: 90%;\\n  background-color: #F8F8F8;\\n  color: black;\\n}\\n\\nforeignObject[data-mjx-xml] {\\n  font-family: initial;\\n  line-height: normal;\\n  overflow: visible;\\n}\\n\\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\\n  stroke-width: 3;\\n}\\n'})]})}return{default:function(n={}){const{wrapper:a}=n.components||{};return a?e(a,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-pow"},{"type":"Post","slug":"leetcode-power-of-two","title":"[Leetcode] 231. Power of Two","description":"Given an integer n, return true if it is a power of two. Otherwise, return false.","publishedAt":"2023-06-09T00:00:00.000Z","tags":["Leetcode","algorithm","bit manipulation","easy"],"body":"const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(l){const a={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",ul:\"ul\",...l.components};return i(n,{children:[i(a.h2,{id:\"題目敘述\",children:[e(a.a,{className:\"anchor\",href:\"#題目敘述\",children:e(a.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",i(a.p,{children:[\"Given an integer \",e(a.code,{children:\"n\"}),\", return \",e(a.code,{children:\"true\"}),\" if it is a power of two. Otherwise, return \",e(a.code,{children:\"false\"}),\".\"]}),\"\\n\",i(a.p,{children:[\"An integer \",e(a.code,{children:\"n\"}),\" is a power of two, if there exists an integer \",e(a.code,{children:\"x\"}),\" such that \",e(a.code,{children:\"n == 2^x\"}),\".\"]}),\"\\n\",i(a.h3,{id:\"example-1\",children:[e(a.a,{className:\"anchor\",href:\"#example-1\",children:e(a.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(a.pre,{children:e(a.code,{children:\"Input: n = 1\\nOutput: true\\nExplanation: 2^0 = 1\\n\"})}),\"\\n\",i(a.h3,{id:\"example-2\",children:[e(a.a,{className:\"anchor\",href:\"#example-2\",children:e(a.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(a.pre,{children:e(a.code,{children:\"Input: n = 16\\nOutput: true\\nExplanation: 2^4 = 16\\n\"})}),\"\\n\",i(a.h3,{id:\"example-2-1\",children:[e(a.a,{className:\"anchor\",href:\"#example-2-1\",children:e(a.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(a.pre,{children:e(a.code,{children:\"Input: n = 3\\nOutput: false\\n\"})}),\"\\n\",i(a.h3,{id:\"限制\",children:[e(a.a,{className:\"anchor\",href:\"#限制\",children:e(a.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",i(a.ul,{children:[\"\\n\",e(a.li,{children:e(a.code,{children:\"-231 <= n <= 231 - 1\"})}),\"\\n\"]}),\"\\n\",i(a.h2,{id:\"解題思路\",children:[e(a.a,{className:\"anchor\",href:\"#解題思路\",children:e(a.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",e(a.p,{children:\"這題其實可以不用 bit manipulation 的方式做，但因為現在在練習這個主題，所以就思考一下這樣的做法。\"}),\"\\n\",e(a.p,{children:\"如果把所有 2 的倍數轉換成二進制的話，我們可以發現他們都是由 1 個 1 和數個 0 組成！\"}),\"\\n\",e(a.p,{children:\"想到這個核心概念之後這個問題就很好解決了，我們就只要把每一個位數都檢查過一次，如果超過 1 個 1 或是沒有 1 的話就代表他不是 2 的倍數。\"}),\"\\n\",i(a.h2,{id:\"解題步驟\",children:[e(a.a,{className:\"anchor\",href:\"#解題步驟\",children:e(a.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",i(a.ol,{children:[\"\\n\",e(a.li,{children:\"宣告一個 variable mask 作為我們的判斷每一個位數的依據，和一個 hasOne 來存是不是已經有遇到過 1 了\"}),\"\\n\",i(a.li,{children:[\"利用迴圈從第一位開始對每一個位數進行以下動作：\",\"\\n\",i(a.ol,{children:[\"\\n\",e(a.li,{children:\"利用 & 1 可以拿到那個位數是 0 還是 2^n 的特性來檢查該位數是不是 0\"}),\"\\n\",e(a.li,{children:\"如果不是 0 的話就要檢查這個數字有沒有遇到過 1 了，如果遇到過了就直接 return false，還沒遇過就把 hasOne 改成 true\"}),\"\\n\",e(a.li,{children:\"把 mask 往左移一位，以便下一圈檢查的時候有正確的 mask\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",e(a.li,{children:\"如果沒有再迴圈裡面回傳 false 的話，就回傳 true\"}),\"\\n\"]}),\"\\n\",i(a.h2,{id:\"java-解法\",children:[e(a.a,{className:\"anchor\",href:\"#java-解法\",children:e(a.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-java\",children:\"class Solution {\\n    public boolean isPowerOfTwo(int n) {\\n        if (n <= 0) return false;\\n\\n        int mask = 1;\\n        boolean hasOne = false;\\n\\n        while (mask < n) {\\n            if ((n & mask) != 0) {\\n                if (hasOne) return false;\\n                else hasOne = true;\\n            }\\n\\n            mask <<= 1;\\n        }\\n        return true;\\n    }\\n}\\n\"})}),\"\\n\",i(a.h3,{id:\"complexity\",children:[e(a.a,{className:\"anchor\",href:\"#complexity\",children:e(a.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",i(a.ul,{children:[\"\\n\",e(a.li,{children:\"Time Complexity: O(1);\"}),\"\\n\",e(a.li,{children:\"Space Complexity: O(1);\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-power-of-two"},{"type":"Post","slug":"leetcode-remove-colored-pieces-if-both-neighbors-are-the-same-color","title":"[Leetcode] 2038. Remove Colored Pieces if Both Neighbors are the Same Color","description":"There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the ith piece.","publishedAt":"2023-10-02T00:00:00.000Z","tags":["Leetcode","algorithm","greedy","medium","English"],"body":"const{Fragment:e,jsx:n,jsxs:a}=arguments[0];function _createMdxContent(r){const l={a:\"a\",br:\"br\",code:\"code\",defs:\"defs\",g:\"g\",h2:\"h2\",h3:\"h3\",li:\"li\",\"mjx-container\":\"mjx-container\",ol:\"ol\",p:\"p\",path:\"path\",pre:\"pre\",span:\"span\",strong:\"strong\",style:\"style\",svg:\"svg\",ul:\"ul\",use:\"use\",...r.components},o=l[\"mjx-container\"];return a(e,{children:[a(l.h2,{id:\"description\",children:[n(l.a,{className:\"anchor\",href:\"#description\",children:n(l.span,{className:\"icon icon-link\"})}),\"Description\"]}),\"\\n\",a(l.p,{children:[\"There are \",n(l.code,{children:\"n\"}),\" pieces arranged in a line, and each piece is colored either by \",n(l.code,{children:\"A\"}),\" or by \",n(l.code,{children:\"B\"}),\". You are given a string \",n(l.code,{children:\"colors\"}),\" of length \",n(l.code,{children:\"n\"}),\" where \",n(l.code,{children:\"colors[i]\"}),\" is the color of the \",n(l.code,{children:\"ith\"}),\" piece.\"]}),\"\\n\",a(l.p,{children:[\"Alice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves \",n(l.strong,{children:\"first\"}),\".\"]}),\"\\n\",a(l.ul,{children:[\"\\n\",a(l.li,{children:[\"Alice is only allowed to remove a piece colored \",n(l.code,{children:\"A\"}),\" if \",n(l.strong,{children:\"both its neighbors\"}),\" are also colored \",n(l.code,{children:\"A\"}),\". She is \",n(l.strong,{children:\"not allowed\"}),\" to remove pieces that are colored \",n(l.code,{children:\"B\"}),\".\"]}),\"\\n\",a(l.li,{children:[\"Bob is only allowed to remove a piece colored \",n(l.code,{children:\"B\"}),\" if \",n(l.strong,{children:\"both its neighbors\"}),\" are also colored \",n(l.code,{children:\"B\"}),\". He is \",n(l.strong,{children:\"not allowed\"}),\" to remove pieces that are colored \",n(l.code,{children:\"A\"}),\".\"]}),\"\\n\",n(l.li,{children:\"Alice and Bob cannot remove pieces from the edge of the line.\"}),\"\\n\",a(l.li,{children:[\"If a player \",n(l.strong,{children:\"cannot\"}),\" make a move on their turn, that player loses and the other player wins.\"]}),\"\\n\"]}),\"\\n\",a(l.p,{children:[\"Assuming Alice and Bob play optimally, return \",n(l.code,{children:\"true\"}),\" if Alice wins, or return \",n(l.code,{children:\"false\"}),\" if Bob wins.\"]}),\"\\n\",a(l.h3,{id:\"example-1\",children:[n(l.a,{className:\"anchor\",href:\"#example-1\",children:n(l.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",n(l.pre,{children:n(l.code,{children:\"Input: colors = \\\"AAABABB\\\"\\nOutput: true\\n\\nExplanation:\\nAAABABB -> AABABB\\nAlice moves first.\\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\\n\\nNow it's Bob's turn.\\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\\nThus, Alice wins, so return true.\\n\"})}),\"\\n\",a(l.h3,{id:\"example-2\",children:[n(l.a,{className:\"anchor\",href:\"#example-2\",children:n(l.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",n(l.pre,{children:n(l.code,{children:\"Input: colors = \\\"AA\\\"\\nOutput: false\\n\\nExplanation:\\nAlice has her turn first.\\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\\nThus, Bob wins, so return false.\\n\\n\"})}),\"\\n\",a(l.h3,{id:\"example-3\",children:[n(l.a,{className:\"anchor\",href:\"#example-3\",children:n(l.span,{className:\"icon icon-link\"})}),\"Example 3.\"]}),\"\\n\",n(l.pre,{children:n(l.code,{children:\"Input: colors = \\\"ABBBBBBBAAA\\\"\\nOutput: false\\n\\nExplanation:\\nABBBBBBBAAA -> ABBBBBBBAA\\nAlice moves first.\\nHer only option is to remove the second to last 'A' from the right.\\n\\nABBBBBBBAA -> ABBBBBBAA\\nNext is Bob's turn.\\nHe has many options for which 'B' piece to remove. He can pick any.\\n\\nOn Alice's second turn, she has no more pieces that she can remove.\\nThus, Bob wins, so return false.\\n\"})}),\"\\n\",a(l.h3,{id:\"constraints\",children:[n(l.a,{className:\"anchor\",href:\"#constraints\",children:n(l.span,{className:\"icon icon-link\"})}),\"Constraints:\"]}),\"\\n\",a(l.ul,{children:[\"\\n\",n(l.li,{children:n(l.code,{children:\"1 <= colors.length <= 105\"})}),\"\\n\",n(l.li,{children:n(l.code,{children:\"colors consists of only the letters 'A' and 'B'\"})}),\"\\n\"]}),\"\\n\",a(l.h2,{id:\"approach---brute-force\",children:[n(l.a,{className:\"anchor\",href:\"#approach---brute-force\",children:n(l.span,{className:\"icon icon-link\"})}),\"Approach - Brute force：\"]}),\"\\n\",n(l.p,{children:\"To crack this problem, consider the colors string:\"}),\"\\n\",a(l.ol,{children:[\"\\n\",n(l.li,{children:\"A color can only go if it's flanked by identical colors.\"}),\"\\n\",n(l.li,{children:\"After removal, the string shifts, so rechecking is key for further removals.\"}),\"\\n\",n(l.li,{children:\"Keep going until one color can't be removed anymore\"}),\"\\n\"]}),\"\\n\",a(l.h3,{id:\"codes\",children:[n(l.a,{className:\"anchor\",href:\"#codes\",children:n(l.span,{className:\"icon icon-link\"})}),\"Codes\"]}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-python\",children:'class Solution:\\n    # Remove color from colors and return the new colors,\\n    # if cannot remove, return empty string\\n    def remove_color(is_alice, colors):\\n        # Remove \"A\" in Alice\\'s turns and \"B\" in Bob\\'s turns\\n        color = \"A\" if is_alice else \"B\"\\n\\n        # Iterate through the colors string and find if there are any char has same color with its neighbor\\n        for i in range(len(colors) - 2):\\n            if colors[i] == color and colors[i + 1] == color and colors[i + 2] == color:\\n                # remove the removable char and return the new string\\n                return colors[:i+1] + colors[i+2:]\\n\\n        # if the function doesn\\'t return after the loop,\\n        # mean no char is removable, so return empty sting,\\n        # which mean the player loses the game\\n        return \"\"\\n\\n    # Alice starts first\\n    is_alice = True\\n    # Keep looping until there is a result\\n    while True:\\n        colors = check_can_remove(is_alice, colors)\\n\\n        # return the opposite player if get a empty string\\n        if not colors:\\n            return not is_alice\\n\\n        # if removed a char, it\\'s next person\\'s turn\\n        is_alice = not is_alice\\n'})}),\"\\n\",a(l.h3,{id:\"complexity\",children:[n(l.a,{className:\"anchor\",href:\"#complexity\",children:n(l.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",a(l.ul,{children:[\"\\n\",a(l.li,{children:[\"\\n\",a(l.p,{children:[\"Time Complexity: \",n(l.code,{className:\"language-math math-inline\",children:n(o,{className:\"MathJax\",jax:\"SVG\",children:a(l.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"5.832ex\",height:\"2.452ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -833.9 2577.6 1083.9\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(l.defs,{children:[n(l.path,{id:\"MJX-1-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),n(l.path,{id:\"MJX-1-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),n(l.path,{id:\"MJX-1-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),n(l.path,{id:\"MJX-1-TEX-N-32\",d:\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"}),n(l.path,{id:\"MJX-1-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),n(l.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(l.g,{\"data-mml-node\":\"math\",children:[n(l.g,{\"data-mml-node\":\"mi\",children:n(l.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-1-TEX-I-1D442\"})}),n(l.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:n(l.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-1-TEX-N-28\"})}),a(l.g,{\"data-mml-node\":\"msup\",transform:\"translate(1152,0)\",children:[n(l.g,{\"data-mml-node\":\"mi\",children:n(l.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-1-TEX-I-1D45B\"})}),n(l.g,{\"data-mml-node\":\"mn\",transform:\"translate(633,363) scale(0.707)\",children:n(l.use,{\"data-c\":\"32\",xlinkHref:\"#MJX-1-TEX-N-32\"})})]}),n(l.g,{\"data-mml-node\":\"mo\",transform:\"translate(2188.6,0)\",children:n(l.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-1-TEX-N-29\"})})]})})]})})}),\";\",n(l.br,{}),\"\\n\",\"The search method complexity is O(n) in the worst case, and we will need to loop over the entire colors string so we do O(n) search for n time. The complexity will be \",n(l.code,{className:\"language-math math-inline\",children:n(o,{className:\"MathJax\",jax:\"SVG\",children:a(l.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"5.832ex\",height:\"2.452ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -833.9 2577.6 1083.9\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(l.defs,{children:[n(l.path,{id:\"MJX-2-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),n(l.path,{id:\"MJX-2-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),n(l.path,{id:\"MJX-2-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),n(l.path,{id:\"MJX-2-TEX-N-32\",d:\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"}),n(l.path,{id:\"MJX-2-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),n(l.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(l.g,{\"data-mml-node\":\"math\",children:[n(l.g,{\"data-mml-node\":\"mi\",children:n(l.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-2-TEX-I-1D442\"})}),n(l.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:n(l.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-2-TEX-N-28\"})}),a(l.g,{\"data-mml-node\":\"msup\",transform:\"translate(1152,0)\",children:[n(l.g,{\"data-mml-node\":\"mi\",children:n(l.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-2-TEX-I-1D45B\"})}),n(l.g,{\"data-mml-node\":\"mn\",transform:\"translate(633,363) scale(0.707)\",children:n(l.use,{\"data-c\":\"32\",xlinkHref:\"#MJX-2-TEX-N-32\"})})]}),n(l.g,{\"data-mml-node\":\"mo\",transform:\"translate(2188.6,0)\",children:n(l.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-2-TEX-N-29\"})})]})})]})})})]}),\"\\n\"]}),\"\\n\",a(l.li,{children:[\"\\n\",a(l.p,{children:[\"Space Complexity: \",n(l.code,{className:\"language-math math-inline\",children:n(o,{className:\"MathJax\",jax:\"SVG\",children:a(l.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"4.618ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 2041 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(l.defs,{children:[n(l.path,{id:\"MJX-3-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),n(l.path,{id:\"MJX-3-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),n(l.path,{id:\"MJX-3-TEX-N-31\",d:\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"}),n(l.path,{id:\"MJX-3-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),n(l.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(l.g,{\"data-mml-node\":\"math\",children:[n(l.g,{\"data-mml-node\":\"mi\",children:n(l.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-3-TEX-I-1D442\"})}),n(l.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:n(l.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-3-TEX-N-28\"})}),n(l.g,{\"data-mml-node\":\"mn\",transform:\"translate(1152,0)\",children:n(l.use,{\"data-c\":\"31\",xlinkHref:\"#MJX-3-TEX-N-31\"})}),n(l.g,{\"data-mml-node\":\"mo\",transform:\"translate(1652,0)\",children:n(l.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-3-TEX-N-29\"})})]})})]})})}),\";\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",a(l.h3,{id:\"approach---count-aaa-and-bbb\",children:[n(l.a,{className:\"anchor\",href:\"#approach---count-aaa-and-bbb\",children:n(l.span,{className:\"icon icon-link\"})}),'Approach - Count \"AAA\" and \"BBB\"']}),\"\\n\",n(l.p,{children:\"Given that we can only remove a color when it's flanked by two identical colors, it becomes evident that we won't ever eliminate the boundary separating different colors.\"}),\"\\n\",n(l.p,{children:\"By recognizing this, we can simplify our approach: we count how many of each color can be removed and then compare these counts to determine the outcome.\"}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-python\",children:'class Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        # init the counts to 0\\n        a, b = 0, 0\\n\\n        for i in range(len(colors) - 2):\\n            # if there\\'s a removable color, add the count\\n            if colors[i] == colors[i+1] == colors[i+2]:\\n                if colors[i] == \"A\":\\n                    a += 1\\n                else:\\n                    b += 1\\n\\n        # the bigger numbe means they have more element\\n        return a > b\\n'})}),\"\\n\",a(l.h3,{id:\"complexity-1\",children:[n(l.a,{className:\"anchor\",href:\"#complexity-1\",children:n(l.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",a(l.ul,{children:[\"\\n\",a(l.li,{children:[\"Time Complexity: \",n(l.code,{className:\"language-math math-inline\",children:n(o,{className:\"MathJax\",jax:\"SVG\",children:a(l.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"4.844ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 2141 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(l.defs,{children:[n(l.path,{id:\"MJX-4-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),n(l.path,{id:\"MJX-4-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),n(l.path,{id:\"MJX-4-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),n(l.path,{id:\"MJX-4-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),n(l.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(l.g,{\"data-mml-node\":\"math\",children:[n(l.g,{\"data-mml-node\":\"mi\",children:n(l.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-4-TEX-I-1D442\"})}),n(l.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:n(l.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-4-TEX-N-28\"})}),n(l.g,{\"data-mml-node\":\"mi\",transform:\"translate(1152,0)\",children:n(l.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-4-TEX-I-1D45B\"})}),n(l.g,{\"data-mml-node\":\"mo\",transform:\"translate(1752,0)\",children:n(l.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-4-TEX-N-29\"})})]})})]})})}),\";\",n(l.br,{}),\"\\n\",\"We only iterate the colors string for once to count the number of removable char\"]}),\"\\n\",a(l.li,{children:[\"Space Complexity: \",n(l.code,{className:\"language-math math-inline\",children:n(o,{className:\"MathJax\",jax:\"SVG\",children:a(l.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"4.618ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 2041 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[a(l.defs,{children:[n(l.path,{id:\"MJX-5-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),n(l.path,{id:\"MJX-5-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),n(l.path,{id:\"MJX-5-TEX-N-31\",d:\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"}),n(l.path,{id:\"MJX-5-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),n(l.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:a(l.g,{\"data-mml-node\":\"math\",children:[n(l.g,{\"data-mml-node\":\"mi\",children:n(l.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-5-TEX-I-1D442\"})}),n(l.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:n(l.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-5-TEX-N-28\"})}),n(l.g,{\"data-mml-node\":\"mn\",transform:\"translate(1152,0)\",children:n(l.use,{\"data-c\":\"31\",xlinkHref:\"#MJX-5-TEX-N-31\"})}),n(l.g,{\"data-mml-node\":\"mo\",transform:\"translate(1652,0)\",children:n(l.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-5-TEX-N-29\"})})]})})]})})}),\";\"]}),\"\\n\"]}),n(l.style,{children:'\\nmjx-container[jax=\"SVG\"] {\\n  direction: ltr;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg {\\n  overflow: visible;\\n  min-height: 1px;\\n  min-width: 1px;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg a {\\n  fill: blue;\\n  stroke: blue;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"] {\\n  display: block;\\n  text-align: center;\\n  margin: 1em 0;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\\n  display: flex;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\\n  text-align: left;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\\n  text-align: right;\\n}\\n\\ng[data-mml-node=\"merror\"] > g {\\n  fill: red;\\n  stroke: red;\\n}\\n\\ng[data-mml-node=\"merror\"] > rect[data-background] {\\n  fill: yellow;\\n  stroke: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\\n  stroke-dasharray: 140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\\n  stroke-linecap: round;\\n  stroke-dasharray: 0,140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > g > svg {\\n  overflow: visible;\\n}\\n\\n[jax=\"SVG\"] mjx-tool {\\n  display: inline-block;\\n  position: relative;\\n  width: 0;\\n  height: 0;\\n}\\n\\n[jax=\"SVG\"] mjx-tool > mjx-tip {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n}\\n\\nmjx-tool > mjx-tip {\\n  display: inline-block;\\n  padding: .2em;\\n  border: 1px solid #888;\\n  font-size: 70%;\\n  background-color: #F8F8F8;\\n  color: black;\\n  box-shadow: 2px 2px 5px #AAAAAA;\\n}\\n\\ng[data-mml-node=\"maction\"][data-toggle] {\\n  cursor: pointer;\\n}\\n\\nmjx-status {\\n  display: block;\\n  position: fixed;\\n  left: 1em;\\n  bottom: 1em;\\n  min-width: 25%;\\n  padding: .2em .4em;\\n  border: 1px solid #888;\\n  font-size: 90%;\\n  background-color: #F8F8F8;\\n  color: black;\\n}\\n\\nforeignObject[data-mjx-xml] {\\n  font-family: initial;\\n  line-height: normal;\\n  overflow: visible;\\n}\\n\\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\\n  stroke-width: 3;\\n}\\n'})]})}return{default:function(e={}){const{wrapper:a}=e.components||{};return a?n(a,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/leetcode-remove-colored-pieces-if-both-neighbors-are-the-same-color"},{"type":"Post","slug":"leetcode-remove-nth-node-from-end","title":"[Leetcode] 19. Remove Nth Node From End of List","description":"Given the head of a linked list, remove the nth node from the end of the list and return its head.","publishedAt":"2023-05-21T00:00:00.000Z","tags":["Leetcode","algorithm","linked list"],"body":"const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(o){const r={a:\"a\",br:\"br\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",ul:\"ul\",...o.components},{Image:t}=r;return t||function(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),i(n,{children:[i(r.h2,{id:\"題目敘述\",children:[e(r.a,{className:\"anchor\",href:\"#題目敘述\",children:e(r.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",i(r.p,{children:[\"Given the \",e(r.code,{children:\"head\"}),\" of a linked list, remove the \",e(r.code,{children:\"nth\"}),\" node from the end of the list and return its head.\"]}),\"\\n\",i(r.h3,{id:\"example-1\",children:[e(r.a,{className:\"anchor\",href:\"#example-1\",children:e(r.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(t,{src:\"/blog/leetcode/remove-nth-node-from-end/example1.jpeg\",alt:\"example1\"}),\"\\n\",e(r.pre,{children:e(r.code,{children:\"Input: head = [1,2,3,4,5], n = 2\\nOutput: [1,2,3,5]\\n\"})}),\"\\n\",i(r.h3,{id:\"example-2\",children:[e(r.a,{className:\"anchor\",href:\"#example-2\",children:e(r.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(r.pre,{children:e(r.code,{children:\"Input: head = [1], n = 1\\nOutput: []\\n\"})}),\"\\n\",i(r.h3,{id:\"限制\",children:[e(r.a,{className:\"anchor\",href:\"#限制\",children:e(r.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",e(r.p,{children:\"The number of nodes in the list is sz.\"}),\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:e(r.code,{children:\"1 <= sz <= 30\"})}),\"\\n\",e(r.li,{children:e(r.code,{children:\"0 <= Node.val <= 100\"})}),\"\\n\",e(r.li,{children:e(r.code,{children:\"1 <= n <= sz\"})}),\"\\n\"]}),\"\\n\",i(r.h2,{id:\"解題思路\",children:[e(r.a,{className:\"anchor\",href:\"#解題思路\",children:e(r.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",e(r.p,{children:\"利用 two-pointer 的方式，讓這兩個 pointer 中間間隔 n 個 node，這樣當後面的 pointer 指向最後一個 node 的時候就代表前面 pointer.next 指向的是我們要刪掉的 node。\"}),\"\\n\",i(r.h2,{id:\"解題步驟\",children:[e(r.a,{className:\"anchor\",href:\"#解題步驟\",children:e(r.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"宣告兩個 pointer 都指向 head（稱為 frontPointer 和 backPointer）\"}),\"\\n\",e(r.li,{children:\"讓 backPointer 先往後走 n 個 node\"}),\"\\n\",e(r.li,{children:\"兩個 pointer 同時向後走，走到 backPointer 指向最後一個 node 時停止\"}),\"\\n\",e(r.li,{children:\"將 frontPointer.next 刪掉\"}),\"\\n\"]}),\"\\n\",i(r.h3,{id:\"special-case\",children:[e(r.a,{className:\"anchor\",href:\"#special-case\",children:e(r.span,{className:\"icon icon-link\"})}),\"special case:\"]}),\"\\n\",i(r.p,{children:[\"當今天要刪掉的 node 是 head 的時候，因為前面沒有 node，所以不能用 \",e(r.code,{children:\"frontPointer.next = frontPointer.next.next\"}),\" 的方式刪除，就需要用直接設定 \",e(r.code,{children:\"frontPointer = null\"}),\" 的方式把第一個 node 直接變成 null。\",e(r.br,{}),\"\\n\",\"而要怎麼判斷是不是刪除 head 的！我就利用 backPointer 往後走的時候紀錄整個 list 的 size，之後如果 frontPointer 依然指向 head 且 n >= size 的時候，我們就知道要刪掉的是 head 了！\"]}),\"\\n\",i(r.h2,{id:\"java-解法\",children:[e(r.a,{className:\"anchor\",href:\"#java-解法\",children:e(r.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-java\",children:\"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode removeNthFromEnd(ListNode head, int n) {\\n        ListNode frontPointer = head;\\n        ListNode backPointer = head;\\n        int size = 1;\\n\\n        /* 把 backPointer 先移動到距離 frontPointer n 個 node 的地方 **/\\n        for (int i = 0; i < n; i++) {\\n            if (backPointer.next != null) {\\n                backPointer = backPointer.next;\\n                size ++;\\n            }\\n        }\\n\\n        /* 同時移動兩個 pointer 直到 backPointer 指向最後一個 node **/\\n        while (backPointer.next != null) {\\n            frontPointer = frontPointer.next;\\n            backPointer = backPointer.next;\\n            size ++;\\n        }\\n\\n        /* 處理 special case，也就是要刪除 head 的情況 **/\\n        if (frontPointer == head && n >= size) {\\n            ListNode temp = frontPointer.next;\\n            frontPointer = null;\\n            return temp;\\n        }\\n\\n        /* 把 frontPointer aka nth node from end 刪掉**/\\n        frontPointer.next = frontPointer.next.next;\\n\\n        return head;\\n    }\\n}\\n\"})}),\"\\n\",i(r.h3,{id:\"complexity\",children:[e(r.a,{className:\"anchor\",href:\"#complexity\",children:e(r.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",e(r.li,{children:\"Space Complexity: O(1);\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-remove-nth-node-from-end"},{"type":"Post","slug":"leetcode-reverse-bits","title":"[Leetcode] 190. Reverse Bits","description":"Reverse bits of a given 32 bits unsigned integer.","publishedAt":"2023-06-09T00:00:00.000Z","tags":["Leetcode","algorithm","bit manipulation","easy"],"body":"const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(l){const r={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",ul:\"ul\",...l.components};return i(n,{children:[i(r.h2,{id:\"題目敘述\",children:[e(r.a,{className:\"anchor\",href:\"#題目敘述\",children:e(r.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",e(r.p,{children:\"Reverse bits of a given 32 bits unsigned integer.\"}),\"\\n\",i(r.h3,{id:\"example-1\",children:[e(r.a,{className:\"anchor\",href:\"#example-1\",children:e(r.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(r.pre,{children:e(r.code,{children:\"Input: n = 00000010100101000001111010011100\\nOutput: 964176192 (00111001011110000010100101000000)\\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\\n\"})}),\"\\n\",i(r.h3,{id:\"example-2\",children:[e(r.a,{className:\"anchor\",href:\"#example-2\",children:e(r.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(r.pre,{children:e(r.code,{children:\"Input: n = 11111111111111111111111111111101\\nOutput: 3221225471 (10111111111111111111111111111111)\\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\\n\"})}),\"\\n\",i(r.h3,{id:\"限制\",children:[e(r.a,{className:\"anchor\",href:\"#限制\",children:e(r.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:e(r.code,{children:\"The input must be a binary string of length 32\"})}),\"\\n\"]}),\"\\n\",i(r.h2,{id:\"解題思路\",children:[e(r.a,{className:\"anchor\",href:\"#解題思路\",children:e(r.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",e(r.p,{children:\"因為他要做的是把數字轉成二進制時的表達法顛倒過來（第 1 位跟第 32 位交換，第 2 為跟第 31 位交換...），\"}),\"\\n\",e(r.p,{children:\"所以最重要的事情就是我們要可以知道原始數字轉成二進制的每一位數是 1 還是 0，之後把他放到相應的位數裡面。\"}),\"\\n\",i(r.h2,{id:\"解題步驟\",children:[e(r.a,{className:\"anchor\",href:\"#解題步驟\",children:e(r.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"宣告一個 variable result = 0（可以把他想像是 32 位全部都是 0 的二進制數字）\"}),\"\\n\",i(r.li,{children:[\"利用迴圈對原始數字從第一位開始的每一個位數進行以下動作：\",\"\\n\",i(r.ol,{children:[\"\\n\",e(r.li,{children:\"把要比對的位數不停右移直到他變成第 1 位\"}),\"\\n\",e(r.li,{children:\"把第 1 位和 1 做 &，判斷他是 1 或是 0。（0 & 1 = 0, 1 & 1 = 1，所以進行 & 1 的操作就可以知道該位數是 0 還是 1）\"}),\"\\n\",e(r.li,{children:\"把這個 1 或是 0 放到 result 相對應的格子裡面（因為 1 跟 0 都是在第一位數，所以需要往左移到對的地方）\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",e(r.li,{children:\"回傳 result\"}),\"\\n\"]}),\"\\n\",i(r.h2,{id:\"java-解法\",children:[e(r.a,{className:\"anchor\",href:\"#java-解法\",children:e(r.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(r.pre,{children:e(r.code,{className:\"language-java\",children:\"public class Solution {\\n    // you need treat n as an unsigned value\\n    public int reverseBits(int n) {\\n        int result = 0;\\n\\n        for (int i = 0; i < 32; i ++) {\\n            int bit = (n >> i) & 1;\\n            result += (bit << 31 - i);\\n        }\\n\\n        return result;\\n    }\\n}\\n\"})}),\"\\n\",i(r.h3,{id:\"complexity\",children:[e(r.a,{className:\"anchor\",href:\"#complexity\",children:e(r.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Time Complexity: O(1);\"}),\"\\n\",e(r.li,{children:\"Space Complexity: O(1);\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-reverse-bits"},{"type":"Post","slug":"leetcode-reverse-linked-list-2","title":"[Leetcode] 92. Reverse Linked List II","description":"Reverse the nodes of the list from position left to position right, and return the reversed list.","publishedAt":"2023-09-28T00:00:00.000Z","tags":["Leetcode","algorithm","linked list","medium","English"],"body":"const{Fragment:e,jsx:n,jsxs:i}=arguments[0];function _createMdxContent(t){const r={a:\"a\",br:\"br\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",span:\"span\",ul:\"ul\",...t.components},{Image:l}=r;return l||function(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),i(e,{children:[i(r.h2,{id:\"description\",children:[n(r.a,{className:\"anchor\",href:\"#description\",children:n(r.span,{className:\"icon icon-link\"})}),\"Description\"]}),\"\\n\",i(r.p,{children:[\"Given the \",n(r.code,{children:\"head\"}),\" of a singly linked list and two integers \",n(r.code,{children:\"left\"}),\" and \",n(r.code,{children:\"right\"}),\" where \",n(r.code,{children:\"left <= right\"}),\", reverse the nodes of the list from position \",n(r.code,{children:\"left\"}),\" to position \",n(r.code,{children:\"right\"}),\", and return the reversed list.\"]}),\"\\n\",i(r.h3,{id:\"example-1\",children:[n(r.a,{className:\"anchor\",href:\"#example-1\",children:n(r.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",n(l,{src:\"/blog/leetcode/reverse-linked-list-2/example1.jpeg\",alt:\"example1\"}),\"\\n\",n(r.pre,{children:n(r.code,{children:\"Input: head = [1,2,3,4,5], left = 2, right = 4\\nOutput: [1,4,3,2,5]\\n\"})}),\"\\n\",i(r.h3,{id:\"example-2\",children:[n(r.a,{className:\"anchor\",href:\"#example-2\",children:n(r.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",n(r.pre,{children:n(r.code,{children:\"Input: head = [5], left = 1, right = 1\\nOutput: [5]\\n\"})}),\"\\n\",i(r.h3,{id:\"constraints\",children:[n(r.a,{className:\"anchor\",href:\"#constraints\",children:n(r.span,{className:\"icon icon-link\"})}),\"Constraints:\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[\"The number of nodes in the list is \",n(r.code,{children:\"n\"}),\".\"]}),\"\\n\",n(r.li,{children:n(r.code,{children:\"1 <= n <= 500\"})}),\"\\n\",n(r.li,{children:n(r.code,{children:\"-500 <= Node.val <= 500\"})}),\"\\n\",n(r.li,{children:n(r.code,{children:\"1 <= left <= right <= n\"})}),\"\\n\"]}),\"\\n\",i(r.h2,{id:\"thoughts\",children:[n(r.a,{className:\"anchor\",href:\"#thoughts\",children:n(r.span,{className:\"icon icon-link\"})}),\"Thoughts：\"]}),\"\\n\",n(r.p,{children:'This problem shares similarities with Leetcode\\'s \"206. Reverse Linked List,\" However, this problem comes with an additional condition: we are tasked with reversing nodes only within a specified range.'}),\"\\n\",n(r.p,{children:\"To solve this challenge efficiently, we can divide it into two main tasks:\"}),\"\\n\",i(r.ul,{children:[\"\\n\",n(r.li,{children:\"Locate the starting node within the range.\"}),\"\\n\",n(r.li,{children:\"Reverse the linked list within the specified range.\"}),\"\\n\"]}),\"\\n\",n(r.p,{children:\"By accomplishing these steps with precision, we can effectively solve the problem, all while adhering to a concise and structured approach.\"}),\"\\n\",i(r.h3,{id:\"codes\",children:[n(r.a,{className:\"anchor\",href:\"#codes\",children:n(r.span,{className:\"icon icon-link\"})}),\"Codes\"]}),\"\\n\",n(r.pre,{children:n(r.code,{className:\"language-python\",children:\"class Solution:\\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\\n        if not head or left == right:\\n            return head\\n\\n        # Create a dummy node to handle the edge case of start reversing from the first node\\n        dummy = ListNode(0, head)\\n        prev = dummy\\n\\n        # move the pointer to the starting point\\n        for _ in range(left - 1):\\n            prev = prev.next\\n\\n        # Initialize 'current' to the first node to reverse\\n        # (will link to the remaining part)\\n        current = prev.next\\n\\n        # reverse the list between left and right\\n        for _ in range(right - left):\\n            # Store the next node to avoid losing the reference\\n            next_node = current.next\\n\\n            # Reverse the direction of the current node\\n            current.next = next_node.next\\n\\n            # Link the next_node to the remaining reversed part\\n            next_node.next = prev.next\\n\\n            # Update 'prev' to include the reversed node\\n            prev.next = next_node\\n\\n        return dummy.next\\n\"})}),\"\\n\",i(r.h3,{id:\"complexity\",children:[n(r.a,{className:\"anchor\",href:\"#complexity\",children:n(r.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[\"Time Complexity: O(n);\",n(r.br,{}),\"\\n\",\"Only traverse the linked list for once\"]}),\"\\n\",i(r.li,{children:[\"Space Complexity: O(1);\",n(r.br,{}),\"\\n\",\"Only use 3 variables\"]}),\"\\n\"]})]})}return{default:function(e={}){const{wrapper:i}=e.components||{};return i?n(i,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/leetcode-reverse-linked-list-2"},{"type":"Post","slug":"leetcode-reverse-linked-list","title":"[Leetcode] 206. Reverse Linked List","description":"Given the head of a singly linked list, reverse the list, and return the reversed list.","publishedAt":"2023-06-27T00:00:00.000Z","tags":["Leetcode","algorithm","linked list","easy"],"body":"const{Fragment:e,jsx:n,jsxs:r}=arguments[0];function _createMdxContent(c){const l={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",ul:\"ul\",...c.components},{Image:i}=l;return i||function(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),r(e,{children:[r(l.h2,{id:\"題目敘述\",children:[n(l.a,{className:\"anchor\",href:\"#題目敘述\",children:n(l.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",r(l.p,{children:[\"Given the \",n(l.code,{children:\"head\"}),\" of a singly linked list, reverse the list, and return the reversed list.\"]}),\"\\n\",r(l.h3,{id:\"example-1\",children:[n(l.a,{className:\"anchor\",href:\"#example-1\",children:n(l.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",n(i,{src:\"/blog/leetcode/reverse-linked-list/example1.jpg\",alt:\"example1\"}),\"\\n\",n(l.pre,{children:n(l.code,{children:\"Input: head = [1,2,3,4,5]\\nOutput: [5,4,3,2,1]\\n\"})}),\"\\n\",r(l.h3,{id:\"example-2\",children:[n(l.a,{className:\"anchor\",href:\"#example-2\",children:n(l.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",n(i,{src:\"/blog/leetcode/reverse-linked-list/example2.jpeg\",alt:\"example1\",height:240,width:240}),\"\\n\",n(l.pre,{children:n(l.code,{children:\"Input: head = [1,2]\\nOutput: [2,1]\\n\"})}),\"\\n\",r(l.h3,{id:\"example-3\",children:[n(l.a,{className:\"anchor\",href:\"#example-3\",children:n(l.span,{className:\"icon icon-link\"})}),\"Example 3.\"]}),\"\\n\",n(l.pre,{children:n(l.code,{children:\"Input: head = []\\nOutput: []\\n\"})}),\"\\n\",r(l.h3,{id:\"限制\",children:[n(l.a,{className:\"anchor\",href:\"#限制\",children:n(l.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",r(l.ul,{children:[\"\\n\",n(l.li,{children:n(l.code,{children:\"The number of nodes in the list is the range [0, 5000].\"})}),\"\\n\",n(l.li,{children:n(l.code,{children:\"-5000 <= Node.val <= 5000\"})}),\"\\n\"]}),\"\\n\",r(l.h2,{id:\"解題思路\",children:[n(l.a,{className:\"anchor\",href:\"#解題思路\",children:n(l.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",n(l.p,{children:\"核心思路就是要從後往前建立一個 Linked list，實際怎麼操作的方式就是：\"}),\"\\n\",r(l.p,{children:[\"就是建立一個兩個 pointer 一個是 \",n(l.code,{children:\"previous\"}),\" 指向上一個動作的 node，另外一個是 \",n(l.code,{children:\"current\"}),\" 指向的是這次要把他排在 previous 前面的 node，最後當 \",n(l.code,{children:\"current == null\"}),\" 代表原本的 linked list 到底了，所以就 \",n(l.code,{children:\"return previous\"})]}),\"\\n\",r(l.h2,{id:\"解題步驟\",children:[n(l.a,{className:\"anchor\",href:\"#解題步驟\",children:n(l.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",r(l.ol,{children:[\"\\n\",r(l.li,{children:[\"宣告變數 \",n(l.code,{children:\"previous\"}),\"，因為是第一次操作所以沒有上一次操作所以 \",n(l.code,{children:\"previous = null\"}),\"，以及 \",n(l.code,{children:\"current\"}),\"，因為第一個目標是 \",n(l.code,{children:\"head\"}),\" 所以 \",n(l.code,{children:\"current = head\"})]}),\"\\n\",r(l.li,{children:[\"在目標是 null 之前執行迴圈：\",\"\\n\",r(l.ol,{children:[\"\\n\",r(l.li,{children:[\"宣告變數 \",n(l.code,{children:\"nextTemp\"}),\" 暫存 \",n(l.code,{children:\"current.next\"})]}),\"\\n\",r(l.li,{children:[\"把 previous 接在 current 後面，所以 \",n(l.code,{children:\"current.next = previous\"})]}),\"\\n\",r(l.li,{children:[\"完成這一次操作準備往下一次操作前進，所以這次操作變成下一次操作的上一次 \",n(l.code,{children:\"previous = current\"}),\"，然後目標變成原本目標的下一個所以 \",n(l.code,{children:\"current = nextTemp\"})]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",r(l.li,{children:[\"當 \",n(l.code,{children:\"current == null\"}),\" 代表原始的 linked list 所有 node 都跑完了，所以就 return previous\"]}),\"\\n\"]}),\"\\n\",r(l.h2,{id:\"java-解法\",children:[n(l.a,{className:\"anchor\",href:\"#java-解法\",children:n(l.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",n(l.pre,{children:n(l.code,{className:\"language-java\",children:\"class Solution {\\n    public ListNode reverseList(ListNode head) {\\n        ListNode previous = null;\\n        ListNode current = head;\\n\\n        while (current != null) {\\n            ListNode nextTemp = current.next;\\n\\n            current.next = previous;\\n            previous = current;\\n            current = nextTemp;\\n        }\\n\\n        return previous;\\n    }\\n}\\n\"})}),\"\\n\",r(l.h3,{id:\"complexity\",children:[n(l.a,{className:\"anchor\",href:\"#complexity\",children:n(l.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",r(l.ul,{children:[\"\\n\",n(l.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",n(l.li,{children:\"Space Complexity: O(1);\"}),\"\\n\"]})]})}return{default:function(e={}){const{wrapper:r}=e.components||{};return r?n(r,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/leetcode-reverse-linked-list"},{"type":"Post","slug":"leetcode-unique-path","title":"[Leetcode] 62. Unique Paths","description":"There is a robot on an m x n grid. The robot is initially located at the top-left corner.","publishedAt":"2023-09-03T00:00:00.000Z","tags":["Leetcode","algorithm","dynamic programming","medium"],"body":"const{Fragment:n,jsx:e,jsxs:T}=arguments[0];function _createMdxContent(a){const Q={a:\"a\",code:\"code\",defs:\"defs\",g:\"g\",h2:\"h2\",h3:\"h3\",li:\"li\",\"mjx-container\":\"mjx-container\",p:\"p\",path:\"path\",pre:\"pre\",span:\"span\",style:\"style\",svg:\"svg\",ul:\"ul\",use:\"use\",...a.components},l=Q[\"mjx-container\"];return T(n,{children:[T(Q.h2,{id:\"題目敘述\",children:[e(Q.a,{className:\"anchor\",href:\"#題目敘述\",children:e(Q.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",T(Q.p,{children:[\"There is a robot on an \",e(Q.code,{children:\"m x n\"}),\" grid. The robot is initially located at the top-left corner (i.e., \",e(Q.code,{children:\"grid[0][0]\"}),\"). The robot tries to move to the bottom-right corner (i.e., \",e(Q.code,{children:\"grid[m - 1][n - 1]\"}),\"). The robot can only move either down or right at any point in time.\"]}),\"\\n\",T(Q.p,{children:[\"Given the two integers \",e(Q.code,{children:\"m\"}),\" and \",e(Q.code,{children:\"n\"}),\", return the number of possible unique paths that the robot can take to reach the bottom-right corner.\"]}),\"\\n\",T(Q.p,{children:[\"The test cases are generated so that the answer will be less than or equal to \",e(Q.code,{className:\"language-math math-inline\",children:e(l,{className:\"MathJax\",jax:\"SVG\",children:T(Q.svg,{style:{verticalAlign:\"-0.05ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"6.518ex\",height:\"2.005ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -864 2881 886\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[T(Q.defs,{children:[e(Q.path,{id:\"MJX-1-TEX-N-32\",d:\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"}),e(Q.path,{id:\"MJX-1-TEX-N-2217\",d:\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"}),e(Q.path,{id:\"MJX-1-TEX-N-31\",d:\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"}),e(Q.path,{id:\"MJX-1-TEX-N-30\",d:\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"}),e(Q.path,{id:\"MJX-1-TEX-N-39\",d:\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"})]}),e(Q.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:T(Q.g,{\"data-mml-node\":\"math\",children:[e(Q.g,{\"data-mml-node\":\"mn\",children:e(Q.use,{\"data-c\":\"32\",xlinkHref:\"#MJX-1-TEX-N-32\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(722.2,0)\",children:e(Q.use,{\"data-c\":\"2217\",xlinkHref:\"#MJX-1-TEX-N-2217\"})}),T(Q.g,{\"data-mml-node\":\"msup\",transform:\"translate(1444.4,0)\",children:[T(Q.g,{\"data-mml-node\":\"mn\",children:[e(Q.use,{\"data-c\":\"31\",xlinkHref:\"#MJX-1-TEX-N-31\"}),e(Q.use,{\"data-c\":\"30\",xlinkHref:\"#MJX-1-TEX-N-30\",transform:\"translate(500,0)\"})]}),e(Q.g,{\"data-mml-node\":\"mn\",transform:\"translate(1033,393.1) scale(0.707)\",children:e(Q.use,{\"data-c\":\"39\",xlinkHref:\"#MJX-1-TEX-N-39\"})})]})]})})]})})}),\".\"]}),\"\\n\",T(Q.h3,{id:\"example-1\",children:[e(Q.a,{className:\"anchor\",href:\"#example-1\",children:e(Q.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(Q.pre,{children:e(Q.code,{children:\"Input: m = 3, n = 2\\nOutput: 3\\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\\n1. Right -> Down -> Down\\n2. Down -> Down -> Right\\n3. Down -> Right -> Down\\n\"})}),\"\\n\",T(Q.h3,{id:\"example-2\",children:[e(Q.a,{className:\"anchor\",href:\"#example-2\",children:e(Q.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(Q.pre,{children:e(Q.code,{children:\"Input: m = 3, n = 7\\nOutput: 28\\n\"})}),\"\\n\",T(Q.h3,{id:\"限制\",children:[e(Q.a,{className:\"anchor\",href:\"#限制\",children:e(Q.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",T(Q.ul,{children:[\"\\n\",e(Q.li,{children:e(Q.code,{children:\"1 <= m, n <= 100\"})}),\"\\n\"]}),\"\\n\",T(Q.h2,{id:\"解題思路\",children:[e(Q.a,{className:\"anchor\",href:\"#解題思路\",children:e(Q.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",e(Q.p,{children:\"因為題目限制我們只能往右和往下走，所以我們可以推論出每一格通往終點的路徑數量都會是他的右邊那格以及下面那格的加總，因此我們要做的就是找出每一格右邊以及下面的格子的路徑，就可以得到最終的答案。\"}),\"\\n\",T(Q.h3,{id:\"1-暴力解法-time-limit-exceeded\",children:[e(Q.a,{className:\"anchor\",href:\"#1-暴力解法-time-limit-exceeded\",children:e(Q.span,{className:\"icon icon-link\"})}),\"1. 暴力解法 (Time Limit Exceeded)\"]}),\"\\n\",e(Q.p,{children:\"利用遞迴的方式去計算每一格的右邊以及下面格子總共有多少路徑\"}),\"\\n\",e(Q.pre,{children:e(Q.code,{className:\"language-java\",children:\"class Solution {\\n    private int maxRow;\\n    private int maxColumn;\\n\\n    public int uniquePaths(int m, int n) {\\n        this.maxRow = m - 1;\\n        this.maxColumn = n - 1;\\n\\n        return this.findPath(0, 0);\\n    }\\n\\n    public int findPath(int row, int column) {\\n        // 如果找的是最右下角的那一格，因為只有一種路徑所以回傳 1\\n        if (row == maxRow && column == maxColumn) return 1;\\n\\n        // 如果找的格子超出邊界，回傳 0\\n        if (row > maxRow || column > maxColumn) return 0;\\n\\n        // 回傳那一格的右邊和下面格子路徑數的加總\\n        return findPath(row, column + 1) + findPath(row + 1, column);\\n    }\\n}\\n\"})}),\"\\n\",T(Q.h3,{id:\"complexity\",children:[e(Q.a,{className:\"anchor\",href:\"#complexity\",children:e(Q.span,{className:\"icon icon-link\"})}),\"Complexity：\"]}),\"\\n\",T(Q.ul,{children:[\"\\n\",T(Q.li,{children:[\"Time Complexity：\",e(Q.code,{className:\"language-math math-inline\",children:e(l,{className:\"MathJax\",jax:\"SVG\",children:T(Q.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"9.704ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 4289.3 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[T(Q.defs,{children:[e(Q.path,{id:\"MJX-2-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),e(Q.path,{id:\"MJX-2-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),e(Q.path,{id:\"MJX-2-TEX-N-32\",d:\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"}),e(Q.path,{id:\"MJX-2-TEX-I-1D45A\",d:\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-2-TEX-N-2217\",d:\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"}),e(Q.path,{id:\"MJX-2-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-2-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),e(Q.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:T(Q.g,{\"data-mml-node\":\"math\",children:[e(Q.g,{\"data-mml-node\":\"mi\",children:e(Q.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-2-TEX-I-1D442\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:e(Q.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-2-TEX-N-28\"})}),T(Q.g,{\"data-mml-node\":\"msup\",transform:\"translate(1152,0)\",children:[e(Q.g,{\"data-mml-node\":\"mn\",children:e(Q.use,{\"data-c\":\"32\",xlinkHref:\"#MJX-2-TEX-N-32\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(533,363) scale(0.707)\",children:e(Q.use,{\"data-c\":\"1D45A\",xlinkHref:\"#MJX-2-TEX-I-1D45A\"})})]}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(2578.1,0)\",children:e(Q.use,{\"data-c\":\"2217\",xlinkHref:\"#MJX-2-TEX-N-2217\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(3300.3,0)\",children:e(Q.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-2-TEX-I-1D45B\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(3900.3,0)\",children:e(Q.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-2-TEX-N-29\"})})]})})]})})})]}),\"\\n\",T(Q.li,{children:[\"Space Complexity: \",e(Q.code,{className:\"language-math math-inline\",children:e(l,{className:\"MathJax\",jax:\"SVG\",children:T(Q.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"9.596ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 4241.4 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[T(Q.defs,{children:[e(Q.path,{id:\"MJX-3-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),e(Q.path,{id:\"MJX-3-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),e(Q.path,{id:\"MJX-3-TEX-I-1D45A\",d:\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-3-TEX-N-2B\",d:\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"}),e(Q.path,{id:\"MJX-3-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-3-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),e(Q.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:T(Q.g,{\"data-mml-node\":\"math\",children:[e(Q.g,{\"data-mml-node\":\"mi\",children:e(Q.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-3-TEX-I-1D442\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:e(Q.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-3-TEX-N-28\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(1152,0)\",children:e(Q.use,{\"data-c\":\"1D45A\",xlinkHref:\"#MJX-3-TEX-I-1D45A\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(2252.2,0)\",children:e(Q.use,{\"data-c\":\"2B\",xlinkHref:\"#MJX-3-TEX-N-2B\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(3252.4,0)\",children:e(Q.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-3-TEX-I-1D45B\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(3852.4,0)\",children:e(Q.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-3-TEX-N-29\"})})]})})]})})})]}),\"\\n\"]}),\"\\n\",T(Q.h3,{id:\"2-d-dynamic-programming\",children:[e(Q.a,{className:\"anchor\",href:\"#2-d-dynamic-programming\",children:e(Q.span,{className:\"icon icon-link\"})}),\"2-D Dynamic programming\"]}),\"\\n\",e(Q.p,{children:\"從上面的時間複雜度來看就可以知道暴力解法是一個很差的解法，因為他會需要 2 的 m*n 次方的時間才得到答案，今天當我們的 m * n 變大的時候，就會非常的浪費時間。\"}),\"\\n\",T(Q.p,{children:[\"但同時觀察上面的解法我們可以發現其實我們一直在重複計算相同的格子！所以為了避免這樣的重複計算，我們就會利用到 \",e(Q.code,{children:\"Dynamic Programming\"}),\" 的概念來把曾經計算過的格子儲存下來，這樣下次再遇到就不用重算啦！\"]}),\"\\n\",e(Q.p,{children:\"另外我們可以發現唯一可以確定有多少路徑的格子只有最右下角那一格！其他格子的路徑其實都會隨的 m 跟 n 的改變而有所不同！\\n所以這個利用 Dynamic Programming 最好的方法其實是從右下往左上累加路徑的數量，而不是從左上朝右下找答案\"}),\"\\n\",e(Q.pre,{children:e(Q.code,{className:\"language-java\",children:\"class Solution {\\n    public int uniquePaths(int m, int n) {\\n        // 宣告一個 m * n 的 2-D array 來存放每一格的路徑數量\\n        int[][] dp = new int[m][n];\\n\\n        // 從最右下角開始往左上 loop 過每一格個子\\n        for (int row = m - 1; row >= 0; row --) {\\n            for (int column = n - 1; column >= 0; column --) {\\n                // 把最右下角的那格答案設為 1\\n                if (row == m - 1 && column == n - 1) dp[row][column] = 1;\\n\\n                // 如果是最下行，因為沒有下面的格子，所以總路徑數 = 右邊個子的路徑數\\n                else if (row == m - 1) dp[row][column] = dp[row][column + 1];\\n\\n                // 如果是最右行，因為沒有右邊格子，所以總路徑數 = 下面格子的路徑數\\n                else if (column == n - 1) dp[row][column] = dp[row + 1][column];\\n\\n                // 如果不是以上條件就是正常格子，總路徑數 = 右邊格子路徑數 + 下面格子路徑數\\n                else dp[row][column] = dp[row][column + 1] + dp[row + 1][column];\\n            }\\n        }\\n\\n        // 回傳 [0][0] 也就是起點的總路徑數\\n        return dp[0][0];\\n    }\\n}\\n\"})}),\"\\n\",T(Q.h3,{id:\"complexity-1\",children:[e(Q.a,{className:\"anchor\",href:\"#complexity-1\",children:e(Q.span,{className:\"icon icon-link\"})}),\"Complexity：\"]}),\"\\n\",T(Q.ul,{children:[\"\\n\",T(Q.li,{children:[\"Time Complexity：\",e(Q.code,{className:\"language-math math-inline\",children:e(l,{className:\"MathJax\",jax:\"SVG\",children:T(Q.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"8.967ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 3963.4 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[T(Q.defs,{children:[e(Q.path,{id:\"MJX-4-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),e(Q.path,{id:\"MJX-4-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),e(Q.path,{id:\"MJX-4-TEX-I-1D45A\",d:\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-4-TEX-N-2217\",d:\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"}),e(Q.path,{id:\"MJX-4-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-4-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),e(Q.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:T(Q.g,{\"data-mml-node\":\"math\",children:[e(Q.g,{\"data-mml-node\":\"mi\",children:e(Q.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-4-TEX-I-1D442\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:e(Q.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-4-TEX-N-28\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(1152,0)\",children:e(Q.use,{\"data-c\":\"1D45A\",xlinkHref:\"#MJX-4-TEX-I-1D45A\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(2252.2,0)\",children:e(Q.use,{\"data-c\":\"2217\",xlinkHref:\"#MJX-4-TEX-N-2217\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(2974.4,0)\",children:e(Q.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-4-TEX-I-1D45B\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(3574.4,0)\",children:e(Q.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-4-TEX-N-29\"})})]})})]})})})]}),\"\\n\",T(Q.li,{children:[\"Space Complexity: \",e(Q.code,{className:\"language-math math-inline\",children:e(l,{className:\"MathJax\",jax:\"SVG\",children:T(Q.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"8.967ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 3963.4 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[T(Q.defs,{children:[e(Q.path,{id:\"MJX-5-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),e(Q.path,{id:\"MJX-5-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),e(Q.path,{id:\"MJX-5-TEX-I-1D45A\",d:\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-5-TEX-N-2217\",d:\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"}),e(Q.path,{id:\"MJX-5-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-5-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),e(Q.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:T(Q.g,{\"data-mml-node\":\"math\",children:[e(Q.g,{\"data-mml-node\":\"mi\",children:e(Q.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-5-TEX-I-1D442\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:e(Q.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-5-TEX-N-28\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(1152,0)\",children:e(Q.use,{\"data-c\":\"1D45A\",xlinkHref:\"#MJX-5-TEX-I-1D45A\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(2252.2,0)\",children:e(Q.use,{\"data-c\":\"2217\",xlinkHref:\"#MJX-5-TEX-N-2217\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(2974.4,0)\",children:e(Q.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-5-TEX-I-1D45B\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(3574.4,0)\",children:e(Q.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-5-TEX-N-29\"})})]})})]})})})]}),\"\\n\"]}),\"\\n\",T(Q.h3,{id:\"3-1-d-dynamic-programming\",children:[e(Q.a,{className:\"anchor\",href:\"#3-1-d-dynamic-programming\",children:e(Q.span,{className:\"icon icon-link\"})}),\"3. 1-D Dynamic programming\"]}),\"\\n\",e(Q.p,{children:\"上面的 2-D 的解法其實已經算是把時間複雜度最佳化了！所以要再優化就要朝空間複雜度著手。\"}),\"\\n\",e(Q.p,{children:\"如果我們把上面解法的 2-D array 印出來看的話，會發現一個規律，就是最右邊那一行全部都是 1，而且只有在計算上面一行的時候才會用到下面一行的路徑數。\"}),\"\\n\",e(Q.p,{children:\"因為上面觀察到的特性，我們可以發現到其實只需要一個 1-D 的 array 就可以記錄我們所需要的資料了！\"}),\"\\n\",e(Q.p,{children:\"實際的作法就是因為我們從下而上，從左而右的遍歷這個 grid；而我們又知道最右邊的路徑數量都會等於 1，所以當我們要算這一格的路徑總數時，我們只需要把目前的 index 的路徑數（代表下面那格的路徑數），以及下一個 index 的路徑數（代表右邊那格的路徑數）相加就可以得到了！\\n至於為什麼右邊那格會等於這一行的數，而目前所在的 index 還存有上一行的路徑數，就是因為我們是從右到左，所以在這行當中，目前 index 的右邊就會是更新過的也就是目前這一行的，而 index 左邊包含 index 本人的路徑就會是上一行的。\"}),\"\\n\",e(Q.pre,{children:e(Q.code,{className:\"language-java\",children:\"class Solution {\\n    public int uniquePaths(int m, int n) {\\n        int[] dp = new int[n];\\n\\n        // 把已知的最右行都是 1 加到 array 中\\n        dp[n - 1] = 1;\\n\\n        for (int row = m - 1; row >= 0; row --) {\\n            // 因為最右行都會是 1，所以從 n - 2 開始遍歷\\n            for (int column = n - 2; column >= 0; column --) {\\n                /*\\n                    因為是從右到左且從下到上遍歷，所以下 + 右可以看成\\n                    array 自己 index 的數字（看成下一格的路徑數）\\n                    + array 右邊一格的路徑數（看作是右邊那格的路徑數）\\n                */\\n                dp[column] += dp[column + 1];\\n            }\\n        }\\n\\n        return dp[0];\\n    }\\n}\\n\"})}),\"\\n\",T(Q.h3,{id:\"complexity-2\",children:[e(Q.a,{className:\"anchor\",href:\"#complexity-2\",children:e(Q.span,{className:\"icon icon-link\"})}),\"Complexity：\"]}),\"\\n\",T(Q.ul,{children:[\"\\n\",T(Q.li,{children:[\"Time Complexity：\",e(Q.code,{className:\"language-math math-inline\",children:e(l,{className:\"MathJax\",jax:\"SVG\",children:T(Q.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"8.967ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 3963.4 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[T(Q.defs,{children:[e(Q.path,{id:\"MJX-6-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),e(Q.path,{id:\"MJX-6-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),e(Q.path,{id:\"MJX-6-TEX-I-1D45A\",d:\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-6-TEX-N-2217\",d:\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"}),e(Q.path,{id:\"MJX-6-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-6-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),e(Q.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:T(Q.g,{\"data-mml-node\":\"math\",children:[e(Q.g,{\"data-mml-node\":\"mi\",children:e(Q.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-6-TEX-I-1D442\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:e(Q.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-6-TEX-N-28\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(1152,0)\",children:e(Q.use,{\"data-c\":\"1D45A\",xlinkHref:\"#MJX-6-TEX-I-1D45A\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(2252.2,0)\",children:e(Q.use,{\"data-c\":\"2217\",xlinkHref:\"#MJX-6-TEX-N-2217\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(2974.4,0)\",children:e(Q.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-6-TEX-I-1D45B\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(3574.4,0)\",children:e(Q.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-6-TEX-N-29\"})})]})})]})})})]}),\"\\n\",T(Q.li,{children:[\"Space Complexity: \",e(Q.code,{className:\"language-math math-inline\",children:e(l,{className:\"MathJax\",jax:\"SVG\",children:T(Q.svg,{style:{verticalAlign:\"-0.566ex\"},xmlns:\"http://www.w3.org/2000/svg\",width:\"4.844ex\",height:\"2.262ex\",role:\"img\",focusable:\"false\",viewBox:\"0 -750 2141 1000\",xmlnsXlink:\"http://www.w3.org/1999/xlink\",children:[T(Q.defs,{children:[e(Q.path,{id:\"MJX-7-TEX-I-1D442\",d:\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"}),e(Q.path,{id:\"MJX-7-TEX-N-28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}),e(Q.path,{id:\"MJX-7-TEX-I-1D45B\",d:\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"}),e(Q.path,{id:\"MJX-7-TEX-N-29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"})]}),e(Q.g,{stroke:\"currentColor\",fill:\"currentColor\",strokeWidth:\"0\",transform:\"scale(1,-1)\",children:T(Q.g,{\"data-mml-node\":\"math\",children:[e(Q.g,{\"data-mml-node\":\"mi\",children:e(Q.use,{\"data-c\":\"1D442\",xlinkHref:\"#MJX-7-TEX-I-1D442\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(763,0)\",children:e(Q.use,{\"data-c\":\"28\",xlinkHref:\"#MJX-7-TEX-N-28\"})}),e(Q.g,{\"data-mml-node\":\"mi\",transform:\"translate(1152,0)\",children:e(Q.use,{\"data-c\":\"1D45B\",xlinkHref:\"#MJX-7-TEX-I-1D45B\"})}),e(Q.g,{\"data-mml-node\":\"mo\",transform:\"translate(1752,0)\",children:e(Q.use,{\"data-c\":\"29\",xlinkHref:\"#MJX-7-TEX-N-29\"})})]})})]})})})]}),\"\\n\"]}),e(Q.style,{children:'\\nmjx-container[jax=\"SVG\"] {\\n  direction: ltr;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg {\\n  overflow: visible;\\n  min-height: 1px;\\n  min-width: 1px;\\n}\\n\\nmjx-container[jax=\"SVG\"] > svg a {\\n  fill: blue;\\n  stroke: blue;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"] {\\n  display: block;\\n  text-align: center;\\n  margin: 1em 0;\\n}\\n\\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\\n  display: flex;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\\n  text-align: left;\\n}\\n\\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\\n  text-align: right;\\n}\\n\\ng[data-mml-node=\"merror\"] > g {\\n  fill: red;\\n  stroke: red;\\n}\\n\\ng[data-mml-node=\"merror\"] > rect[data-background] {\\n  fill: yellow;\\n  stroke: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\\n  stroke-width: 70px;\\n  fill: none;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\\n  stroke-dasharray: 140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\\n  stroke-linecap: round;\\n  stroke-dasharray: 0,140;\\n}\\n\\ng[data-mml-node=\"mtable\"] > g > svg {\\n  overflow: visible;\\n}\\n\\n[jax=\"SVG\"] mjx-tool {\\n  display: inline-block;\\n  position: relative;\\n  width: 0;\\n  height: 0;\\n}\\n\\n[jax=\"SVG\"] mjx-tool > mjx-tip {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n}\\n\\nmjx-tool > mjx-tip {\\n  display: inline-block;\\n  padding: .2em;\\n  border: 1px solid #888;\\n  font-size: 70%;\\n  background-color: #F8F8F8;\\n  color: black;\\n  box-shadow: 2px 2px 5px #AAAAAA;\\n}\\n\\ng[data-mml-node=\"maction\"][data-toggle] {\\n  cursor: pointer;\\n}\\n\\nmjx-status {\\n  display: block;\\n  position: fixed;\\n  left: 1em;\\n  bottom: 1em;\\n  min-width: 25%;\\n  padding: .2em .4em;\\n  border: 1px solid #888;\\n  font-size: 90%;\\n  background-color: #F8F8F8;\\n  color: black;\\n}\\n\\nforeignObject[data-mjx-xml] {\\n  font-family: initial;\\n  line-height: normal;\\n  overflow: visible;\\n}\\n\\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\\n  stroke-width: 3;\\n}\\n'})]})}return{default:function(n={}){const{wrapper:T}=n.components||{};return T?e(T,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-unique-path"},{"type":"Post","slug":"leetcode-valid-sudoku","title":"[Leetcode] 36. Valid Sudoku","description":"Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated","publishedAt":"2023-07-20T00:00:00.000Z","tags":["Leetcode","algorithm","hash table","medium"],"body":"const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(l){const a={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...l.components},{Image:c}=a;return c||function(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),i(n,{children:[i(a.h2,{id:\"題目敘述\",children:[e(a.a,{className:\"anchor\",href:\"#題目敘述\",children:e(a.span,{className:\"icon icon-link\"})}),\"題目敘述\"]}),\"\\n\",i(a.p,{children:[\"Determine if a \",e(a.code,{children:\"9 x 9\"}),\" Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\"]}),\"\\n\",i(a.ul,{children:[\"\\n\",i(a.li,{children:[\"Each row must contain the digits \",e(a.code,{children:\"1-9\"}),\" without repetition.\"]}),\"\\n\",i(a.li,{children:[\"Each column must contain the digits \",e(a.code,{children:\"1-9\"}),\" without repetition.\"]}),\"\\n\",i(a.li,{children:[\"Each of the nine \",e(a.code,{children:\"3 x 3\"}),\" sub-boxes of the grid must contain the digits \",e(a.code,{children:\"1-9\"}),\" without repetition.\"]}),\"\\n\"]}),\"\\n\",i(a.h3,{id:\"note\",children:[e(a.a,{className:\"anchor\",href:\"#note\",children:e(a.span,{className:\"icon icon-link\"})}),\"Note:\"]}),\"\\n\",i(a.ul,{children:[\"\\n\",e(a.li,{children:\"A Sudoku board (partially filled) could be valid but is not necessarily solvable.\"}),\"\\n\",e(a.li,{children:\"Only the filled cells need to be validated according to the mentioned rules.\"}),\"\\n\"]}),\"\\n\",i(a.h3,{id:\"example-1\",children:[e(a.a,{className:\"anchor\",href:\"#example-1\",children:e(a.span,{className:\"icon icon-link\"})}),\"Example 1.\"]}),\"\\n\",e(c,{src:\"/blog/leetcode/validate-sudoku/example1.webp\",alt:\"example1\",width:240,height:240}),\"\\n\",e(a.pre,{children:e(a.code,{children:'Input: board =\\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: true\\n'})}),\"\\n\",i(a.h3,{id:\"example-2\",children:[e(a.a,{className:\"anchor\",href:\"#example-2\",children:e(a.span,{className:\"icon icon-link\"})}),\"Example 2.\"]}),\"\\n\",e(a.pre,{children:e(a.code,{children:'Input: board =\\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: false\\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8\\'s in the top left 3x3 sub-box, it is invalid.\\n'})}),\"\\n\",i(a.h3,{id:\"限制\",children:[e(a.a,{className:\"anchor\",href:\"#限制\",children:e(a.span,{className:\"icon icon-link\"})}),\"限制:\"]}),\"\\n\",i(a.ul,{children:[\"\\n\",e(a.li,{children:e(a.code,{children:\"board.length == 9\"})}),\"\\n\",e(a.li,{children:e(a.code,{children:\"board[i].length == 9\"})}),\"\\n\",e(a.li,{children:e(a.code,{children:\"board[i][j] is a digit 1-9 or '.'.\"})}),\"\\n\"]}),\"\\n\",i(a.h2,{id:\"解題思路\",children:[e(a.a,{className:\"anchor\",href:\"#解題思路\",children:e(a.span,{className:\"icon icon-link\"})}),\"解題思路：\"]}),\"\\n\",e(a.p,{children:\"要檢查一個數獨裡面是否都是符合規範的方法就跟我們人在檢查的時候一樣。先檢查欄；之後檢查列；最後在看九宮格裡有沒有重複的。\"}),\"\\n\",i(a.p,{children:[\"所以這題就是要把每一欄每一列以及每一個九宮格和他們裡面存在的數字都當作一個 key-value pair 存在 \",e(a.strong,{children:\"Hash Map\"}),\" 裡面。\"]}),\"\\n\",e(a.p,{children:\"在遇到不是空格的數字就依序檢查 Hash Map 相對應的欄列裡面是否已經存在那個數字，如果已經存在就代表數獨是錯的。反之如果全部都沒有重複的話就代表數獨是正確的。\"}),\"\\n\",i(a.h2,{id:\"解題步驟\",children:[e(a.a,{className:\"anchor\",href:\"#解題步驟\",children:e(a.span,{className:\"icon icon-link\"})}),\"解題步驟：\"]}),\"\\n\",i(a.ol,{children:[\"\\n\",e(a.li,{children:\"宣告一個 Hash Map 用來存放每一欄、每一列、每一個九宮格出現過的數字\"}),\"\\n\",e(a.li,{children:\"把所有格子都檢查一次，如果是空的就跳過，不是空的就去檢查 Hash Map 裡面該欄、列、九宮格是否出現已經存在那個數字\"}),\"\\n\",i(a.li,{children:[\"如果已經存在代表數獨是錯的回傳 \",e(a.strong,{children:\"false\"}),\"，如果全部檢查都還沒有錯就代表數獨正確回傳 \",e(a.strong,{children:\"true\"})]}),\"\\n\"]}),\"\\n\",i(a.h2,{id:\"java-解法\",children:[e(a.a,{className:\"anchor\",href:\"#java-解法\",children:e(a.span,{className:\"icon icon-link\"})}),\"Java 解法\"]}),\"\\n\",e(a.pre,{children:e(a.code,{className:\"language-java\",children:'class Solution {\\n    private HashMap<String, ArrayList<Character>> existMap;\\n\\n    public boolean isValidSudoku(char[][] board) {\\n        this.existMap = new HashMap<>();\\n\\n        for (int i = 0; i < board.length; i ++) {\\n            for (int j = 0; j < board[i].length; j ++) {\\n                char value = board[i][j];\\n\\n                // Only check if the cell is not empty\\n                if (value == \\'.\\') continue;\\n\\n                // check if the value is already exist in the row and the column\\n                if (!this.checkRow(i, value)) return false;\\n                if (!this.checkColumn(j, value)) return false;\\n\\n                // get the index of the block and check if the value was exist inside the block\\n                int blockIndex = this.getBlockIndex(i, j);\\n                if (!this.checkBlock(blockIndex, value)) return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    private boolean checkRow(int row, char value) {\\n        String key = \"R\" + String.valueOf(row);\\n        return this.checkNotInMap(key, value);\\n    }\\n\\n    private boolean checkColumn(int column, char value) {\\n        String key = \"C\" + String.valueOf(column);\\n        return this.checkNotInMap(key, value);\\n    }\\n\\n    private boolean checkBlock(int block, char value) {\\n        String key = \"B\" + String.valueOf(block);\\n        return this.checkNotInMap(key, value);\\n    }\\n\\n    private boolean checkNotInMap(String key, char value) {\\n        // if the key exist check if the value is exist in the array\\n        if (this.existMap.containsKey(key)) {\\n            ArrayList<Character> numbers = this.existMap.get(key);\\n            if (numbers.contains(value)) return false;\\n            numbers.add(value);\\n        } else {\\n            // if the key isn\\'t exist, create the key-value pair\\n            ArrayList<Character> numbers = new ArrayList<>();\\n            numbers.add(value);\\n            existMap.put(key, numbers);\\n        }\\n\\n        return true;\\n    }\\n\\n    private int getBlockIndex(int row, int column) {\\n        int rowBlock = row / 3;\\n        int columnBlock = column / 3;\\n\\n        return rowBlock * 3 + columnBlock;\\n    }\\n}\\n'})}),\"\\n\",i(a.h3,{id:\"complexity\",children:[e(a.a,{className:\"anchor\",href:\"#complexity\",children:e(a.span,{className:\"icon icon-link\"})}),\"Complexity\"]}),\"\\n\",i(a.ul,{children:[\"\\n\",e(a.li,{children:\"Time Complexity: O(n);\"}),\"\\n\",e(a.li,{children:\"Space Complexity: O(n);\"}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/leetcode-valid-sudoku"},{"type":"Post","slug":"linux-command","title":"[Note] Cloud Computing Learning No.1 - Linux Command","description":"","publishedAt":"2024-10-21T00:00:00.000Z","tags":["Cloud Computing","note","Linux"],"body":"const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(l){const r={a:\"a\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",p:\"p\",span:\"span\",strong:\"strong\",ul:\"ul\",...l.components};return i(n,{children:[i(r.h2,{id:\"intro\",children:[e(r.a,{className:\"anchor\",href:\"#intro\",children:e(r.span,{className:\"icon icon-link\"})}),\"Intro\"]}),\"\\n\",e(r.p,{children:\"I am recently taking cloud computing course in my master's degree journey, and this is something professor taught in the first lecture. Let's take some note about interesting commands that I'm not familiar with.\"}),\"\\n\",i(r.h3,{id:\"network\",children:[e(r.a,{className:\"anchor\",href:\"#network\",children:e(r.span,{className:\"icon icon-link\"})}),\"Network\"]}),\"\\n\",i(r.h4,{id:\"scp-secure-copy\",children:[e(r.a,{className:\"anchor\",href:\"#scp-secure-copy\",children:e(r.span,{className:\"icon icon-link\"})}),\"SCP (Secure Copy)\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": SCP is used to securely copy files between networks and hosts.\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": scp user@src_host:/path user@remote_host:/path\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Use Case\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Securely tranfer data between local and remote machine\"}),\"\\n\",e(r.li,{children:\"Automaticaly backup\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"telnet\",children:[e(r.a,{className:\"anchor\",href:\"#telnet\",children:e(r.span,{className:\"icon icon-link\"})}),\"Telnet\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Telnet is a protocol used to connect to remote computer using TCP/IP network.\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": telnet [hostname][port]\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Use Case\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Access remote server (less secure than SSH)\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h3,{id:\"system-information\",children:[e(r.a,{className:\"anchor\",href:\"#system-information\",children:e(r.span,{className:\"icon icon-link\"})}),\"System Information\"]}),\"\\n\",i(r.h4,{id:\"df\",children:[e(r.a,{className:\"anchor\",href:\"#df\",children:e(r.span,{className:\"icon icon-link\"})}),\"df\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Display the amount of disk space available on file system.\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": df [options]\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Basic usage: df\"}),\"\\n\",e(r.li,{children:\"Human-readable format: df -h\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h3,{id:\"filters\",children:[e(r.a,{className:\"anchor\",href:\"#filters\",children:e(r.span,{className:\"icon icon-link\"})}),\"Filters\"]}),\"\\n\",i(r.h4,{id:\"more\",children:[e(r.a,{className:\"anchor\",href:\"#more\",children:e(r.span,{className:\"icon icon-link\"})}),\"more\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": View file content one page at a time\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": more [file...]\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Use Case\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Paging through long files or command outputs\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"less\",children:[e(r.a,{className:\"anchor\",href:\"#less\",children:e(r.span,{className:\"icon icon-link\"})}),\"less\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Similiar to more, but can move both forward and backward\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": less [file...]\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Use Case\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Interactive paging with advanced navigation features\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"head\",children:[e(r.a,{className:\"anchor\",href:\"#head\",children:e(r.span,{className:\"icon icon-link\"})}),\"head\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Outputs the first part of files\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": head [options] [file...]\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Display the first 10 lines: head logfile.txt\"}),\"\\n\",e(r.li,{children:\"Display the first 20 lines: head -n 20 logfile.txt\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Use Case\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Preview the beginning of files\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"head-1\",children:[e(r.a,{className:\"anchor\",href:\"#head-1\",children:e(r.span,{className:\"icon icon-link\"})}),\"head\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Outputs the last part of files\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": tail [options] [file...]\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Display the last 10 lines: tail logfile.txt\"}),\"\\n\",e(r.li,{children:\"Display the last 20 lines: tail -n 20 logfile.txt\"}),\"\\n\",e(r.li,{children:\"Following a file (live updates): tail -f logfile.txt\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Use Case\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Monitoring log files in real-time\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h3,{id:\"speical-characters\",children:[e(r.a,{className:\"anchor\",href:\"#speical-characters\",children:e(r.span,{className:\"icon icon-link\"})}),\"Speical Characters\"]}),\"\\n\",i(r.h4,{id:\"-pipe\",children:[e(r.a,{className:\"anchor\",href:\"#-pipe\",children:e(r.span,{className:\"icon icon-link\"})}),\"| (Pipe)\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Connects the output of one command to the input of another command.\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": command1 | command2\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Count lines in a file: cat file.txt | wc -l\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"-redirect-output\",children:[e(r.a,{className:\"anchor\",href:\"#-redirect-output\",children:e(r.span,{className:\"icon icon-link\"})}),\"> (Redirect Output)\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Redirects the output of a command to a file, overwriting the file if it exists.\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": command > file\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Save command output to a file: ls > filelist.txt\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"-append-output\",children:[e(r.a,{className:\"anchor\",href:\"#-append-output\",children:e(r.span,{className:\"icon icon-link\"})}),\">> (Append Output)\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Appends the output of a command to the end of a file.\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": command >> file\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:'Append command output to a file: echo \"Hello World!\" > filelist.txt'}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"-redirect-input\",children:[e(r.a,{className:\"anchor\",href:\"#-redirect-input\",children:e(r.span,{className:\"icon icon-link\"})}),\"< (Redirect Input)\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Redirects input from a file to a command\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": command < file\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Use file as input for a command: sort < unsorted.txt\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"21-redirect-error-to-output\",children:[e(r.a,{className:\"anchor\",href:\"#21-redirect-error-to-output\",children:e(r.span,{className:\"icon icon-link\"})}),\"2>&1 (Redirect Error to Output)\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Redirects standard error (file descriptor 2) to the same as standard output (file descriptor1).\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": command > file 2>&1\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Combine output and error in a single file: command > output.log 2>&1\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"-last-background-process-id\",children:[e(r.a,{className:\"anchor\",href:\"#-last-background-process-id\",children:e(r.span,{className:\"icon icon-link\"})}),\"$! (Last Background Process ID)\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Returns the process ID (PID) of the most recently executed background command\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": $!\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Get PID of the last background job: echo $!\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h3,{id:\"service-management\",children:[e(r.a,{className:\"anchor\",href:\"#service-management\",children:e(r.span,{className:\"icon icon-link\"})}),\"Service Management\"]}),\"\\n\",i(r.h4,{id:\"systemctl\",children:[e(r.a,{className:\"anchor\",href:\"#systemctl\",children:e(r.span,{className:\"icon icon-link\"})}),\"systemctl\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Manages systemd services and the system state\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": systemctl [command][service]\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Start Apache web serve: systemctl start apache2\"}),\"\\n\",e(r.li,{children:\"Check status of SSH service: systemctl status ssh\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"service\",children:[e(r.a,{className:\"anchor\",href:\"#service\",children:e(r.span,{className:\"icon icon-link\"})}),\"service\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Manages SysVinit services. Work on systems using SysVinit or compatible init system.\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": sercice [service] [command]\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Examples\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Start a service: service service-name start\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"kill\",children:[e(r.a,{className:\"anchor\",href:\"#kill\",children:e(r.span,{className:\"icon icon-link\"})}),\"kill\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Sends signals to processes, usually to terminate them.\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": kill [signal] PID\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Common Signals\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Terminate: kill PID\"}),\"\\n\",e(r.li,{children:\"Forceful terminate: kill -9 PID\"}),\"\\n\",e(r.li,{children:\"List signals: kill -l\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",i(r.h4,{id:\"pkill\",children:[e(r.a,{className:\"anchor\",href:\"#pkill\",children:e(r.span,{className:\"icon icon-link\"})}),\"pkill\"]}),\"\\n\",i(r.ul,{children:[\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Description\"}),\": Sends signals to processes based on name or other attributes.\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Syntax\"}),\": pkill [options] name\"]}),\"\\n\",i(r.li,{children:[e(r.strong,{children:\"Common Signals\"}),\":\",\"\\n\",i(r.ul,{children:[\"\\n\",e(r.li,{children:\"Terminate: pkill process-name\"}),\"\\n\",e(r.li,{children:\"Forceful terminate: pkill -9 process-name\"}),\"\\n\",e(r.li,{children:\"Search by user: pkill -u username process-name\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/linux-command"},{"type":"Post","slug":"priority-queue","title":"[Algorithm] Day.7 Dictionaries Part.2 - Priority Queue and Heap","description":"上個部分講到了 Binary Search Tree，介紹了一個好用的搜索方法，今天來介紹另一個可以最大化效能的資料結構","publishedAt":"2023-03-16T00:00:00.000Z","tags":["algorithm","note"],"body":"const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(i){const a={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...i.components},{Image:t}=a;return t||function(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),r(n,{children:[e(a.p,{children:\"上個部分講到了 Binary Search Tree，介紹了一個好用的搜索方法，今天來介紹另一個可以最大化效能的資料結構\"}),\"\\n\",r(a.h2,{id:\"pirority-queue\",children:[e(a.a,{className:\"anchor\",href:\"#pirority-queue\",children:e(a.span,{className:\"icon icon-link\"})}),\"Pirority Queue\"]}),\"\\n\",e(a.p,{children:\"Pirority Queue 是指可以讓我們搜索、插入、刪除最大（或最小）的一種資料結構\"}),\"\\n\",e(a.p,{children:\"會用到的情境可以是當今天我們有一台機器，所有使用這台機器的人都會附一樣的錢，但使用的時間不同。這時為了要最大化我們的收入，我們就必須要設計一種可以快速找到最少使用時間的資料結構，當一個人使用完機器之後就由使用時間最短的補上，這樣就能最大化收益。\"}),\"\\n\",e(a.p,{children:\"同樣的概念，如果沒個人都會在相同的時間內使用完，但每個人付的錢不一樣。這時我們就必須要有一個可以快速找到願意付出最多錢的資料結構來最大化我們的利益\"}),\"\\n\",r(a.h2,{id:\"heap\",children:[e(a.a,{className:\"anchor\",href:\"#heap\",children:e(a.span,{className:\"icon icon-link\"})}),\"Heap\"]}),\"\\n\",e(a.p,{children:\"Heap 就是一種 Priority Queue 的體現，他的特性是他是一個 complete binary Tree，且分為兩種\"}),\"\\n\",r(a.ol,{children:[\"\\n\",r(a.li,{children:[e(a.strong,{children:\"Max heap\"}),\"：所有的 subtree root 都會大於等於他的 children\"]}),\"\\n\",r(a.li,{children:[e(a.strong,{children:\"Min heap\"}),\"：所有的 subtree root 都會小於等於他的 children\"]}),\"\\n\"]}),\"\\n\",e(a.p,{children:\"最後就是 heap 可以被儲存在 array 當中\"}),\"\\n\",r(a.h3,{id:\"heap-insertion\",children:[e(a.a,{className:\"anchor\",href:\"#heap-insertion\",children:e(a.span,{className:\"icon icon-link\"})}),\"Heap Insertion\"]}),\"\\n\",e(t,{src:\"/blog/heap/heap-insert.png\",alt:\"heap insertion\"}),\"\\n\",e(a.p,{children:\"如上圖，在 Heap 插入元素的步驟就是：\"}),\"\\n\",r(a.ol,{children:[\"\\n\",e(a.li,{children:\"把要插入的元素放到 leaf 的位子\"}),\"\\n\",e(a.li,{children:\"一步一步跟 parent 比對找到 insert 元素適當的位子\"}),\"\\n\"]}),\"\\n\",e(a.pre,{children:e(a.code,{children:\"Algorithm Insert(a: array, n: element) {\\n  // Insert a[n] into heap which is stored in a[1, n-1]\\n  i = n;\\n  item = a[n];\\n\\n  // i/2 是 i 的 parent，參考上圖 `[80,45,70,40,35,50,90]`\\n  while((i > 1) and (a[i/2] < item)) { //如果還沒到 root 且 item 比他的 parent 大\\n    a[i] = a[i/2]; //把 parent 往下移動一格\\n    i = i/2;\\n  }\\n  a[i] = item; //最後才把 item 直接放到正確的位子\\n  return true;\\n}\\n\"})}),\"\\n\",r(a.h3,{id:\"heap-deletion\",children:[e(a.a,{className:\"anchor\",href:\"#heap-deletion\",children:e(a.span,{className:\"icon icon-link\"})}),\"Heap Deletion\"]}),\"\\n\",e(a.p,{children:\"這邊講的刪除通常是講刪除 heap 當中的 root，也就是最大（或最小）值，步驟如下：\"}),\"\\n\",r(a.ol,{children:[\"\\n\",e(a.li,{children:\"把 root 刪掉\"}),\"\\n\",e(a.li,{children:\"把 heap 中最後一個值放到 root，這樣才可以為持 heap 是 complete binary tree\"}),\"\\n\",e(a.li,{children:\"把新的 root 調整到對的位子\"}),\"\\n\"]}),\"\\n\",e(a.p,{children:\"在講刪除之前，要先講一下如何把 root 調整到對的位子\"}),\"\\n\",e(a.pre,{children:e(a.code,{children:\"Algorithm Adjust(a: array, i: root, n: array 的最後一項 ) {\\n  // array example: [80, 45, 70, 40, 35, 50, 80]\\n\\n  j = 2i; //i 的左邊 child\\n  item = a[i];\\n\\n  while(j <= n) { //一路向下找直到最後一項\\n    if((j < n) and (a[j] < a[j + 1])) {\\n      j = j + 1; //確保 j 是比較大的 child\\n    }\\n    if(item >= a[j] ){\\n      break; //因為 item 已經比他的 child 大了，代表找到 item 的位子\\n    }\\n    a[j/2] = a[j];\\n    j = j*2 //因為 item 還是比 child 小，所以往下找一層\\n  }\\n\\n  a[j/2] = item; //把 item 放到對的地方\\n}\\n\"})}),\"\\n\",e(a.p,{children:\"知道如何調整之後整個 delete 的演算法就很簡單了！\"}),\"\\n\",e(a.pre,{children:e(a.code,{children:'Algorithm DelMax(a: array, n: array 最後一項, x: 要把 max 存在哪裡) {\\n  if(n = 0) {\\n    write(\"heap is empty!\");\\n    return false;\\n  }\\n  x = a[1]; //把 max 值存在 x\\n  a[1] = a[n]; //把最後一項移到 root\\n  Adjust(a, 1, n-1); //調整 root 的位子\\n  return true;\\n}\\n'})}),\"\\n\",r(a.h3,{id:\"sort\",children:[e(a.a,{className:\"anchor\",href:\"#sort\",children:e(a.span,{className:\"icon icon-link\"})}),\"Sort\"]}),\"\\n\",e(a.p,{children:\"利用 Heap 的特性，我們可以發現他也可以拿來當作是一個排序的工具，只要把一串數字用 insert 一個一個 insert 進去 heap 裡面之後一個一個 DelMax 之後我們就可以得到一串排列好的數列\"}),\"\\n\",e(a.pre,{children:e(a.code,{children:\"Algorithm Sort(a: array, n: array.size) {\\n  for (i = 1 to n) {\\n    Insert(a, i);\\n  }\\n  for(i = n to 1){\\n    DelMax(a, i, x);\\n    a[i] = x;\\n  }\\n}\\n\"})}),\"\\n\",r(a.p,{children:[\"這邊因為 Insert 和 DelMax 的時間複雜度都是 O(log n)，所以對 n 個元素作 Insert 和 DelMax 的時間複雜度加總起來就會是 O(2n log n)，當然在分析的時候不會看那個 2，所以就可以說這個 Sort 的演算法時間複雜度是 \",e(a.strong,{children:\"O(n log n)\"})]}),\"\\n\",e(t,{src:\"/blog/heap/heap-sort.png\",alt:\"Heap Sort\"}),\"\\n\",r(a.h3,{id:\"heapify\",children:[e(a.a,{className:\"anchor\",href:\"#heapify\",children:e(a.span,{className:\"icon icon-link\"})}),\"Heapify\"]}),\"\\n\",e(a.p,{children:\"雖然說 O(n log n) 的時間複雜度看似不差，但其實 heap 可以做到更快地排序，也就是 Heapify\"}),\"\\n\",r(a.p,{children:[\"Heapify 的概念不是利用 insert 和 delete，而是利用到前面所說的 \",e(a.strong,{children:\"Adjust\"}),\"，他把 n 個數字不經排序的塞進樹裡面，之後再從 leaf 的上面一層開始做 \",e(a.strong,{children:\"Adjust\"})]}),\"\\n\",r(a.p,{children:[\"這樣我們就只需要對一半的元素進行操作，並且因為 Adjust 的時間複雜度是 \",e(a.strong,{children:\"O(i)\"}),\"，所以對一半元素進行只需要 \",e(a.strong,{children:\"O(1/2n)\"}),\"，在分析的時候也可以看成是\",e(a.strong,{children:\"O(n)\"})]}),\"\\n\",e(a.pre,{children:e(a.code,{children:\"Algorithm Heapify(a: array, n: array.size) {\\n  //Readjust the elements in a[1:n] to form a heap\\n  for(i = n/2 to 1) {\\n    Adjust(a, i, n)\\n  }\\n}\\n\"})}),\"\\n\",e(t,{src:\"/blog/heap/heapify.png\",alt:\"Heapify\"})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/priority-queue"},{"type":"Post","slug":"randomized-algorithm","title":"[Algorithm] Day.3 隨機演算法","description":"隨機演算法是一種技巧，在自己的演算法當中加入一些隨機性，目的是為了要提升演算法效能。","publishedAt":"2023-03-11T00:00:00.000Z","tags":["algorithm","note"],"body":"const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(c){const l={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",p:\"p\",pre:\"pre\",span:\"span\",...c.components};return r(n,{children:[r(l.p,{children:[\"隨機演算法是一種技巧，在自己的演算法當中加入一些隨機性，目的是為了要提升演算法效能，也就是降低時間或是空間複雜度。\\n這種演算法的核心概念為 \",e(l.code,{children:\"演算法結果源自於一個隨機產生的數字\"}),\"，在重複使用這種演算法之後，他有很高的機率會比一般常用的線性演算法來得更有效率。\"]}),\"\\n\",e(l.p,{children:\"隨機演算法的設計通常離不開下面這兩種範疇\"}),\"\\n\",r(l.h2,{id:\"蒙地卡羅演算法-monte-carlo-algorithms\",children:[e(l.a,{className:\"anchor\",href:\"#蒙地卡羅演算法-monte-carlo-algorithms\",children:e(l.span,{className:\"icon icon-link\"})}),\"蒙地卡羅演算法 (Monte Carlo Algorithms)\"]}),\"\\n\",e(l.p,{children:\"蒙地卡羅演算法就是在既定的時間內，利用隨機的方式提供盡可能正確的結果，換句話說利用這個演算法算出的結果可能是錯的，但是他會把錯誤的機率控制在一個非常低的範圍內。\"}),\"\\n\",r(l.p,{children:[\"這個演算法最常見的例子就是 \",e(l.code,{children:\"求圓周率\"}),\" 的演算法了！\"]}),\"\\n\",r(l.blockquote,{children:[\"\\n\",e(l.p,{children:\"可以想像成當今天我們看不到，但是要判斷一個物品的形狀我們應該怎麼做！答案就是盡可能地摸遍這個物體的每一個角落之後拼湊成出他的形狀。\"}),\"\\n\",e(l.p,{children:\"求圓周率的演算法也是這樣，在座標軸上，利用電腦隨機產生 x 座標在 0 和 1 之間，且 y 座標也在 0 和 1 之間的點，因為座標都在 0 和 1 中間，所以在點在某個區域中的數量會和那個區域的面積成正比，所以只要我們把所有點的數量除以落在圓裡面的點的數量，就可以算出圓周率的數值。\"}),\"\\n\"]}),\"\\n\",e(l.p,{children:\"當然因為點是隨機產生的，所以有可能會發生點集中在圓裡面或是圓外面的情況，導致算出來的結果不準確，但當今天我們樣本數夠大之後，就可以把這種不準確的結果降到最低。\"}),\"\\n\",r(l.h2,{id:\"拉斯維加斯演算法-las-vegas-algorithms\",children:[e(l.a,{className:\"anchor\",href:\"#拉斯維加斯演算法-las-vegas-algorithms\",children:e(l.span,{className:\"icon icon-link\"})}),\"拉斯維加斯演算法 (Las Vegas Algorithms)\"]}),\"\\n\",e(l.p,{children:\"拉斯維加斯演算法和蒙地卡羅相反，他保證會得到正確答案（或是沒有答案），但他就不能保證演算法的執行時間，不過雖然不保證執行時間，卻可以確保在最差狀況發生時他的執行時間。\"}),\"\\n\",e(l.p,{children:\"這類演算法常常在我們找東西的時候使用。\"}),\"\\n\",r(l.blockquote,{children:[\"\\n\",e(l.p,{children:\"舉例來說當我們今天要在有 n 個數字的陣列當中找到相同的數字\\n在這個陣列當中有 n/2 個不同的數字和 n/2 個相同數字\"}),\"\\n\"]}),\"\\n\",e(l.p,{children:\"在傳統的演算法當中，我們會一個一個檢查，當找到兩個相同數字的時候回傳\"}),\"\\n\",e(l.pre,{children:e(l.code,{children:\"Algorithm findDuplicateGeneral(numberArray) {\\n  for number in numberArray do\\n    from numberIndex + i to numberArrayLength do\\n      if number == numberArray[index]\\n        return number\\n        break\\n}\\n\"})}),\"\\n\",r(l.p,{children:[\"當這個一個一個檢查的演算法遇到排列非常差的情況就會花費很多時間\\n例如：[1, 2, 3, 4, 5, 9, 9, 9, 9, 9]\\n遇到這種排列我們就需要花 \",e(l.code,{children:\"n/2 + 2\"}),\" 次才有辦法找出重複的數字是什麼 (n/2 + 1 次都沒有重複，最後再加一次找出重複的是哪個)\"]}),\"\\n\",r(l.p,{children:[\"但如果我們採用隨機的方式在這個陣列中隨機挑選兩個數字出來比對，大約 \",e(l.code,{children:\"20%\"}),\" 的機率會成功找到重複的數字。\\n換句話說，找失敗的機率大約為 \",e(l.code,{children:\"80%\"}),\"；那如果今天連續執行 10 次的話，沒有找到正確數字的機率就會大約是 \",e(l.code,{children:\"0.8^10\"}),\"，大約是 \",e(l.code,{children:\"0.1\"}),\"，換句話說就是有 \",e(l.code,{children:\"90%\"}),\" 的機率會找到正解。\\n當今天陣列像上面只有 10 項的時候，可能傳統的方式看起來效率會超過隨機演算法，但當今天有 100 個數字或甚至更多的時候，拉斯維加斯演算法就可以很好的幫我們節省時間。\"]}),\"\\n\",e(l.p,{children:\"就這個例子我們就可以看出拉斯維加斯演算法雖然不能保證幾執行多少步會成功，但卻可以在一定次數後擁有很高的成功率，且最後一定會給我們正確的答案。\"}),\"\\n\",e(l.p,{children:\"雖然一步一步的執行演算法可以確保執行的結果，但在設計演算法的時候不妨可以把隨機演算法加入思考，讓自己設計出的演算法可以有更好的執行效率。\"})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/randomized-algorithm"},{"type":"Post","slug":"resume-keyword-injector","title":"[Project] I Built a Tool to Fight ATS Filtering (And Why That's Problematic)","description":"After applying for over 300 internship positions in 9 months with only handful passing resume screening, I started questioning everything. So I built a tool that adds invisible keywords to PDF resumes to help with ATS filtering—and discovered why that's more problematic than I initially thought.","publishedAt":"2025-07-01T00:00:00.000Z","tags":["python","project","job search","pdf"],"body":"const{Fragment:e,jsx:t,jsxs:n}=arguments[0];function _createMdxContent(i){const o={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",p:\"p\",span:\"span\",ul:\"ul\",...i.components};return n(e,{children:[t(o.p,{children:\"After applying for over 300 internship positions in 9 months with only handful passing resume screening, I started questioning everything.\\nWas my resume really that terrible? I'm an honest job seeker -- I only applied to positions where I had at least 70% of the required skills.\\nYet the rejection rate was brutal.\"}),\"\\n\",n(o.p,{children:[\"That's when I started suspecting the real culprit: ATS filtering. Maybe it wasn't about my qualifications at all.\\nMaybe it was because I wrote \",t(o.code,{children:\"React.js\"}),\" instead of \",t(o.code,{children:\"ReactJS\"}),\", or \",t(o.code,{children:\"Database\"}),\" instead of \",t(o.code,{children:\"DB\"}),\".\\nSmall differences in the keywords that had nothing to do with my actual abilities,\\nbut everything to do with getting filtered out before a human ever saw my resume.\"]}),\"\\n\",n(o.h2,{id:\"the-problem-deep-dive\",children:[t(o.a,{className:\"anchor\",href:\"#the-problem-deep-dive\",children:t(o.span,{className:\"icon icon-link\"})}),\"The Problem Deep Dive\"]}),\"\\n\",t(o.p,{children:\"So I decided to dig deeper. If my suspicion was right maybe the problem wasn't my qualifications\\n--it was how ATS systems were interpreting my resume.\"}),\"\\n\",n(o.h3,{id:\"learning-how-ats-really-works\",children:[t(o.a,{className:\"anchor\",href:\"#learning-how-ats-really-works\",children:t(o.span,{className:\"icon icon-link\"})}),\"Learning How ATS Really Works\"]}),\"\\n\",t(o.p,{children:\"I started researching how these systems actually function, and what I discovered was both enlightening and concerning.\\n98.4% of Fortune 500 companies use ATS to manage their hiring process.\\nThese systems don't read resumes the way humans do.\\nInstead, they convert your carefully formatted PDF into plain text and run it through keyword matching algorithms.\"}),\"\\n\",t(o.p,{children:\"The process seemed straightforward enough: the system takes the job description, identifies key terms, then searches your resume for matches.\\nYour resume gets assigned a relevance score based on how many keywords it contains and how closely they match the original job posting.\\nSimple string matching, not intelligent understanding.\"}),\"\\n\",n(o.h3,{id:\"the-keyword-variation-problem\",children:[t(o.a,{className:\"anchor\",href:\"#the-keyword-variation-problem\",children:t(o.span,{className:\"icon icon-link\"})}),\"The Keyword Variation Problem\"]}),\"\\n\",t(o.p,{children:\"This is where I started to see potential issues. Through online ATS testing tools and developer forums,\\nI learned that these systems can be quite literal in their matching:\"}),\"\\n\",n(o.ul,{children:[\"\\n\",n(o.li,{children:[\"A job posting asking for \",t(o.code,{children:\"React.js\"}),\" might not recognize \",t(o.code,{children:\"ReactJS\"}),\" or \",t(o.code,{children:\"React\"}),\" as the same thing.\"]}),\"\\n\",n(o.li,{children:[t(o.code,{children:\"JavaScript\"}),\" vs \",t(o.code,{children:\"JS\"}),\" could be treated as different technologies.\"]}),\"\\n\",n(o.li,{children:[t(o.code,{children:\"PostgreSQL\"}),\" vs \",t(o.code,{children:\"Postgres\"}),\" - potentially different databases to an algorithm\"]}),\"\\n\"]}),\"\\n\",n(o.p,{children:[\"Look at my own resume, I had listed \",t(o.code,{children:\"TypeScript, JavaScript\"}),\" and \",t(o.code,{children:\"React, Next.js\"}),\" - but what if a job description used \",t(o.code,{children:\"TypeScript/JavaScript\"}),\" or \",t(o.code,{children:\"React.js\"}),\"?\\nWould the ATS recognize these as matches?\"]}),\"\\n\",t(o.p,{children:\"I tested this theory using some free ATS scanning tools online with different keyword variations.\\nThe result is that seemingly minor differences in terminology could impact match scores.\"}),\"\\n\",n(o.h3,{id:\"why-this-affects-everyone\",children:[t(o.a,{className:\"anchor\",href:\"#why-this-affects-everyone\",children:t(o.span,{className:\"icon icon-link\"})}),\"Why This Affects Everyone\"]}),\"\\n\",t(o.p,{children:\"The scope of this problem was bigger than I expected.\\n88% of employers believe they are losing out on highly qualified candidates who are screened out by ATS systems.\"}),\"\\n\",n(o.h4,{id:\"for-job-seekers\",children:[t(o.a,{className:\"anchor\",href:\"#for-job-seekers\",children:t(o.span,{className:\"icon icon-link\"})}),\"For job seekers:\"]}),\"\\n\",t(o.p,{children:\"We might have exactly the right experience but get filtered out because we used different terminology than what the algorithm expected.\"}),\"\\n\",n(o.h4,{id:\"for-employers\",children:[t(o.a,{className:\"anchor\",href:\"#for-employers\",children:t(o.span,{className:\"icon icon-link\"})}),\"For employers:\"]}),\"\\n\",t(o.p,{children:\"They exclude viable candidates whose resumes do not match the criteria but who could perform at a high level.\"}),\"\\n\",n(o.h4,{id:\"for-the-industry\",children:[t(o.a,{className:\"anchor\",href:\"#for-the-industry\",children:t(o.span,{className:\"icon icon-link\"})}),\"For the industry:\"]}),\"\\n\",t(o.p,{children:\"We're optimizing for keyword matching rather than actual capability assessment.\"}),\"\\n\",n(o.h3,{id:\"my-hypothesis\",children:[t(o.a,{className:\"anchor\",href:\"#my-hypothesis\",children:t(o.span,{className:\"icon icon-link\"})}),\"My Hypothesis\"]}),\"\\n\",t(o.p,{children:\"Based on this research, I developed a theory:\\nmany qualified job seekers weren't getting rejected because they were unqualified\\n--they were getting rejected because of keyword mismatches that no human would consider meaningful.\"}),\"\\n\",t(o.p,{children:\"The solution seemed clear: if ATS systems were looking for specific keyword matches, maybe there was a way to help bridge the gap.\\nNot by misrepresenting skills, but by ensuring genuine qualifications were presented in the terminology these systems expected to find.\"}),\"\\n\",t(o.p,{children:\"That's when I started thinking about building a tool to address this keyword matching problem.\"}),\"\\n\",n(o.h2,{id:\"my-solution\",children:[t(o.a,{className:\"anchor\",href:\"#my-solution\",children:t(o.span,{className:\"icon icon-link\"})}),\"My Solution\"]}),\"\\n\",t(o.p,{children:\"If the system is broken, can I work around it?\\nThis is my first thought after understanding how ATS systems worked.\\nAs a developer, my instinct was to build something.\"}),\"\\n\",t(o.p,{children:\"The idea was simple:\\nput invisible keywords in my resume so that ATS systems could see them, but human recruiters would see the same clean, professional document.\\nThis would help me pass the initial screening and get my resume in front of actual people.\"}),\"\\n\",t(o.p,{children:\"I thought carefully about this approach. I wasn't trying to create a tool to deceive anyone,\\nbut rather to ensure my real qualifications were visible to both machines and humans.\\nIf I wasn't actually qualified for a job, this tool wouldn't help me get hired—\\nit would just get me to the interview stage where my actual skills would be evaluated.\"}),\"\\n\",n(o.h3,{id:\"the-technical-journey\",children:[t(o.a,{className:\"anchor\",href:\"#the-technical-journey\",children:t(o.span,{className:\"icon icon-link\"})}),\"The Technical Journey\"]}),\"\\n\",t(o.p,{children:\"I will always think about the input and output of a product.\\nFor input, I initially set it as a markdown file because my own resume is written in markdown.\\nHowever, after some research, I found that not a lot of people write their resume in markdown format,\\nso I decide to set the input as a PDF file, since most people export their resume to a PDF format when they upload to an application.\\nAnd for output, it will have to be a PDF file because users will be able to directly upload it to the application website.\"}),\"\\n\",n(o.h3,{id:\"how-to-hide-text\",children:[t(o.a,{className:\"anchor\",href:\"#how-to-hide-text\",children:t(o.span,{className:\"icon icon-link\"})}),\"How to Hide Text\"]}),\"\\n\",t(o.p,{children:\"I discovered several ways to make text invisible. The most straightforward way is to put white text on a white background.\\nI also found I could make text so small so it became invisible to the naked eye,\\nor place keywords in document margins where they wouldn't interfere with the layout.\"}),\"\\n\",t(o.p,{children:\"Rather than betting on a single method,\\nI decided to implement five different techniques.\\nThis would give users flexibility and increase the chances of success across different ATS systems.\"}),\"\\n\",n(o.h3,{id:\"building-the-tool\",children:[t(o.a,{className:\"anchor\",href:\"#building-the-tool\",children:t(o.span,{className:\"icon icon-link\"})}),\"Building the Tool\"]}),\"\\n\",t(o.p,{children:\"The development process involved solving several technical challenges.\\nOriginally I extracted all the text from the input PDF and then write it into a new file after adding the keywords.\\nThis approach has a big problem, it doesn't preserve the style and the format of the original PDF. Although the output text is correct,\\nit looks completely different to what we want it to be. So I decided to add a overlay to the input file instead.\\nAfter adopting the new approach, I successfully added the keywords to the resume while preserving the style and format.\"}),\"\\n\",n(o.p,{children:[\"Another important decision was the user interface approach: interactive prompts versus direct command execution.\\nI like the feeling of \",t(o.code,{children:\"npx next init\"}),\" which will prompt me all the options I need for the project,\\nand also like the \",t(o.code,{children:\"curl\"}),\" one line command that includes all the arguments in the command and get everything done in a single line.\\nSo I made both exist, when users type only \",t(o.code,{children:\"resume-keyword-injector\"}),\" or with some arguments, it will enter interactive mode and prompt users to enter necessary information.\\nBut if users give me all the arguments, we will directly run the command without extra prompting.\"]}),\"\\n\",t(o.p,{children:\"With this hybrid approach, users will have a lot more flexibility to choose which way they like.\"}),\"\\n\",t(o.p,{children:\"As I built out the functionality, I added comprehensive error handling so the tool would fail gracefully rather than corrupting someone's resume.\\nI added progress indicators and clear feedback messages so users would understand what was happening. I wrote detailed documentation with examples.\"}),\"\\n\",t(o.p,{children:\"The final version could process any PDF resume, add keywords using five different invisible methods,\\nand handle everything from single resumes to batch processing.\\nIt included safeguards to prevent common mistakes and provided helpful error messages when things went wrong.\"}),\"\\n\",t(o.p,{children:\"After the development and testing, I had a working solution to keyword matching problem.\\nThe technical challenge was solved, but I was beginning to understand that building the tool was just the first step in a much larger conversation.\"}),\"\\n\",n(o.h2,{id:\"the-ethical-considerations-and-reality-check\",children:[t(o.a,{className:\"anchor\",href:\"#the-ethical-considerations-and-reality-check\",children:t(o.span,{className:\"icon icon-link\"})}),\"The Ethical Considerations and Reality Check\"]}),\"\\n\",t(o.p,{children:\"After I completed the tool, I did more research about this topic before publishing the tool.\\nWhat I discovered gave me pause.\"}),\"\\n\",t(o.p,{children:\"It turns out that keyword injection is an old trick, and most recruiters are aware of it.\\nThe problem is that it's often misused by people who use these technique to stuff skills they don't actually have into resumes, then show up to the interview completely unprepared.\\nThis has created a negative perception of any resume optimization techniques.\"}),\"\\n\",n(o.h3,{id:\"the-real-risk\",children:[t(o.a,{className:\"anchor\",href:\"#the-real-risk\",children:t(o.span,{className:\"icon icon-link\"})}),\"The Real Risk\"]}),\"\\n\",t(o.p,{children:\"I had to be honest about what could go wrong. Modern ATS systems are getting better at detecting hidden text manipulation.\\nSome companies specifically screen for these tactics and automatically reject resumes that use them.\\nEven if you make it past the ATS, there's a chance a recruiter might discover the hidden keywords when copying and pasting sections of your resume.\"}),\"\\n\",t(o.p,{children:\"More importantly, this approach doesn't solve the fundamental problem--it's just a workaround for broken systems.\\nIf everyone starts using these techniques, companies will likely develop better detection methods, and we'll be back where we started.\"}),\"\\n\",n(o.h3,{id:\"finding-the-middle-ground\",children:[t(o.a,{className:\"anchor\",href:\"#finding-the-middle-ground\",children:t(o.span,{className:\"icon icon-link\"})}),\"Finding the Middle Ground\"]}),\"\\n\",n(o.p,{children:[\"I kept coming back to what I saw as an important distinction: there's a difference between adding keywords for skills you actually have versus skills you don't.\\nIf someone has \",t(o.code,{children:\"React\"}),\" experience but the ATS is looking for \",t(o.code,{children:\"React.js\"}),\", that seems like a reasonable translation problem to solve.\"]}),\"\\n\",t(o.p,{children:\"But I also realized that good intentions don't prevent misuse. The tool could easily be used to add fake skills, regardless of my recommendations.\"}),\"\\n\",t(o.p,{children:\"Despite these concerns, I still decided to release the tool, but with clear warnings about the risks and strong recommendations about responsible use.\\nThe reality is that this isn't a perfect solution, it's a band-aid for a larger problem. But for job seekers who are genuinely qualified and just need to get past the initial keyword matching,\\nit might help level the playing field, at least temporarily.\"}),\"\\n\",n(o.h2,{id:\"conclusion\",children:[t(o.a,{className:\"anchor\",href:\"#conclusion\",children:t(o.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),\"\\n\",t(o.p,{children:\"This has been a great learning experience, even if the outcome wasn't as straightforward as I initially hoped.\\nI discovered the current problem and tried hard to come up with a solution, I enjoy the process of crafting something that really smooths out my workflow, and maybe others' too.\\nI am glad that I can publish my first software on PyPI, even though it might not be the best tool.\\nFor anyone considering using resume-keyword-injector: please don't use it to deceive recruiters. Only add keywords for skills you genuinely possess.\\nAlso, understand the risk that having an invisible section might cause your resume being automatically rejected or flagged, in some company it will put you on a black list.\\nThis tool hasn't been proven effective against all ATS systems, so use it at your own discretion and risk.\\nI will keep using it in some of my applications to AB test if it works or not, and will share the result in future blog posts. See you then~\"})]})}return{default:function(e={}){const{wrapper:n}=e.components||{};return n?t(n,{...e,children:t(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/resume-keyword-injector"},{"type":"Post","slug":"sets","title":"[Algorithm] Day.8 Sets and Disjoint set union","description":"上次介紹了樹是什麼，還有一些常見種類的樹，但那都只討論到一棵樹的範圍，今天就來探討一下如果有多棵樹的話，我們要怎麼把它結合起來，以及我們要如何找到一個 Node 存在哪棵樹裡面上次介紹了樹是什麼，還有一些常見種類的樹，但那都只討論到一棵樹的範圍，今天就來探討一下如果有多棵樹的話，我們要怎麼把它結合起來，以及我們要如何找到一個 Node 存在哪棵樹裡面","publishedAt":"2023-03-26T00:00:00.000Z","tags":["algorithm","note"],"body":"const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(r){const o={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...r.components},{Image:c}=o;return c||function(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),i(n,{children:[e(o.p,{children:\"上次介紹了樹是什麼，還有一些常見種類的樹，但那都只討論到一棵樹的範圍，今天就來探討一下如果有多棵樹的話，我們要怎麼把它結合起來，以及我們要如何找到一個 Node 存在哪棵樹裡面\"}),\"\\n\",i(o.h2,{id:\"sets\",children:[e(o.a,{className:\"anchor\",href:\"#sets\",children:e(o.span,{className:\"icon icon-link\"})}),\"Sets\"]}),\"\\n\",e(c,{src:\"/blog/sets/sets.png\",alt:\"sets\"}),\"\\n\",e(o.p,{children:\"Sets 其實指的就是 forest 的應用，也就是對大於一棵樹進行操作。在這邊我們討論的是 disjoint\\n的 forest，也就是説在不同的 sets 裡面不會有相同的 Node。\"}),\"\\n\",i(o.p,{children:[\"而在這些 sets 裡面我們就要討論如何 \",e(o.strong,{children:\"合併(Union)\"}),\" 兩個 sets 以及如何 \",e(o.strong,{children:\"尋找(Find)\"}),\" node 在哪一個 set 裡面不會有相同的\"]}),\"\\n\",i(o.h2,{id:\"合併和尋找-union-and-find\",children:[e(o.a,{className:\"anchor\",href:\"#合併和尋找-union-and-find\",children:e(o.span,{className:\"icon icon-link\"})}),\"合併和尋找 (Union and Find)\"]}),\"\\n\",i(o.h3,{id:\"1-合併-union\",children:[e(o.a,{className:\"anchor\",href:\"#1-合併-union\",children:e(o.span,{className:\"icon icon-link\"})}),\"1. 合併 (Union)\"]}),\"\\n\",e(o.p,{children:\"要合併兩個 tree，我們最簡單的方法就是把整個樹整顆從 root 到所有的 subtree 都變成另外一個樹的一個 subtree\"}),\"\\n\",i(o.h3,{id:\"2-尋找-find\",children:[e(o.a,{className:\"anchor\",href:\"#2-尋找-find\",children:e(o.span,{className:\"icon icon-link\"})}),\"2. 尋找 (Find)\"]}),\"\\n\",e(o.p,{children:\"在說這個之前我們需要先提到 set 的資料表達法。\"}),\"\\n\",i(o.h4,{id:\"by-pointer\",children:[e(o.a,{className:\"anchor\",href:\"#by-pointer\",children:e(o.span,{className:\"icon icon-link\"})}),\"By Pointer\"]}),\"\\n\",e(c,{src:\"/blog/sets/by-pointer.png\",alt:\"By pointer\"}),\"\\n\",i(o.p,{children:[\"這個表示方式比較直觀，就是把這些 trees 存在一個 table 裡面，用一個 set name 來代表每一個\\nset，然後再用一個 pointer 指向那一個 set 的 root。這時候我們就用 \",e(o.strong,{children:\"name[root]\"}),\" 來表示這一個\\ntree\"]}),\"\\n\",e(o.p,{children:\"在 By Pointer 的表達方式中，Find 其實很簡單，只要往上找到那個 node 的 root，之後在到 table 裡面找到他的 pointer 就可以知道他在哪個 set 裡面了。\"}),\"\\n\",i(o.h4,{id:\"by-array\",children:[e(o.a,{className:\"anchor\",href:\"#by-array\",children:e(o.span,{className:\"icon icon-link\"})}),\"By Array\"]}),\"\\n\",e(c,{src:\"/blog/sets/by-array.png\",alt:\"By Array\"}),\"\\n\",e(o.p,{children:\"這種作法是一個更節省空間的做法，我們把所有 node 放在一個 index 為 1 到 node 數量的陣列裡面，在 array 裡面的值就會放那個 node 的 parent，然後如果沒有 parent 的話就代表他是 root，所以就用 -1 來代表他的值。\"}),\"\\n\",i(o.p,{children:[\"在 By Array 的表達方式，Find 就是從那個 node 的值開始一步一步往上找，如果找到值為 \",e(o.strong,{children:\"-1\"}),\" 的就代表找到 root 了，因為這個表達法比較省空間，所以後續的範例都會用這種表示方式\"]}),\"\\n\",e(o.pre,{children:e(o.code,{children:\"// 把 Union 跟 Find 寫成 Psuedo Code\\n\\nAlogrithm SimpleUnion(i, j) {\\n  p[i] = j //把 i 併入 j\\n}\\n\\nAlogrithm SimpleFind(i,j) {\\n  while(p[i] >= 0) {\\n    i = p[i] //還沒找到 root 就往他的 parent 找\\n  }\\n  return i\\n}\\n\"})}),\"\\n\",e(o.p,{children:\"雖然說 SimpleFind 跟 SimpleUnion 可以很容易地解決問題，但這兩個因為要一個一個動作，所以他們的效能不太好。\"}),\"\\n\",i(o.p,{children:[\"假設今天有 8 個只有一個 node 的 tree 要進行 union 就需要 8 次合併，所以他的時間複雜度就會是 \",e(o.strong,{children:\"O(n)\"})]}),\"\\n\",i(o.p,{children:[\"那如果是要找 8 個 node 的話，每一個元素都需要從下往上，所以是 \",e(o.strong,{children:\"O(n)\"}),\"，那找 n 個元素就會是 \",e(o.strong,{children:\"O(n^2)\"})]}),\"\\n\",i(o.h2,{id:\"weighting-rule\",children:[e(o.a,{className:\"anchor\",href:\"#weighting-rule\",children:e(o.span,{className:\"icon icon-link\"})}),\"Weighting Rule\"]}),\"\\n\",e(o.p,{children:\"這個 weight rule 就是效能不好的解法，他的核心概念就是當我們要合併 2 個 tree 的話，會把 children 數量比較少的 tree 合併到比較多的那個樹。\"}),\"\\n\",i(o.p,{children:[\"這樣做的話，如果是 n 顆數進行合併，合併之後的樹高度就不會超過 \",e(o.code,{children:\"log2N + 1\"}),\"，舉例來說，如果有 8 個只有一個 node 的樹合併，在使用 SimpleUnion 的情況下會是 8 層，但是在 WeightedUnion 的情況下就會是 log22 + 1 的 2 層。\"]}),\"\\n\",i(o.blockquote,{children:[\"\\n\",i(o.p,{children:[\"在這樣有限高度的情況下，尋找 n 個元素的時間複雜度就會變為 \",e(o.strong,{children:\"O(n)\"})]}),\"\\n\"]}),\"\\n\",e(o.pre,{children:e(o.code,{children:\"Algorithm WeightedUnion(i, j) {\\n\\n  p[i] = count[i] * -1, p[j] = count[j] * -1\\n\\n  temp = p[i] + p[j];\\n  if(p[i] > p[j]) {\\n    p[i] = j;\\n    p[j] = temp;\\n  } else {\\n    p[j] = i;\\n    p[i] = temp\\n  }\\n}\\n\"})}),\"\\n\",i(o.h4,{id:\"quiz\",children:[e(o.a,{className:\"anchor\",href:\"#quiz\",children:e(o.span,{className:\"icon icon-link\"})}),\"Quiz\"]}),\"\\n\",i(o.p,{children:[\"在這邊可以想一下為什麼 \",e(o.strong,{children:\"p[i]\"}),\" 和 \",e(o.strong,{children:\"p[j]\"}),\" 要是負數？\"]}),\"\\n\",i(o.h4,{id:\"answer\",children:[e(o.a,{className:\"anchor\",href:\"#answer\",children:e(o.span,{className:\"icon icon-link\"})}),\"Answer\"]}),\"\\n\",e(o.p,{children:\"在 by array 的表示方法下，正數的值表示的是那個 node 的 parent，所以使用負數來區分出 root 跟其他 node\"}),\"\\n\",i(o.h2,{id:\"collapsing-rule\",children:[e(o.a,{className:\"anchor\",href:\"#collapsing-rule\",children:e(o.span,{className:\"icon icon-link\"})}),\"Collapsing Rule\"]}),\"\\n\",i(o.p,{children:[\"雖然 Weighting Rule 已經可以提升 find 的效能，但還有一個方式可以更加提升效率，就是 \",e(o.strong,{children:\"Collapsing Rule\"})]}),\"\\n\",e(o.p,{children:\"他的概念就是在 Find 的時候如果要找的 node 他的 parent 不是 root 的話就把他 parent 那個 subtree 直接移到整棵樹的 root 上面\"}),\"\\n\",e(o.p,{children:\"這樣雖然在每一次搜尋的時候會多一個步驟稍微拖慢一下每次搜尋的效率，但是這樣可以壓縮樹，讓下一次的搜尋更加快速！\"}),\"\\n\",e(o.pre,{children:e(o.code,{children:\"Alogrithm CollapsingFind(i) {\\n  //找到 i 的 root，並且利用 collapsing rule 壓縮樹\\n\\n  r = i;\\n  while(p[r] > 0) {\\n    r = p[r]; //找到 i 的 root\\n  }\\n  while(i != r) { //把 subtree 移動到 root 上\\n    s = p[i];\\n    p[i] = r;\\n    i = s;\\n  }\\n  return r\\n}\\n\"})}),\"\\n\",e(o.p,{children:\"介紹完 sets 之後，在資料結構的部分就只剩下 graph 了！那就期待一下吧！\"})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/sets"},{"type":"Post","slug":"stacks-and-queues","title":"[Algorithm] Day.4 堆疊和佇列 (Stacks and Queues)","description":"在寫程式的時候，最常使用到的資料結構之一就是一個線性的陣列，而佇列和堆疊就是兩個非常基本的資料結構。","publishedAt":"2023-03-12T00:00:00.000Z","tags":["algorithm","note"],"body":"const{Fragment:e,jsx:n,jsxs:r}=arguments[0];function _createMdxContent(c){const t={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...c.components},{Image:i}=t;return i||function(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),r(e,{children:[n(t.p,{children:\"在寫程式的時候，最常使用到的資料結構之一就是一個線性的陣列，而佇列和堆疊就是兩個非常基本的資料結構。\"}),\"\\n\",r(t.h2,{id:\"堆疊stacks\",children:[n(t.a,{className:\"anchor\",href:\"#堆疊stacks\",children:n(t.span,{className:\"icon icon-link\"})}),\"堆疊（Stacks）\"]}),\"\\n\",r(t.p,{children:[\"堆疊是指執行順序為後進先出（Last-In-Frist-Out, LIFO) 的資料結構。實際操作起來的核心概念是只會在堆疊的最頂端進行操作，舉例來說如果今天依序在堆疊中加入 \",n(t.code,{children:\"A, B, C, D, E\"}),\" 五個元素，那最先被移出堆疊的元素將會是 \",n(t.strong,{children:\"E\"}),\"。\"]}),\"\\n\",n(t.p,{children:\"常見的應用場景包括瀏覽器的返回功能，以及編譯器編譯時的臨時記憶體。\"}),\"\\n\",r(t.h2,{id:\"佇列queue\",children:[n(t.a,{className:\"anchor\",href:\"#佇列queue\",children:n(t.span,{className:\"icon icon-link\"})}),\"佇列（Queue）\"]}),\"\\n\",r(t.p,{children:[\"佇列則是類似排隊的先進先出（First-In-First-Out, FIFO）的資料結構，他的規則是只能在佇列的最後面插入和只能在最前面進行刪除。舉例來說如果今天依序在佇列中加入 \",n(t.code,{children:\"A, B, C, D, E\"}),\" 五個元素，那最先被移出堆疊的元素將會是 \",n(t.strong,{children:\"A\"}),\"。\"]}),\"\\n\",n(t.p,{children:\"常見的應用場景包括操作系統中的作業佇列，以及網絡中的數據包傳輸。\"}),\"\\n\",r(t.h3,{id:\"循環佇列-circular-queue\",children:[n(t.a,{className:\"anchor\",href:\"#循環佇列-circular-queue\",children:n(t.span,{className:\"icon icon-link\"})}),\"循環佇列 (Circular Queue)\"]}),\"\\n\",n(t.p,{children:\"那現在我們來講一個比較特別一點的佇列吧！\"}),\"\\n\",n(i,{src:\"/blog/circular-queue.png\",alt:\"Circular Queue\"}),\"\\n\",n(t.p,{children:\"Circular Queue（循環佇列）是一種特殊的佇列，與普通的佇列不同，它的佇列結構是環形的，即在一定的容量限制下，當佇列的尾指針到達了佇列的最後一個位置時，就會繞回到佇列的開頭，形成一個循環，從而可以有效地利用佇列的存儲空間。\"}),\"\\n\",r(t.p,{children:[\"在使用循環佇列的時候需要注意到兩個詞 \",n(t.code,{children:\"front\"}),\" 他是一個指針，指向這個佇列中最前面那個元素的最前面一格，以及 \",n(t.code,{children:\"rear\"}),\" 是另一個指針，他指向的是整個佇列的最後一格。\"]}),\"\\n\",r(t.p,{children:[\"我一開始很好奇為什麼 front 指的不是佇列最前面的那個元素，原因是當今天如果 front 指向佇列中最前面那格的話，那 \",n(t.code,{children:\"front == rear\"}),\" 的時候就會出現 \",n(t.strong,{children:\"佇列已滿\"}),\" 和 \",n(t.strong,{children:\"佇列是空的\"}),\" 兩種情況，當這種模稜兩可的情況發生就會不利於我們判斷佇列的狀態。\\n但當我們把 front 指向最前面那個元素，\",n(t.code,{children:\"front == rear\"}),\" 就只會發生在 \",n(t.strong,{children:\"佇列為空\"}),\" 的情況，這樣就可以解決上面所提到的模糊地帶。\"]}),\"\\n\",n(t.p,{children:\"雖然這樣做可以解決問題，但他也會產生另外一個浪費空間的問題！因為如果 front 指向的是佇列中最前面元素的前一格，就代表 front 指向的那個永遠會是空的，也就造成了記憶體的浪費。但相比於其他解決模稜兩可的辦法，這個微小的記憶體浪費是可以被接受的，所以才會被廣泛採用。\"}),\"\\n\",n(t.p,{children:\"循環佇列的實現可以使用數組或鏈表等數據結構，其基本操作包括：入佇列（enqueue）、出佇列（dequeue）、查看佇列頭元素（front）、查看佇列尾元素（rear）等。其中，入佇列和出佇列的時間複雜度均為 O(1)，因此循環佇列是一種高效的佇列實現方式。\"}),\"\\n\",n(t.pre,{children:n(t.code,{children:'// 刪除循環佇列 q 中的元素\\nAlgorithm DeleteQ(item) {\\n  if(front = rear) then {\\n    write \"Queue is empty!\"; //因為繞一圈，所以如果頭尾相同的話就等於他是空的\\n    return false;\\n  } else {\\n    front = (front + 1) % q.size; // 把 front 的指針往後移一個位置(e.g. 0 -> 1)\\n    q[front] = none; // 把原本在 front 那個元素刪掉\\n    return true;\\n  }\\n}\\n'})}),\"\\n\",n(t.pre,{children:n(t.code,{children:'// 在循環佇列 q 中插入元素\\nAlogrithm AddQ(item) {\\n  rear = (rear + 1) % q.size; //把 rear 往後移一格\\n  if(front == rear) then {\\n    write(\"Queue is full!\"); //往後移一個之後就碰到 front 代表已經滿了\\n    if(front == 0) then rear = n - 1; //這個 if/else 是把剛剛移動的 rear 指針移回到原本的位子\\n    else rear = rear - 1;\\n    return false;\\n  } else {\\n    q[rear] = item;\\n    return true;\\n  }\\n}\\n\\n'})})]})}return{default:function(e={}){const{wrapper:r}=e.components||{};return r?n(r,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/stacks-and-queues"},{"type":"Post","slug":"trees","title":"[Algorithm] Day.5 樹 (Trees)","description":"樹在資料結構中是一種由數個節點 (Node) 所組成的一種有上下關係的結構。","publishedAt":"2023-03-13T00:00:00.000Z","tags":["algorithm","note"],"body":"const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(i){const l={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",span:\"span\",strong:\"strong\",...i.components},{Image:c}=l;return c||function(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Image\",!0),r(n,{children:[e(l.p,{children:\"樹在資料結構中是一種由數個節點 (Node) 所組成的一種有上下關係的結構。\"}),\"\\n\",e(l.p,{children:\"樹的特色是：\"}),\"\\n\",r(l.ol,{children:[\"\\n\",e(l.li,{children:\"除了根節點 (root) 以外，每個節點都會有一個父節點\"}),\"\\n\",e(l.li,{children:\"每個節點都可以有零個或多個節點\"}),\"\\n\",e(l.li,{children:\"從根節點開始我們可以順著走到每一個節點\"}),\"\\n\"]}),\"\\n\",e(c,{src:\"/blog/trees/tree.png\",alt:\"tree\"}),\"\\n\",e(l.p,{children:\"那現在就上我們配著上面這張圖來介紹一些在樹裡面會常見到的詞吧！\"}),\"\\n\",r(l.ol,{children:[\"\\n\",r(l.li,{children:[e(l.strong,{children:\"節點 (Node)\"}),\": 在樹裡面的每個元素我們都稱之為節點，如上圖中的 A - M 都是一個一個的節點\"]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"父節點 (Parent Node)\"}),\"：可以看圖中的 A 點，因為從他伸出了 B、C、D 三點，所以我們稱 A 是 B、C、D 三點的\",e(l.strong,{children:\"父節點\"})]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"子節點 (Child Node)\"}),\"： 相對於 A 是 B、C、D 的父節點；B、C、D 三點就是 A 的\",e(l.strong,{children:\"子節點\"})]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"兄弟節點 (Sibling Node)\"}),\"：圖中的 B、C、D 三點互相是對方的兄弟節點，也就是在樹中同一層的節點\"]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"根節點 (root)\"}),\"：這也就是圖中的 A 點，是整棵樹的\",e(l.strong,{children:\"起點\"}),\"，也是唯一一個沒有父節點的節點\"]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"葉節點 (leaf)\"}),\"：圖中的 K、L、M 三點，是整棵樹的\",e(l.strong,{children:\"最下層\"}),\"，也就是只有父節點沒有子節點的節點\"]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"祖先節點 (Ancestor Node)\"}),\"：一個節點往上到根節點的路上每個節點都稱為他的祖先節點\"]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"子孫節點 (Descendant Node)\"}),\"：一個節點往下到葉節點的路上每個節點都是他的子雖節點\"]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"度 (Degree)\"}),\"：一個節點的\",e(l.strong,{children:\"子節點數量\"}),\"。例如圖中的 A 節點因為有 B、C、D 三個子節點所以他就是 3 度\"]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"深度 (Depth)\"}),\"：根節點到某一個子節點的層數就是那個子節點的深度，例如 I 節點到根節點 A 中間有 3 層，所以他的深度就是 3\"]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"高度 (Height)\"}),\"：整棵樹有幾層，也可以說是整個樹深度的最大值，例如圖中的樹高度就是 4\"]}),\"\\n\",r(l.li,{children:[e(l.strong,{children:\"森林 (Forest)\"}),\"：一個由很多顆樹組成的集合就稱為森林\"]}),\"\\n\"]}),\"\\n\",r(l.h2,{id:\"二元樹-binary-tree\",children:[e(l.a,{className:\"anchor\",href:\"#二元樹-binary-tree\",children:e(l.span,{className:\"icon icon-link\"})}),\"二元樹 Binary Tree\"]}),\"\\n\",e(c,{src:\"/blog/trees/binary-tree.png\",alt:\"Binary Tree\"}),\"\\n\",e(l.p,{children:\"二元樹是一種很常見的樹，他的規則就是每個節點都最多只能有兩個子節點（可以 0, 1, 2 個），若一個節點有兩個子節點，我們就把他的子節點取名為左子節點 (Left Child) 和右子節點 (Right Child)\"}),\"\\n\",e(l.p,{children:\"二元樹的另外一個特性就是我們可以順利的從上到下從左到右的幫每一個節點編碼，這個特性可以方便我們快速找到每個節點的父節點，並且可以把樹存在陣列當中\"}),\"\\n\",r(l.h3,{id:\"滿二元樹-full-binary-tree\",children:[e(l.a,{className:\"anchor\",href:\"#滿二元樹-full-binary-tree\",children:e(l.span,{className:\"icon icon-link\"})}),\"滿二元樹 (Full Binary Tree)\"]}),\"\\n\",r(l.p,{children:[\"如果一個二元樹的非葉節點都有 2 個子節點，且所有葉子都在同一層（如上圖），這個深度為 k 的樹就會有 \",e(l.strong,{children:\"2^k - 1\"}),\" 個節點，且我們稱它為 \",e(l.code,{children:\"滿二元樹（Full Binary Tree）\"})]}),\"\\n\",r(l.h3,{id:\"完全二元樹-complete-binary-tree\",children:[e(l.a,{className:\"anchor\",href:\"#完全二元樹-complete-binary-tree\",children:e(l.span,{className:\"icon icon-link\"})}),\"完全二元樹 (Complete Binary Tree)\"]}),\"\\n\",r(l.p,{children:[\"如果一個二元樹除了最後一層之外，所有層都必須填滿節點，最後一層的節點必須從左到右填入，那我們就稱它為 \",e(l.code,{children:\"完全二元樹\"})]}),\"\\n\",e(l.p,{children:\"完全二元樹在應用中具有很多優點，例如：\"}),\"\\n\",r(l.ol,{children:[\"\\n\",e(l.li,{children:\"可以使用陣列來存儲，這樣可以減少存儲空間（因為不用存 key 值）。\"}),\"\\n\",e(l.li,{children:\"可以用來實現堆（Heap）等高效的數據結構，進而用於排序、優先級佇列等操作。\"}),\"\\n\",e(l.li,{children:\"可以用於搜索二元樹（Binary Search Tree）的平衡化，將搜索二元樹轉換為平衡二元樹，以提高搜索、插入和刪除的效率。\"}),\"\\n\"]}),\"\\n\",e(l.p,{children:\"二元樹是一個在資工領域中超級常用的資料結構，今天介紹了一些基本的名詞解釋，明天就會進入開始介紹這些二元樹的實際應用。\"})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/trees"},{"type":"Post","slug":"what-did-i-learn-from-building-a-text-editor-from-scratch","title":"[Project] What did I learn from building a text editor from scratch","description":"I built a text editor using C from scratch, this is my first time building something using C, let's see what I learn from the project","publishedAt":"2024-08-08T00:00:00.000Z","tags":["projects","c"],"body":"const{Fragment:e,jsx:t,jsxs:n}=arguments[0];function _createMdxContent(o){const a={a:\"a\",code:\"code\",h2:\"h2\",p:\"p\",span:\"span\",...o.components};return n(e,{children:[n(a.h2,{id:\"introduction\",children:[t(a.a,{className:\"anchor\",href:\"#introduction\",children:t(a.span,{className:\"icon icon-link\"})}),\"Introduction\"]}),\"\\n\",n(a.p,{children:[\"It's been a long time since I've worked on a personal project. While browsing YouTube, I stumbled upon a video by @ThePrimeTime titled \",t(a.code,{children:\"Projects that Every Programmer Should Try\"}),\" which immediately caught my attention. This video is a reaction to another popular video, and both recommend building a text editor as an essential project for programmers. Intrigued by the idea of creating an application that everyone uses daily, I decided to dive into this project and explore what makes it so interesting and challenging.\"]}),\"\\n\",n(a.h2,{id:\"planning\",children:[t(a.a,{className:\"anchor\",href:\"#planning\",children:t(a.span,{className:\"icon icon-link\"})}),\"Planning\"]}),\"\\n\",t(a.p,{children:\"Initially, I felt a bit lost about how to start the project, so I began browsing for resources and guidance. Fortunately, I discovered a repository created by Paige, which provides a step-by-step tutorial for building a basic terminal text editor in C. This tutorial promises to cover all the crucial features within less than 1000 lines of code. However, I faced a significant challenge: I've never built a C program with more than two functions. I saw this project as a perfect opportunity to expand my understanding of this world-famous, yet notoriously challenging, programming language. Through this journey, I aimed to not only build a functional text editor but also deepen my knowledge of C and improve my coding skills.\"}),\"\\n\",n(a.h2,{id:\"it-is-a-serious-project\",children:[t(a.a,{className:\"anchor\",href:\"#it-is-a-serious-project\",children:t(a.span,{className:\"icon icon-link\"})}),\"It is a serious project\"]}),\"\\n\",t(a.p,{children:\"Text editor is something we use multiple times a day, maybe it's the reason I didn't think it will be too difficult. But that is one of my biggest miss-understanding in the entire decade. I need to think deeper, need to think about more basic behaviors such as how to handle key presses, how to quit the text editor etc. Therefore, following the tutorial helps a lot. By reading the doc I kept feel eye-opening,and repeatly said the same sentence: How can this genious know he need to build this feature. So I've learned a great lesson for my future projects that is I will need to do more research and try to make a conprehensive plan before I really start to build something. Those planning process will help me think through the project detailly and will help achieve what everyone wish to do: enhance productivity and avoid mistakes.\"}),\"\\n\",n(a.h2,{id:\"i-dont-really-need-all-the-fancy-stuffs\",children:[t(a.a,{className:\"anchor\",href:\"#i-dont-really-need-all-the-fancy-stuffs\",children:t(a.span,{className:\"icon icon-link\"})}),\"I don't really need all the fancy stuffs\"]}),\"\\n\",t(a.p,{children:\"The data structure I used and the code I wrote by following the tutorial are surprisingly simple. I wrote every line of code in a single file, used only built-in libraries, and stored all the text in a dynamic array of chars. We often seek out new tools or methods to solve our issues, but sometimes we already have everything we need to conquer the obstacles we face. I'm not saying we shouldn't learn new things and expand our knowledge base, but when the goal is to get the job done, it can be helpful to just dive in and get your hands dirty. Don't over-prepare and lose focus. Remember, we aim to complete the task, so let's get the job done instead of getting stuck in the planning stage.\"}),\"\\n\",n(a.h2,{id:\"maybe-i-should-not-follow-the-tutorial\",children:[t(a.a,{className:\"anchor\",href:\"#maybe-i-should-not-follow-the-tutorial\",children:t(a.span,{className:\"icon icon-link\"})}),\"Maybe I should not follow the tutorial\"]}),\"\\n\",t(a.p,{children:\"I can't count how many times I thanked the tutorial for helping me finish the text editor, but through writing this blog post and repeatedly reflecting on what I learned, I realized that I didn't grow as much as I had hoped in terms of coding a text editor or using C. These two aspects were my main goals for this project, but because the tutorial was well-documented, even though I read and understood every line, I still felt a bit empty. The gains weren't as significant as I had anticipated. I should have tried to do more on my own and experienced more failures during this project. I can almost guarantee that I would have grown more that way.\"})]})}return{default:function(e={}){const{wrapper:n}=e.components||{};return n?t(n,{...e,children:t(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/what-did-i-learn-from-building-a-text-editor-from-scratch"},{"type":"Post","slug":"what-is-socket","title":"[Note] What is a Socket","description":"This is the first note I took when creating a http server with c, I'm curious about why people always create and connect to a socket server in the beginning, so this is my note after studying socket basics","publishedAt":"2024-09-18T00:00:00.000Z","tags":["socket","note","network"],"body":"const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(i){const o={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",ol:\"ol\",p:\"p\",span:\"span\",strong:\"strong\",ul:\"ul\",...i.components};return t(e,{children:[t(o.p,{children:[\"I am currently creating an HTTP server using C because I want to learn more about this language. Also, I have been a web developer for the past few years, so I chose this project to create and would like to experience a pleasant work and learn journey. However, when I encountered something unusal at the very beginning of creating this project, which is \",n(o.code,{children:\"why everyone creates a socket as their first line of code when they are creating HTTP server with c\"}),\". The question pops up because I never did that before when I was using express.js to create backend servers. At that moment, I rea,ized this project was worth doing, so let's find out what a socket is.\"]}),\"\\n\",t(o.h2,{id:\"network-socket\",children:[n(o.a,{className:\"anchor\",href:\"#network-socket\",children:n(o.span,{className:\"icon icon-link\"})}),\"Network Socket\"]}),\"\\n\",n(o.p,{children:\"There are many types of sockets accross industries, network socket, hardware socket, WebSocket etc. Today, we are going to focus on network socket, which are the one we usually refer to when saying socket in the software industry.\"}),\"\\n\",n(o.p,{children:\"A socket is an endpoint for two machines to communicate and exchange data over a network. In the context of HTTP server, it is used to listen for incoming connections from client (e.g. web browser) to send or receive data between server and clients.\"}),\"\\n\",t(o.h2,{id:\"key-concepts\",children:[n(o.a,{className:\"anchor\",href:\"#key-concepts\",children:n(o.span,{className:\"icon icon-link\"})}),\"Key Concepts\"]}),\"\\n\",t(o.h4,{id:\"1-ip-address-and-port-number\",children:[n(o.a,{className:\"anchor\",href:\"#1-ip-address-and-port-number\",children:n(o.span,{className:\"icon icon-link\"})}),\"1. IP Address and Port Number:\"]}),\"\\n\",n(o.p,{children:\"A socket is identified by a combination of an IP address and a port number.\"}),\"\\n\",t(o.ul,{children:[\"\\n\",t(o.li,{children:[\"Example: If we want to connect to a web server, we might connect to IP address \",n(o.code,{children:\"192.168.1.1\"}),\" on port \",n(o.code,{children:\"80\"}),\" (the default port for HTTP)\"]}),\"\\n\"]}),\"\\n\",t(o.h4,{id:\"2-client-server-modal\",children:[n(o.a,{className:\"anchor\",href:\"#2-client-server-modal\",children:n(o.span,{className:\"icon icon-link\"})}),\"2. Client-Server Modal:\"]}),\"\\n\",t(o.ul,{children:[\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Client\"}),\":\\nThe client is the machine or application that initiates the connection. It sends requests to the server.\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Server\"}),\":\\nThe server is the machine or application that waits for incoming connections on a specific socket and responds to client request.\"]}),\"\\n\"]}),\"\\n\",t(o.h4,{id:\"3-socket-lifecycle\",children:[n(o.a,{className:\"anchor\",href:\"#3-socket-lifecycle\",children:n(o.span,{className:\"icon icon-link\"})}),\"3. Socket Lifecycle:\"]}),\"\\n\",t(o.ol,{children:[\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Creating a Socket\"}),\": The server creates a socket and binds it to a specific address and port number.\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Listening\"}),\": The server listens for incoming connection requests from clients on the socket.\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Connecting\"}),\": The client creates its socket and connects to the server's socket.\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Data Exchange\"}),\": Once the connection is established, data can be sent and received through the socket.\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Closing the Socket\"}),\": After the communication is complete, both the client and the server close their sockets to free up resources.\"]}),\"\\n\"]}),\"\\n\",t(o.h4,{id:\"4-listening-socket-and-connection-socket\",children:[n(o.a,{className:\"anchor\",href:\"#4-listening-socket-and-connection-socket\",children:n(o.span,{className:\"icon icon-link\"})}),\"4. Listening Socket and Connection Socket:\"]}),\"\\n\",t(o.ul,{children:[\"\\n\",t(o.li,{children:[\"\\n\",n(o.p,{children:\"Listening Socket (or Server Socket)\"}),\"\\n\",t(o.ul,{children:[\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Purpose\"}),\": This socket is created when the server starts, and it is used solely to listen for incoming connection requests from clients.\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Behavior\"}),\": It remains open and active for the entire duration that the server is running. It does not close after handling a client request because its job is to continuously listen for new connection attempts.\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",t(o.li,{children:[\"\\n\",n(o.p,{children:\"Connection Socket (or Per-Client Socket)\"}),\"\\n\",t(o.ul,{children:[\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Purpose\"}),\": This socket is created temporarily to handle communication with a specific client. It is created when the server accepts an incoming connection from a client using the listening socket.\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Behavior\"}),\": Each client connection results in a new connection socket, which is closed after the communication is complete.\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",t(o.h2,{id:\"type-of-network-sockets\",children:[n(o.a,{className:\"anchor\",href:\"#type-of-network-sockets\",children:n(o.span,{className:\"icon icon-link\"})}),\"Type of Network Sockets\"]}),\"\\n\",t(o.h3,{id:\"tcp-socket\",children:[n(o.a,{className:\"anchor\",href:\"#tcp-socket\",children:n(o.span,{className:\"icon icon-link\"})}),\"TCP Socket\"]}),\"\\n\",t(o.ul,{children:[\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Description\"}),\": TCP (Transmission Control Protocol) is a connection-oriented protocal that provides reliable, ordered, and error-checked delivery of data.\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Characteristics\"}),\":\",\"\\n\",t(o.ul,{children:[\"\\n\",n(o.li,{children:\"Establishes a connection before data is exchanged.\"}),\"\\n\",n(o.li,{children:\"Ensures data arrives in the same order it was sent.\"}),\"\\n\",n(o.li,{children:\"Handles retransmissions of lost packets.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Use Case\"}),\": Web servers (HTTP/HTTPS), email servers, file transfers, SSH servers.\"]}),\"\\n\"]}),\"\\n\",t(o.h3,{id:\"udp-socket-servers\",children:[n(o.a,{className:\"anchor\",href:\"#udp-socket-servers\",children:n(o.span,{className:\"icon icon-link\"})}),\"UDP Socket Servers\"]}),\"\\n\",t(o.ul,{children:[\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Description\"}),\": UDP (User Datagram Protocol) is a connectionless protocal that provides faster, but less reliable, communication compared to TCP.\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Characteristics\"}),\":\",\"\\n\",t(o.ul,{children:[\"\\n\",n(o.li,{children:\"No connections is established before sending data.\"}),\"\\n\",n(o.li,{children:\"Data may arrive out of order, and packets can be lost without being retransmitted.\"}),\"\\n\",n(o.li,{children:\"Lower overhead and latency compared to TCP.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",t(o.li,{children:[n(o.strong,{children:\"Use Cases\"}),\": DNS servers, video streaming, online gaming, Voice over IP servers.\"]}),\"\\n\"]}),\"\\n\",t(o.h2,{id:\"websocket\",children:[n(o.a,{className:\"anchor\",href:\"#websocket\",children:n(o.span,{className:\"icon icon-link\"})}),\"WebSocket\"]}),\"\\n\",t(o.p,{children:[\"Before I started this project, WebSocket was the only socket that I was familiar with, I used \",n(o.code,{children:\"socket.io\"}),\" multiple times in my other projects to help create long-term connection between client and server. However, I realized that I never really understood what is under the hood, and I believe this should be a great opportunity to reveal the secret.\"]}),\"\\n\",t(o.h3,{id:\"what-is-websocket\",children:[n(o.a,{className:\"anchor\",href:\"#what-is-websocket\",children:n(o.span,{className:\"icon icon-link\"})}),\"What is WebSocket\"]}),\"\\n\",n(o.p,{children:\"WebSocket is a communication protocol that provides two-way (full-duplex) communication channels over a single, long-lived TCP connection. It was designed to enable real-time communications between a clients and a servers, allowing both parties to send and receive messages at any time without the overhead of repeatedly establishing new connections.\"}),\"\\n\",t(o.h3,{id:\"websocket-vs-tcp-socket\",children:[n(o.a,{className:\"anchor\",href:\"#websocket-vs-tcp-socket\",children:n(o.span,{className:\"icon icon-link\"})}),\"WebSocket vs TCP socket\"]}),\"\\n\",n(o.p,{children:\"WebSocket operates on top of the TCP protocol, which means that while WebSocket itself is a higher-level protocol designed for specific use cases, it relies on the underlying TCP protocol to manage the connection and ensure reliable data transmission.\"}),\"\\n\",t(o.h3,{id:\"websocket-vs-udp-socket\",children:[n(o.a,{className:\"anchor\",href:\"#websocket-vs-udp-socket\",children:n(o.span,{className:\"icon icon-link\"})}),\"WebSocket vs UDP socket\"]}),\"\\n\",n(o.p,{children:\"We know that UDP and WebSocket have similar use cases, such as video games, live video, but what are the key differences between these two.\"}),\"\\n\",t(o.ol,{children:[\"\\n\",t(o.li,{children:[\"\\n\",t(o.p,{children:[n(o.strong,{children:\"Reliability\"}),\": Because WebSocket is a built on top of TCP, it inherents the reliable characteristics of the protocol, which guarantees the connection receives data in correct order without loss or duplication.\"]}),\"\\n\"]}),\"\\n\",t(o.li,{children:[\"\\n\",t(o.p,{children:[n(o.strong,{children:\"Connection Management\"}),\": Websocket establishes a persistent, full-duplex connection between the client and server after an initial HTTP handshake. UDP, on the other hand, does not maintain a connection and sends data without ensuring that it is received.\"]}),\"\\n\"]}),\"\\n\",t(o.li,{children:[\"\\n\",t(o.p,{children:[n(o.strong,{children:\"Overhead\"}),\": Websocket relies on TCP, it has more overhead due to the need for connection setup, maintenance, and ensuring reliable delivery. However, UDP's lack of connection management and error correction means it has very low overhead, making it faster and more efficient for transmitting volumes of data quickly.\"]}),\"\\n\"]}),\"\\n\"]}),\"\\n\",n(o.p,{children:\"In Summary, we will choose Websocket if we want a more reliable connection, and choose UDP if we focus on speed more than the reliability.\"}),\"\\n\",t(o.h2,{id:\"outro\",children:[n(o.a,{className:\"anchor\",href:\"#outro\",children:n(o.span,{className:\"icon icon-link\"})}),\"Outro\"]}),\"\\n\",n(o.p,{children:\"After gaining a better understanding of socket, I now understand what sockets are. Additionally, I realized that in higer-level languages and libraries, many basic features are implemented by the language or library itself, and user might not even know the existance of them. Therefore, this reinfored my desire to learn more about lower level languages and get deeper understanding of programming.\"})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};","path":"/posts/what-is-socket"},{"type":"Post","slug":"what-is-svg","title":"SVG 到底是什麼？ SVG 簡單介紹～","description":"身為一個網頁前端工程學徒，不免俗的會看到幾種圖片的副檔名，最常見的大概就是 jpg, png, svg 這三種了吧！說到 jpg, png 這兩種還算熟悉，畢竟我們一班看到的圖片大部分都是這兩種結尾的，但是 svg 是什麼就讓我霧颯颯的了！那反正都要來查查看，不如就直接寫成文章吧!","publishedAt":"2022-03-15T00:00:00.000Z","tags":["image","svg"],"body":"const{Fragment:n,jsx:e,jsxs:r}=arguments[0];function _createMdxContent(c){const l={a:\"a\",blockquote:\"blockquote\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",span:\"span\",strong:\"strong\",ul:\"ul\",...c.components};return r(n,{children:[e(l.p,{children:\"身為一個網頁前端工程學徒，不免俗的會看到幾種圖片的副檔名，最常見的大概就是 jpg, png, svg 這三種了吧！說到 jpg, png 這兩種還算熟悉，畢竟我們一班看到的圖片大部分都是這兩種結尾的，但是 svg 是什麼就讓我霧颯颯的了！那反正都要來查查看，不如就直接寫成文章吧\"}),\"\\n\",r(l.h2,{id:\"svg-是什麼\",children:[e(l.a,{className:\"anchor\",href:\"#svg-是什麼\",children:e(l.span,{className:\"icon icon-link\"})}),\"SVG 是什麼？\"]}),\"\\n\",e(l.p,{children:\"SVG 全名是 Scalable Vector Graphics，中文就不翻譯了，反正也不會記得。他的特性呢就是他是向量圖形，而不是像 jpg, png 是像素圖型，所以 svg 圖片就會有不會被特定解析度限制的特色！而這個特色就讓我們這些每天面對不同螢幕解析度的前端工程師有著非常大的幫助！\"}),\"\\n\",r(l.h3,{id:\"svg-和點陣圖哪裡不一樣\",children:[e(l.a,{className:\"anchor\",href:\"#svg-和點陣圖哪裡不一樣\",children:e(l.span,{className:\"icon icon-link\"})}),\"SVG 和點陣圖哪裡不一樣？\"]}),\"\\n\",e(l.p,{children:\"先來說說點陣圖（jpg, png, gif) 是怎麼畫圖的，點陣圖的做法就是把一張畫布氛圍非常多的小方格，然後幫每一格方格都放入顏色，最後由這些有顏色的方格排列組合就變成我們想要的圖案！但是這樣有什麼缺點呢？就是當我們把我們的畫布放大的時候，格子就會跟著放大，而當格子大到一定程度的時候，就會變成像馬賽克那個樣子，圓弧線變得有稜有角的，就是我們所謂的解析度不夠的問題發生！\"}),\"\\n\",e(l.p,{children:\"而 SVG 不一樣的地方在於，他並沒有把話不變成一格一格的小格子，而是直接把圖形化出來，這裡需要一個圓，需要佔比多大的圓，他就直接畫成一個那麼大的圓形，所以當畫面變大的時候，他依然是一個圓，依然佔整張畫布的特定部分，所以就不會造成因為畫面解析度變大而變成馬賽克的樣子。所以總歸用一句抽象但是又蠻對的話說就是：\"}),\"\\n\",r(l.blockquote,{children:[\"\\n\",e(l.p,{children:\"SVG 是把圖片畫出來，而其他點陣圖則是把圖片拼出來\"}),\"\\n\"]}),\"\\n\",e(l.p,{children:e(l.strong,{children:\"SVG 好棒棒 or 不棒棒？\"})}),\"\\n\",e(l.p,{children:\"那現在就讓我們列點說說看 SVG 到底有哪些優缺點吧～\"}),\"\\n\",e(l.p,{children:e(l.strong,{children:\"優點：\"})}),\"\\n\",r(l.ol,{children:[\"\\n\",e(l.li,{children:\"可以無限放大而不會出現解析度不足問題\"}),\"\\n\",e(l.li,{children:\"檔案大小比較小\"}),\"\\n\",e(l.li,{children:\"可以分開獲取圖檔中的文字資料\"}),\"\\n\",e(l.li,{children:\"可以輕易畫成動畫\"}),\"\\n\"]}),\"\\n\",e(l.p,{children:e(l.strong,{children:\"缺點：\"})}),\"\\n\",r(l.ul,{children:[\"\\n\",e(l.li,{children:\"設計的時候比較麻煩\"}),\"\\n\",e(l.li,{children:\"過於老舊的瀏覽器不會支援\"}),\"\\n\"]}),\"\\n\",e(l.p,{children:e(l.strong,{children:\"做個總結：\"})}),\"\\n\",e(l.p,{children:\"今天寫完這篇文章，算是對於原本不懂的 svg 有了一些初步的了解，在前端工程師的角度來看的話，svg 的使用是真的蠻方便的，至少可以避免掉幫每一張圖片做 RWD 的時間，而且輕量化的圖片也可以在每次 request 的等待時間變短。但是對於設計來說其實就不知道了哈哈！希望你們看完這篇文章也可以和我一樣對 svg 有一個基本的了解啦！\"})]})}return{default:function(n={}){const{wrapper:r}=n.components||{};return r?e(r,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","path":"/posts/what-is-svg"}]